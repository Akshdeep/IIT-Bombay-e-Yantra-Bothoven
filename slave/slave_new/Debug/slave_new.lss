
slave_new.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001b04  00800200  000023ca  0000245e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000252  00801d04  00801d04  00003f62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003f62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003f94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00003fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000388f  00000000  00000000  0000420c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fd5  00000000  00000000  00007a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c0b  00000000  00000000  00008a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c8  00000000  00000000  0000a67c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dd5  00000000  00000000  0000ae44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b2d  00000000  00000000  0000bc19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000e746  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	bb c0       	rjmp	.+374    	; 0x178 <__ctors_end>
       2:	00 00       	nop
       4:	da c0       	rjmp	.+436    	; 0x1ba <__bad_interrupt>
       6:	00 00       	nop
       8:	d8 c0       	rjmp	.+432    	; 0x1ba <__bad_interrupt>
       a:	00 00       	nop
       c:	d6 c0       	rjmp	.+428    	; 0x1ba <__bad_interrupt>
       e:	00 00       	nop
      10:	d4 c0       	rjmp	.+424    	; 0x1ba <__bad_interrupt>
      12:	00 00       	nop
      14:	64 c4       	rjmp	.+2248   	; 0x8de <__vector_5>
      16:	00 00       	nop
      18:	3d c4       	rjmp	.+2170   	; 0x894 <__vector_6>
      1a:	00 00       	nop
      1c:	ce c0       	rjmp	.+412    	; 0x1ba <__bad_interrupt>
      1e:	00 00       	nop
      20:	cc c0       	rjmp	.+408    	; 0x1ba <__bad_interrupt>
      22:	00 00       	nop
      24:	ca c0       	rjmp	.+404    	; 0x1ba <__bad_interrupt>
      26:	00 00       	nop
      28:	c8 c0       	rjmp	.+400    	; 0x1ba <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c6 c0       	rjmp	.+396    	; 0x1ba <__bad_interrupt>
      2e:	00 00       	nop
      30:	c4 c0       	rjmp	.+392    	; 0x1ba <__bad_interrupt>
      32:	00 00       	nop
      34:	c2 c0       	rjmp	.+388    	; 0x1ba <__bad_interrupt>
      36:	00 00       	nop
      38:	c0 c0       	rjmp	.+384    	; 0x1ba <__bad_interrupt>
      3a:	00 00       	nop
      3c:	be c0       	rjmp	.+380    	; 0x1ba <__bad_interrupt>
      3e:	00 00       	nop
      40:	bc c0       	rjmp	.+376    	; 0x1ba <__bad_interrupt>
      42:	00 00       	nop
      44:	ba c0       	rjmp	.+372    	; 0x1ba <__bad_interrupt>
      46:	00 00       	nop
      48:	b8 c0       	rjmp	.+368    	; 0x1ba <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b6 c0       	rjmp	.+364    	; 0x1ba <__bad_interrupt>
      4e:	00 00       	nop
      50:	b4 c0       	rjmp	.+360    	; 0x1ba <__bad_interrupt>
      52:	00 00       	nop
      54:	b2 c0       	rjmp	.+356    	; 0x1ba <__bad_interrupt>
      56:	00 00       	nop
      58:	b0 c0       	rjmp	.+352    	; 0x1ba <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ae c0       	rjmp	.+348    	; 0x1ba <__bad_interrupt>
      5e:	00 00       	nop
      60:	ac c0       	rjmp	.+344    	; 0x1ba <__bad_interrupt>
      62:	00 00       	nop
      64:	e8 c6       	rjmp	.+3536   	; 0xe36 <__vector_25>
      66:	00 00       	nop
      68:	a8 c0       	rjmp	.+336    	; 0x1ba <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a6 c0       	rjmp	.+332    	; 0x1ba <__bad_interrupt>
      6e:	00 00       	nop
      70:	a4 c0       	rjmp	.+328    	; 0x1ba <__bad_interrupt>
      72:	00 00       	nop
      74:	a2 c0       	rjmp	.+324    	; 0x1ba <__bad_interrupt>
      76:	00 00       	nop
      78:	a0 c0       	rjmp	.+320    	; 0x1ba <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9e c0       	rjmp	.+316    	; 0x1ba <__bad_interrupt>
      7e:	00 00       	nop
      80:	9c c0       	rjmp	.+312    	; 0x1ba <__bad_interrupt>
      82:	00 00       	nop
      84:	9a c0       	rjmp	.+308    	; 0x1ba <__bad_interrupt>
      86:	00 00       	nop
      88:	98 c0       	rjmp	.+304    	; 0x1ba <__bad_interrupt>
      8a:	00 00       	nop
      8c:	96 c0       	rjmp	.+300    	; 0x1ba <__bad_interrupt>
      8e:	00 00       	nop
      90:	94 c0       	rjmp	.+296    	; 0x1ba <__bad_interrupt>
      92:	00 00       	nop
      94:	92 c0       	rjmp	.+292    	; 0x1ba <__bad_interrupt>
      96:	00 00       	nop
      98:	90 c0       	rjmp	.+288    	; 0x1ba <__bad_interrupt>
      9a:	00 00       	nop
      9c:	8e c0       	rjmp	.+284    	; 0x1ba <__bad_interrupt>
      9e:	00 00       	nop
      a0:	8c c0       	rjmp	.+280    	; 0x1ba <__bad_interrupt>
      a2:	00 00       	nop
      a4:	8a c0       	rjmp	.+276    	; 0x1ba <__bad_interrupt>
      a6:	00 00       	nop
      a8:	88 c0       	rjmp	.+272    	; 0x1ba <__bad_interrupt>
      aa:	00 00       	nop
      ac:	86 c0       	rjmp	.+268    	; 0x1ba <__bad_interrupt>
      ae:	00 00       	nop
      b0:	84 c0       	rjmp	.+264    	; 0x1ba <__bad_interrupt>
      b2:	00 00       	nop
      b4:	82 c0       	rjmp	.+260    	; 0x1ba <__bad_interrupt>
      b6:	00 00       	nop
      b8:	80 c0       	rjmp	.+256    	; 0x1ba <__bad_interrupt>
      ba:	00 00       	nop
      bc:	7e c0       	rjmp	.+252    	; 0x1ba <__bad_interrupt>
      be:	00 00       	nop
      c0:	7c c0       	rjmp	.+248    	; 0x1ba <__bad_interrupt>
      c2:	00 00       	nop
      c4:	7a c0       	rjmp	.+244    	; 0x1ba <__bad_interrupt>
      c6:	00 00       	nop
      c8:	78 c0       	rjmp	.+240    	; 0x1ba <__bad_interrupt>
      ca:	00 00       	nop
      cc:	76 c0       	rjmp	.+236    	; 0x1ba <__bad_interrupt>
      ce:	00 00       	nop
      d0:	74 c0       	rjmp	.+232    	; 0x1ba <__bad_interrupt>
      d2:	00 00       	nop
      d4:	72 c0       	rjmp	.+228    	; 0x1ba <__bad_interrupt>
      d6:	00 00       	nop
      d8:	70 c0       	rjmp	.+224    	; 0x1ba <__bad_interrupt>
      da:	00 00       	nop
      dc:	6e c0       	rjmp	.+220    	; 0x1ba <__bad_interrupt>
      de:	00 00       	nop
      e0:	6c c0       	rjmp	.+216    	; 0x1ba <__bad_interrupt>
      e2:	00 00       	nop
      e4:	4a 09       	sbc	r20, r10
      e6:	5e 09       	sbc	r21, r14
      e8:	7c 09       	sbc	r23, r12
      ea:	92 09       	sbc	r25, r2
      ec:	a8 09       	sbc	r26, r8
      ee:	c6 09       	sbc	r28, r6
      f0:	dc 09       	sbc	r29, r12
      f2:	f2 09       	sbc	r31, r2
      f4:	10 0a       	sbc	r1, r16
      f6:	07 63       	ori	r16, 0x37	; 55
      f8:	42 36       	cpi	r20, 0x62	; 98
      fa:	b7 9b       	sbis	0x16, 7	; 22
      fc:	d8 a7       	std	Y+40, r29	; 0x28
      fe:	1a 39       	cpi	r17, 0x9A	; 154
     100:	68 56       	subi	r22, 0x68	; 104
     102:	18 ae       	std	Y+56, r1	; 0x38
     104:	ba ab       	std	Y+50, r27	; 0x32
     106:	55 8c       	ldd	r5, Z+29	; 0x1d
     108:	1d 3c       	cpi	r17, 0xCD	; 205
     10a:	b7 cc       	rjmp	.-1682   	; 0xfffffa7a <__eeprom_end+0xff7efa7a>
     10c:	57 63       	ori	r21, 0x37	; 55
     10e:	bd 6d       	ori	r27, 0xDD	; 221
     110:	ed fd       	.word	0xfded	; ????
     112:	75 3e       	cpi	r23, 0xE5	; 229
     114:	f6 17       	cp	r31, r22
     116:	72 31       	cpi	r23, 0x12	; 18
     118:	bf 00       	.word	0x00bf	; ????
     11a:	00 00       	nop
     11c:	80 3f       	cpi	r24, 0xF0	; 240
     11e:	08 00       	.word	0x0008	; ????
     120:	00 00       	nop
     122:	be 92       	st	-X, r11
     124:	24 49       	sbci	r18, 0x94	; 148
     126:	12 3e       	cpi	r17, 0xE2	; 226
     128:	ab aa       	std	Y+51, r10	; 0x33
     12a:	aa 2a       	or	r10, r26
     12c:	be cd       	rjmp	.-1156   	; 0xfffffcaa <__eeprom_end+0xff7efcaa>
     12e:	cc cc       	rjmp	.-1640   	; 0xfffffac8 <__eeprom_end+0xff7efac8>
     130:	4c 3e       	cpi	r20, 0xEC	; 236
     132:	00 00       	nop
     134:	00 80       	ld	r0, Z
     136:	be ab       	std	Y+54, r27	; 0x36
     138:	aa aa       	std	Y+50, r10	; 0x32
     13a:	aa 3e       	cpi	r26, 0xEA	; 234
     13c:	00 00       	nop
     13e:	00 00       	nop
     140:	bf 00       	.word	0x00bf	; ????
     142:	00 00       	nop
     144:	80 3f       	cpi	r24, 0xF0	; 240
     146:	00 00       	nop
     148:	00 00       	nop
     14a:	00 08       	sbc	r0, r0
     14c:	41 78       	andi	r20, 0x81	; 129
     14e:	d3 bb       	out	0x13, r29	; 19
     150:	43 87       	std	Z+11, r20	; 0x0b
     152:	d1 13       	cpse	r29, r17
     154:	3d 19       	sub	r19, r13
     156:	0e 3c       	cpi	r16, 0xCE	; 206
     158:	c3 bd       	out	0x23, r28	; 35
     15a:	42 82       	std	Z+2, r4	; 0x02
     15c:	ad 2b       	or	r26, r29
     15e:	3e 68       	ori	r19, 0x8E	; 142
     160:	ec 82       	std	Y+4, r14	; 0x04
     162:	76 be       	out	0x36, r7	; 54
     164:	d9 8f       	std	Y+25, r29	; 0x19
     166:	e1 a9       	ldd	r30, Z+49	; 0x31
     168:	3e 4c       	sbci	r19, 0xCE	; 206
     16a:	80 ef       	ldi	r24, 0xF0	; 240
     16c:	ff be       	out	0x3f, r15	; 63
     16e:	01 c4       	rjmp	.+2050   	; 0x972 <angle_rotate+0x4a>
     170:	ff 7f       	andi	r31, 0xFF	; 255
     172:	3f 00       	.word	0x003f	; ????
     174:	00 00       	nop
	...

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d1 e2       	ldi	r29, 0x21	; 33
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61
     184:	00 e0       	ldi	r16, 0x00	; 0
     186:	0c bf       	out	0x3c, r16	; 60

00000188 <__do_copy_data>:
     188:	1d e1       	ldi	r17, 0x1D	; 29
     18a:	a0 e0       	ldi	r26, 0x00	; 0
     18c:	b2 e0       	ldi	r27, 0x02	; 2
     18e:	ea ec       	ldi	r30, 0xCA	; 202
     190:	f3 e2       	ldi	r31, 0x23	; 35
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0b bf       	out	0x3b, r16	; 59
     196:	02 c0       	rjmp	.+4      	; 0x19c <__do_copy_data+0x14>
     198:	07 90       	elpm	r0, Z+
     19a:	0d 92       	st	X+, r0
     19c:	a4 30       	cpi	r26, 0x04	; 4
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <__do_copy_data+0x10>

000001a2 <__do_clear_bss>:
     1a2:	2f e1       	ldi	r18, 0x1F	; 31
     1a4:	a4 e0       	ldi	r26, 0x04	; 4
     1a6:	bd e1       	ldi	r27, 0x1D	; 29
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	a6 35       	cpi	r26, 0x56	; 86
     1ae:	b2 07       	cpc	r27, r18
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <main>
     1b6:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <_exit>

000001ba <__bad_interrupt>:
     1ba:	22 cf       	rjmp	.-444    	; 0x0 <__vectors>

000001bc <lcd_set_4bit>:
}

void striking_arm_servo_3_free (void) //makes servo 3 free rotating
{
	OCR1CH = 0x03;
	OCR1CL = 0xFF; //Servo 3 off
     1bc:	86 e6       	ldi	r24, 0x66	; 102
     1be:	9e e0       	ldi	r25, 0x0E	; 14
     1c0:	01 97       	sbiw	r24, 0x01	; 1
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_set_4bit+0x4>
     1c4:	00 00       	nop
     1c6:	40 98       	cbi	0x08, 0	; 8
     1c8:	41 98       	cbi	0x08, 1	; 8
     1ca:	80 e3       	ldi	r24, 0x30	; 48
     1cc:	88 b9       	out	0x08, r24	; 8
     1ce:	42 9a       	sbi	0x08, 2	; 8
     1d0:	ef ef       	ldi	r30, 0xFF	; 255
     1d2:	f7 e4       	ldi	r31, 0x47	; 71
     1d4:	31 97       	sbiw	r30, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_set_4bit+0x18>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_set_4bit+0x1e>
     1da:	00 00       	nop
     1dc:	42 98       	cbi	0x08, 2	; 8
     1de:	e6 e6       	ldi	r30, 0x66	; 102
     1e0:	fe e0       	ldi	r31, 0x0E	; 14
     1e2:	31 97       	sbiw	r30, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_set_4bit+0x26>
     1e6:	00 00       	nop
     1e8:	40 98       	cbi	0x08, 0	; 8
     1ea:	41 98       	cbi	0x08, 1	; 8
     1ec:	88 b9       	out	0x08, r24	; 8
     1ee:	42 9a       	sbi	0x08, 2	; 8
     1f0:	ef ef       	ldi	r30, 0xFF	; 255
     1f2:	f7 e4       	ldi	r31, 0x47	; 71
     1f4:	31 97       	sbiw	r30, 0x01	; 1
     1f6:	f1 f7       	brne	.-4      	; 0x1f4 <lcd_set_4bit+0x38>
     1f8:	00 c0       	rjmp	.+0      	; 0x1fa <lcd_set_4bit+0x3e>
     1fa:	00 00       	nop
     1fc:	42 98       	cbi	0x08, 2	; 8
     1fe:	e6 e6       	ldi	r30, 0x66	; 102
     200:	fe e0       	ldi	r31, 0x0E	; 14
     202:	31 97       	sbiw	r30, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <lcd_set_4bit+0x46>
     206:	00 00       	nop
     208:	40 98       	cbi	0x08, 0	; 8
     20a:	41 98       	cbi	0x08, 1	; 8
     20c:	88 b9       	out	0x08, r24	; 8
     20e:	42 9a       	sbi	0x08, 2	; 8
     210:	8f ef       	ldi	r24, 0xFF	; 255
     212:	97 e4       	ldi	r25, 0x47	; 71
     214:	01 97       	sbiw	r24, 0x01	; 1
     216:	f1 f7       	brne	.-4      	; 0x214 <lcd_set_4bit+0x58>
     218:	00 c0       	rjmp	.+0      	; 0x21a <lcd_set_4bit+0x5e>
     21a:	00 00       	nop
     21c:	42 98       	cbi	0x08, 2	; 8
     21e:	e6 e6       	ldi	r30, 0x66	; 102
     220:	fe e0       	ldi	r31, 0x0E	; 14
     222:	31 97       	sbiw	r30, 0x01	; 1
     224:	f1 f7       	brne	.-4      	; 0x222 <lcd_set_4bit+0x66>
     226:	00 00       	nop
     228:	40 98       	cbi	0x08, 0	; 8
     22a:	41 98       	cbi	0x08, 1	; 8
     22c:	80 e2       	ldi	r24, 0x20	; 32
     22e:	88 b9       	out	0x08, r24	; 8
     230:	42 9a       	sbi	0x08, 2	; 8
     232:	8f ef       	ldi	r24, 0xFF	; 255
     234:	97 e4       	ldi	r25, 0x47	; 71
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	f1 f7       	brne	.-4      	; 0x236 <lcd_set_4bit+0x7a>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <lcd_set_4bit+0x80>
     23c:	00 00       	nop
     23e:	42 98       	cbi	0x08, 2	; 8
     240:	08 95       	ret

00000242 <lcd_wr_command>:
     242:	98 b1       	in	r25, 0x08	; 8
     244:	9f 70       	andi	r25, 0x0F	; 15
     246:	98 b9       	out	0x08, r25	; 8
     248:	98 b1       	in	r25, 0x08	; 8
     24a:	28 2f       	mov	r18, r24
     24c:	20 7f       	andi	r18, 0xF0	; 240
     24e:	92 2b       	or	r25, r18
     250:	98 b9       	out	0x08, r25	; 8
     252:	40 98       	cbi	0x08, 0	; 8
     254:	41 98       	cbi	0x08, 1	; 8
     256:	42 9a       	sbi	0x08, 2	; 8
     258:	ef ef       	ldi	r30, 0xFF	; 255
     25a:	f7 e4       	ldi	r31, 0x47	; 71
     25c:	31 97       	sbiw	r30, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_wr_command+0x1a>
     260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_wr_command+0x20>
     262:	00 00       	nop
     264:	42 98       	cbi	0x08, 2	; 8
     266:	98 b1       	in	r25, 0x08	; 8
     268:	9f 70       	andi	r25, 0x0F	; 15
     26a:	98 b9       	out	0x08, r25	; 8
     26c:	98 b1       	in	r25, 0x08	; 8
     26e:	82 95       	swap	r24
     270:	80 7f       	andi	r24, 0xF0	; 240
     272:	89 2b       	or	r24, r25
     274:	88 b9       	out	0x08, r24	; 8
     276:	40 98       	cbi	0x08, 0	; 8
     278:	41 98       	cbi	0x08, 1	; 8
     27a:	42 9a       	sbi	0x08, 2	; 8
     27c:	8f ef       	ldi	r24, 0xFF	; 255
     27e:	97 e4       	ldi	r25, 0x47	; 71
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	f1 f7       	brne	.-4      	; 0x280 <lcd_wr_command+0x3e>
     284:	00 c0       	rjmp	.+0      	; 0x286 <lcd_wr_command+0x44>
     286:	00 00       	nop
     288:	42 98       	cbi	0x08, 2	; 8
     28a:	08 95       	ret

0000028c <lcd_init>:
     28c:	86 e6       	ldi	r24, 0x66	; 102
     28e:	9e e0       	ldi	r25, 0x0E	; 14
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <lcd_init+0x4>
     294:	00 00       	nop
     296:	88 e2       	ldi	r24, 0x28	; 40
     298:	d4 df       	rcall	.-88     	; 0x242 <lcd_wr_command>
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	d2 df       	rcall	.-92     	; 0x242 <lcd_wr_command>
     29e:	86 e0       	ldi	r24, 0x06	; 6
     2a0:	d0 df       	rcall	.-96     	; 0x242 <lcd_wr_command>
     2a2:	8e e0       	ldi	r24, 0x0E	; 14
     2a4:	ce df       	rcall	.-100    	; 0x242 <lcd_wr_command>
     2a6:	80 e8       	ldi	r24, 0x80	; 128
     2a8:	cc cf       	rjmp	.-104    	; 0x242 <lcd_wr_command>
     2aa:	08 95       	ret

000002ac <lcd_wr_char>:
     2ac:	98 b1       	in	r25, 0x08	; 8
     2ae:	9f 70       	andi	r25, 0x0F	; 15
     2b0:	98 b9       	out	0x08, r25	; 8
     2b2:	98 b1       	in	r25, 0x08	; 8
     2b4:	28 2f       	mov	r18, r24
     2b6:	20 7f       	andi	r18, 0xF0	; 240
     2b8:	92 2b       	or	r25, r18
     2ba:	98 b9       	out	0x08, r25	; 8
     2bc:	40 9a       	sbi	0x08, 0	; 8
     2be:	41 98       	cbi	0x08, 1	; 8
     2c0:	42 9a       	sbi	0x08, 2	; 8
     2c2:	ef ef       	ldi	r30, 0xFF	; 255
     2c4:	f7 e4       	ldi	r31, 0x47	; 71
     2c6:	31 97       	sbiw	r30, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <lcd_wr_char+0x1a>
     2ca:	00 c0       	rjmp	.+0      	; 0x2cc <lcd_wr_char+0x20>
     2cc:	00 00       	nop
     2ce:	42 98       	cbi	0x08, 2	; 8
     2d0:	98 b1       	in	r25, 0x08	; 8
     2d2:	9f 70       	andi	r25, 0x0F	; 15
     2d4:	98 b9       	out	0x08, r25	; 8
     2d6:	98 b1       	in	r25, 0x08	; 8
     2d8:	82 95       	swap	r24
     2da:	80 7f       	andi	r24, 0xF0	; 240
     2dc:	89 2b       	or	r24, r25
     2de:	88 b9       	out	0x08, r24	; 8
     2e0:	40 9a       	sbi	0x08, 0	; 8
     2e2:	41 98       	cbi	0x08, 1	; 8
     2e4:	42 9a       	sbi	0x08, 2	; 8
     2e6:	8f ef       	ldi	r24, 0xFF	; 255
     2e8:	97 e4       	ldi	r25, 0x47	; 71
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <lcd_wr_char+0x3e>
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <lcd_wr_char+0x44>
     2f0:	00 00       	nop
     2f2:	42 98       	cbi	0x08, 2	; 8
     2f4:	08 95       	ret

000002f6 <lcd_home>:
     2f6:	80 e8       	ldi	r24, 0x80	; 128
     2f8:	a4 cf       	rjmp	.-184    	; 0x242 <lcd_wr_command>
     2fa:	08 95       	ret

000002fc <lcd_cursor>:
     2fc:	82 30       	cpi	r24, 0x02	; 2
     2fe:	69 f0       	breq	.+26     	; 0x31a <lcd_cursor+0x1e>
     300:	18 f4       	brcc	.+6      	; 0x308 <lcd_cursor+0xc>
     302:	81 30       	cpi	r24, 0x01	; 1
     304:	31 f0       	breq	.+12     	; 0x312 <lcd_cursor+0x16>
     306:	08 95       	ret
     308:	83 30       	cpi	r24, 0x03	; 3
     30a:	59 f0       	breq	.+22     	; 0x322 <lcd_cursor+0x26>
     30c:	84 30       	cpi	r24, 0x04	; 4
     30e:	69 f0       	breq	.+26     	; 0x32a <lcd_cursor+0x2e>
     310:	08 95       	ret
     312:	8f e7       	ldi	r24, 0x7F	; 127
     314:	86 0f       	add	r24, r22
     316:	95 cf       	rjmp	.-214    	; 0x242 <lcd_wr_command>
     318:	08 95       	ret
     31a:	8f eb       	ldi	r24, 0xBF	; 191
     31c:	86 0f       	add	r24, r22
     31e:	91 cf       	rjmp	.-222    	; 0x242 <lcd_wr_command>
     320:	08 95       	ret
     322:	83 e9       	ldi	r24, 0x93	; 147
     324:	86 0f       	add	r24, r22
     326:	8d cf       	rjmp	.-230    	; 0x242 <lcd_wr_command>
     328:	08 95       	ret
     32a:	83 ed       	ldi	r24, 0xD3	; 211
     32c:	86 0f       	add	r24, r22
     32e:	89 cf       	rjmp	.-238    	; 0x242 <lcd_wr_command>
     330:	08 95       	ret

00000332 <lcd_print>:
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	8a 01       	movw	r16, r20
     33c:	e9 01       	movw	r28, r18
     33e:	88 23       	and	r24, r24
     340:	11 f0       	breq	.+4      	; 0x346 <lcd_print+0x14>
     342:	61 11       	cpse	r22, r1
     344:	02 c0       	rjmp	.+4      	; 0x34a <lcd_print+0x18>
     346:	d7 df       	rcall	.-82     	; 0x2f6 <lcd_home>
     348:	01 c0       	rjmp	.+2      	; 0x34c <lcd_print+0x1a>
     34a:	d8 df       	rcall	.-80     	; 0x2fc <lcd_cursor>
     34c:	c5 30       	cpi	r28, 0x05	; 5
     34e:	d1 05       	cpc	r29, r1
     350:	c1 f4       	brne	.+48     	; 0x382 <lcd_print+0x50>
     352:	98 01       	movw	r18, r16
     354:	32 95       	swap	r19
     356:	22 95       	swap	r18
     358:	2f 70       	andi	r18, 0x0F	; 15
     35a:	23 27       	eor	r18, r19
     35c:	3f 70       	andi	r19, 0x0F	; 15
     35e:	23 27       	eor	r18, r19
     360:	a7 e4       	ldi	r26, 0x47	; 71
     362:	b3 e0       	ldi	r27, 0x03	; 3
     364:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__umulhisi3>
     368:	96 95       	lsr	r25
     36a:	87 95       	ror	r24
     36c:	96 95       	lsr	r25
     36e:	87 95       	ror	r24
     370:	96 95       	lsr	r25
     372:	87 95       	ror	r24
     374:	c0 96       	adiw	r24, 0x30	; 48
     376:	90 93 e9 1d 	sts	0x1DE9, r25	; 0x801de9 <million+0x1>
     37a:	80 93 e8 1d 	sts	0x1DE8, r24	; 0x801de8 <million>
     37e:	96 df       	rcall	.-212    	; 0x2ac <lcd_wr_char>
     380:	04 c0       	rjmp	.+8      	; 0x38a <lcd_print+0x58>
     382:	c4 30       	cpi	r28, 0x04	; 4
     384:	d1 05       	cpc	r29, r1
     386:	09 f0       	breq	.+2      	; 0x38a <lcd_print+0x58>
     388:	be c0       	rjmp	.+380    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
     38a:	98 01       	movw	r18, r16
     38c:	36 95       	lsr	r19
     38e:	27 95       	ror	r18
     390:	36 95       	lsr	r19
     392:	27 95       	ror	r18
     394:	36 95       	lsr	r19
     396:	27 95       	ror	r18
     398:	a5 ec       	ldi	r26, 0xC5	; 197
     39a:	b0 e2       	ldi	r27, 0x20	; 32
     39c:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__umulhisi3>
     3a0:	ac 01       	movw	r20, r24
     3a2:	52 95       	swap	r21
     3a4:	42 95       	swap	r20
     3a6:	4f 70       	andi	r20, 0x0F	; 15
     3a8:	45 27       	eor	r20, r21
     3aa:	5f 70       	andi	r21, 0x0F	; 15
     3ac:	45 27       	eor	r20, r21
     3ae:	50 93 51 1e 	sts	0x1E51, r21	; 0x801e51 <temp+0x1>
     3b2:	40 93 50 1e 	sts	0x1E50, r20	; 0x801e50 <temp>
     3b6:	9a 01       	movw	r18, r20
     3b8:	ad ec       	ldi	r26, 0xCD	; 205
     3ba:	bc ec       	ldi	r27, 0xCC	; 204
     3bc:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__umulhisi3>
     3c0:	96 95       	lsr	r25
     3c2:	87 95       	ror	r24
     3c4:	96 95       	lsr	r25
     3c6:	87 95       	ror	r24
     3c8:	96 95       	lsr	r25
     3ca:	87 95       	ror	r24
     3cc:	9c 01       	movw	r18, r24
     3ce:	22 0f       	add	r18, r18
     3d0:	33 1f       	adc	r19, r19
     3d2:	88 0f       	add	r24, r24
     3d4:	99 1f       	adc	r25, r25
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	88 0f       	add	r24, r24
     3dc:	99 1f       	adc	r25, r25
     3de:	82 0f       	add	r24, r18
     3e0:	93 1f       	adc	r25, r19
     3e2:	9a 01       	movw	r18, r20
     3e4:	28 1b       	sub	r18, r24
     3e6:	39 0b       	sbc	r19, r25
     3e8:	c9 01       	movw	r24, r18
     3ea:	c0 96       	adiw	r24, 0x30	; 48
     3ec:	90 93 2d 1f 	sts	0x1F2D, r25	; 0x801f2d <thousand+0x1>
     3f0:	80 93 2c 1f 	sts	0x1F2C, r24	; 0x801f2c <thousand>
     3f4:	5b df       	rcall	.-330    	; 0x2ac <lcd_wr_char>
     3f6:	98 01       	movw	r18, r16
     3f8:	36 95       	lsr	r19
     3fa:	27 95       	ror	r18
     3fc:	36 95       	lsr	r19
     3fe:	27 95       	ror	r18
     400:	ab e7       	ldi	r26, 0x7B	; 123
     402:	b4 e1       	ldi	r27, 0x14	; 20
     404:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__umulhisi3>
     408:	ac 01       	movw	r20, r24
     40a:	56 95       	lsr	r21
     40c:	47 95       	ror	r20
     40e:	50 93 51 1e 	sts	0x1E51, r21	; 0x801e51 <temp+0x1>
     412:	40 93 50 1e 	sts	0x1E50, r20	; 0x801e50 <temp>
     416:	9a 01       	movw	r18, r20
     418:	ad ec       	ldi	r26, 0xCD	; 205
     41a:	bc ec       	ldi	r27, 0xCC	; 204
     41c:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__umulhisi3>
     420:	96 95       	lsr	r25
     422:	87 95       	ror	r24
     424:	96 95       	lsr	r25
     426:	87 95       	ror	r24
     428:	96 95       	lsr	r25
     42a:	87 95       	ror	r24
     42c:	9c 01       	movw	r18, r24
     42e:	22 0f       	add	r18, r18
     430:	33 1f       	adc	r19, r19
     432:	88 0f       	add	r24, r24
     434:	99 1f       	adc	r25, r25
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	88 0f       	add	r24, r24
     43c:	99 1f       	adc	r25, r25
     43e:	82 0f       	add	r24, r18
     440:	93 1f       	adc	r25, r19
     442:	9a 01       	movw	r18, r20
     444:	28 1b       	sub	r18, r24
     446:	39 0b       	sbc	r19, r25
     448:	c9 01       	movw	r24, r18
     44a:	c0 96       	adiw	r24, 0x30	; 48
     44c:	90 93 27 1f 	sts	0x1F27, r25	; 0x801f27 <hundred+0x1>
     450:	80 93 26 1f 	sts	0x1F26, r24	; 0x801f26 <hundred>
     454:	2b df       	rcall	.-426    	; 0x2ac <lcd_wr_char>
     456:	04 c0       	rjmp	.+8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     458:	c2 30       	cpi	r28, 0x02	; 2
     45a:	d1 05       	cpc	r29, r1
     45c:	09 f0       	breq	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45e:	58 c0       	rjmp	.+176    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     460:	98 01       	movw	r18, r16
     462:	ad ec       	ldi	r26, 0xCD	; 205
     464:	bc ec       	ldi	r27, 0xCC	; 204
     466:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__umulhisi3>
     46a:	ac 01       	movw	r20, r24
     46c:	56 95       	lsr	r21
     46e:	47 95       	ror	r20
     470:	56 95       	lsr	r21
     472:	47 95       	ror	r20
     474:	56 95       	lsr	r21
     476:	47 95       	ror	r20
     478:	50 93 51 1e 	sts	0x1E51, r21	; 0x801e51 <temp+0x1>
     47c:	40 93 50 1e 	sts	0x1E50, r20	; 0x801e50 <temp>
     480:	9a 01       	movw	r18, r20
     482:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__umulhisi3>
     486:	96 95       	lsr	r25
     488:	87 95       	ror	r24
     48a:	96 95       	lsr	r25
     48c:	87 95       	ror	r24
     48e:	96 95       	lsr	r25
     490:	87 95       	ror	r24
     492:	9c 01       	movw	r18, r24
     494:	22 0f       	add	r18, r18
     496:	33 1f       	adc	r19, r19
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	88 0f       	add	r24, r24
     49e:	99 1f       	adc	r25, r25
     4a0:	88 0f       	add	r24, r24
     4a2:	99 1f       	adc	r25, r25
     4a4:	82 0f       	add	r24, r18
     4a6:	93 1f       	adc	r25, r19
     4a8:	9a 01       	movw	r18, r20
     4aa:	28 1b       	sub	r18, r24
     4ac:	39 0b       	sbc	r19, r25
     4ae:	c9 01       	movw	r24, r18
     4b0:	c0 96       	adiw	r24, 0x30	; 48
     4b2:	90 93 7f 1e 	sts	0x1E7F, r25	; 0x801e7f <tens+0x1>
     4b6:	80 93 7e 1e 	sts	0x1E7E, r24	; 0x801e7e <tens>
     4ba:	f8 de       	rcall	.-528    	; 0x2ac <lcd_wr_char>
     4bc:	98 01       	movw	r18, r16
     4be:	ad ec       	ldi	r26, 0xCD	; 205
     4c0:	bc ec       	ldi	r27, 0xCC	; 204
     4c2:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__umulhisi3>
     4c6:	96 95       	lsr	r25
     4c8:	87 95       	ror	r24
     4ca:	96 95       	lsr	r25
     4cc:	87 95       	ror	r24
     4ce:	96 95       	lsr	r25
     4d0:	87 95       	ror	r24
     4d2:	9c 01       	movw	r18, r24
     4d4:	22 0f       	add	r18, r18
     4d6:	33 1f       	adc	r19, r19
     4d8:	88 0f       	add	r24, r24
     4da:	99 1f       	adc	r25, r25
     4dc:	88 0f       	add	r24, r24
     4de:	99 1f       	adc	r25, r25
     4e0:	88 0f       	add	r24, r24
     4e2:	99 1f       	adc	r25, r25
     4e4:	82 0f       	add	r24, r18
     4e6:	93 1f       	adc	r25, r19
     4e8:	98 01       	movw	r18, r16
     4ea:	28 1b       	sub	r18, r24
     4ec:	39 0b       	sbc	r19, r25
     4ee:	c9 01       	movw	r24, r18
     4f0:	c0 96       	adiw	r24, 0x30	; 48
     4f2:	90 93 2b 1f 	sts	0x1F2B, r25	; 0x801f2b <unit+0x1>
     4f6:	80 93 2a 1f 	sts	0x1F2A, r24	; 0x801f2a <unit>
     4fa:	d8 de       	rcall	.-592    	; 0x2ac <lcd_wr_char>
     4fc:	26 97       	sbiw	r28, 0x06	; 6
     4fe:	64 f0       	brlt	.+24     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     500:	85 e4       	ldi	r24, 0x45	; 69
     502:	d4 de       	rcall	.-600    	; 0x2ac <lcd_wr_char>
     504:	09 c0       	rjmp	.+18     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     506:	c3 30       	cpi	r28, 0x03	; 3
     508:	d1 05       	cpc	r29, r1
     50a:	09 f0       	breq	.+2      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     50c:	a5 cf       	rjmp	.-182    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     50e:	73 cf       	rjmp	.-282    	; 0x3f6 <lcd_print+0xc4>
     510:	c1 30       	cpi	r28, 0x01	; 1
     512:	d1 05       	cpc	r29, r1
     514:	99 f7       	brne	.-26     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     516:	d2 cf       	rjmp	.-92     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	08 95       	ret

00000522 <find_path>:
     522:	ff 92       	push	r15
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	fb 01       	movw	r30, r22
     52e:	10 92 e7 1d 	sts	0x1DE7, r1	; 0x801de7 <shortest_distance+0x1>
     532:	10 92 e6 1d 	sts	0x1DE6, r1	; 0x801de6 <shortest_distance>
     536:	68 17       	cp	r22, r24
     538:	79 07       	cpc	r23, r25
     53a:	b1 f1       	breq	.+108    	; 0x5a8 <find_path+0x86>
     53c:	00 91 16 1d 	lds	r16, 0x1D16	; 0x801d16 <path_length>
     540:	10 91 17 1d 	lds	r17, 0x1D17	; 0x801d17 <path_length+0x1>
     544:	ce e7       	ldi	r28, 0x7E	; 126
     546:	dd e1       	ldi	r29, 0x1D	; 29
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	0f 2e       	mov	r0, r31
     552:	f0 e3       	ldi	r31, 0x30	; 48
     554:	ff 2e       	mov	r15, r31
     556:	f0 2d       	mov	r31, r0
     558:	2f 5f       	subi	r18, 0xFF	; 255
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
     55c:	e9 93       	st	Y+, r30
     55e:	f9 93       	st	Y+, r31
     560:	df 01       	movw	r26, r30
     562:	aa 0f       	add	r26, r26
     564:	bb 1f       	adc	r27, r27
     566:	a6 51       	subi	r26, 0x16	; 22
     568:	b2 4e       	sbci	r27, 0xE2	; 226
     56a:	0d 90       	ld	r0, X+
     56c:	bc 91       	ld	r27, X
     56e:	a0 2d       	mov	r26, r0
     570:	fa 9e       	mul	r15, r26
     572:	b0 01       	movw	r22, r0
     574:	fb 9e       	mul	r15, r27
     576:	70 0d       	add	r23, r0
     578:	11 24       	eor	r1, r1
     57a:	e6 0f       	add	r30, r22
     57c:	f7 1f       	adc	r31, r23
     57e:	ee 5f       	subi	r30, 0xFE	; 254
     580:	fb 4e       	sbci	r31, 0xEB	; 235
     582:	60 81       	ld	r22, Z
     584:	46 0f       	add	r20, r22
     586:	51 1d       	adc	r21, r1
     588:	b9 01       	movw	r22, r18
     58a:	60 0f       	add	r22, r16
     58c:	71 1f       	adc	r23, r17
     58e:	fd 01       	movw	r30, r26
     590:	8a 17       	cp	r24, r26
     592:	9b 07       	cpc	r25, r27
     594:	09 f7       	brne	.-62     	; 0x558 <find_path+0x36>
     596:	50 93 e7 1d 	sts	0x1DE7, r21	; 0x801de7 <shortest_distance+0x1>
     59a:	40 93 e6 1d 	sts	0x1DE6, r20	; 0x801de6 <shortest_distance>
     59e:	70 93 17 1d 	sts	0x1D17, r23	; 0x801d17 <path_length+0x1>
     5a2:	60 93 16 1d 	sts	0x1D16, r22	; 0x801d16 <path_length>
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <find_path+0x8a>
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	22 0f       	add	r18, r18
     5ae:	33 1f       	adc	r19, r19
     5b0:	f9 01       	movw	r30, r18
     5b2:	e2 58       	subi	r30, 0x82	; 130
     5b4:	f2 4e       	sbci	r31, 0xE2	; 226
     5b6:	91 83       	std	Z+1, r25	; 0x01
     5b8:	80 83       	st	Z, r24
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	ff 90       	pop	r15
     5c4:	08 95       	ret

000005c6 <min_tmp>:
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	60 91 02 1d 	lds	r22, 0x1D02	; 0x801d02 <total_nodes>
     5ce:	70 91 03 1d 	lds	r23, 0x1D03	; 0x801d03 <total_nodes+0x1>
     5d2:	16 16       	cp	r1, r22
     5d4:	17 06       	cpc	r1, r23
     5d6:	ec f4       	brge	.+58     	; 0x612 <min_tmp+0x4c>
     5d8:	a8 e1       	ldi	r26, 0x18	; 24
     5da:	bd e1       	ldi	r27, 0x1D	; 29
     5dc:	e0 e8       	ldi	r30, 0x80	; 128
     5de:	fe e1       	ldi	r31, 0x1E	; 30
     5e0:	8f ef       	ldi	r24, 0xFF	; 255
     5e2:	9f ef       	ldi	r25, 0xFF	; 255
     5e4:	cf e0       	ldi	r28, 0x0F	; 15
     5e6:	d7 e2       	ldi	r29, 0x27	; 39
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	4d 91       	ld	r20, X+
     5ee:	5d 91       	ld	r21, X+
     5f0:	45 2b       	or	r20, r21
     5f2:	41 f4       	brne	.+16     	; 0x604 <min_tmp+0x3e>
     5f4:	40 81       	ld	r20, Z
     5f6:	51 81       	ldd	r21, Z+1	; 0x01
     5f8:	4c 17       	cp	r20, r28
     5fa:	5d 07       	cpc	r21, r29
     5fc:	1c f4       	brge	.+6      	; 0x604 <min_tmp+0x3e>
     5fe:	82 2f       	mov	r24, r18
     600:	93 2f       	mov	r25, r19
     602:	ea 01       	movw	r28, r20
     604:	2f 5f       	subi	r18, 0xFF	; 255
     606:	3f 4f       	sbci	r19, 0xFF	; 255
     608:	32 96       	adiw	r30, 0x02	; 2
     60a:	26 17       	cp	r18, r22
     60c:	37 07       	cpc	r19, r23
     60e:	71 f7       	brne	.-36     	; 0x5ec <min_tmp+0x26>
     610:	02 c0       	rjmp	.+4      	; 0x616 <min_tmp+0x50>
     612:	8f ef       	ldi	r24, 0xFF	; 255
     614:	9f ef       	ldi	r25, 0xFF	; 255
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <dijkstra>:
     61c:	4f 92       	push	r4
     61e:	5f 92       	push	r5
     620:	7f 92       	push	r7
     622:	8f 92       	push	r8
     624:	9f 92       	push	r9
     626:	af 92       	push	r10
     628:	bf 92       	push	r11
     62a:	cf 92       	push	r12
     62c:	df 92       	push	r13
     62e:	ef 92       	push	r14
     630:	ff 92       	push	r15
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	e0 90 02 1d 	lds	r14, 0x1D02	; 0x801d02 <total_nodes>
     63e:	f0 90 03 1d 	lds	r15, 0x1D03	; 0x801d03 <total_nodes+0x1>
     642:	1e 14       	cp	r1, r14
     644:	1f 04       	cpc	r1, r15
     646:	bc f4       	brge	.+46     	; 0x676 <dijkstra+0x5a>
     648:	ca ee       	ldi	r28, 0xEA	; 234
     64a:	dd e1       	ldi	r29, 0x1D	; 29
     64c:	a0 e8       	ldi	r26, 0x80	; 128
     64e:	be e1       	ldi	r27, 0x1E	; 30
     650:	e8 e1       	ldi	r30, 0x18	; 24
     652:	fd e1       	ldi	r31, 0x1D	; 29
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	6f ef       	ldi	r22, 0xFF	; 255
     65a:	7f ef       	ldi	r23, 0xFF	; 255
     65c:	4f e0       	ldi	r20, 0x0F	; 15
     65e:	57 e2       	ldi	r21, 0x27	; 39
     660:	69 93       	st	Y+, r22
     662:	79 93       	st	Y+, r23
     664:	4d 93       	st	X+, r20
     666:	5d 93       	st	X+, r21
     668:	11 92       	st	Z+, r1
     66a:	11 92       	st	Z+, r1
     66c:	2f 5f       	subi	r18, 0xFF	; 255
     66e:	3f 4f       	sbci	r19, 0xFF	; 255
     670:	2e 15       	cp	r18, r14
     672:	3f 05       	cpc	r19, r15
     674:	ac f3       	brlt	.-22     	; 0x660 <dijkstra+0x44>
     676:	fc 01       	movw	r30, r24
     678:	ee 0f       	add	r30, r30
     67a:	ff 1f       	adc	r31, r31
     67c:	e0 58       	subi	r30, 0x80	; 128
     67e:	f1 4e       	sbci	r31, 0xE1	; 225
     680:	11 82       	std	Z+1, r1	; 0x01
     682:	10 82       	st	Z, r1
     684:	e7 01       	movw	r28, r14
     686:	cc 0f       	add	r28, r28
     688:	dd 1f       	adc	r29, r29
     68a:	be 01       	movw	r22, r28
     68c:	60 58       	subi	r22, 0x80	; 128
     68e:	71 4e       	sbci	r23, 0xE1	; 225
     690:	2b 01       	movw	r4, r22
     692:	01 e0       	ldi	r16, 0x01	; 1
     694:	10 e0       	ldi	r17, 0x00	; 0
     696:	0f 2e       	mov	r0, r31
     698:	f0 e3       	ldi	r31, 0x30	; 48
     69a:	bf 2e       	mov	r11, r31
     69c:	f0 2d       	mov	r31, r0
     69e:	0f 2e       	mov	r0, r31
     6a0:	f0 e8       	ldi	r31, 0x80	; 128
     6a2:	8f 2e       	mov	r8, r31
     6a4:	fe e1       	ldi	r31, 0x1E	; 30
     6a6:	9f 2e       	mov	r9, r31
     6a8:	f0 2d       	mov	r31, r0
     6aa:	a1 2c       	mov	r10, r1
     6ac:	71 2c       	mov	r7, r1
     6ae:	8b df       	rcall	.-234    	; 0x5c6 <min_tmp>
     6b0:	8f 3f       	cpi	r24, 0xFF	; 255
     6b2:	7f ef       	ldi	r23, 0xFF	; 255
     6b4:	97 07       	cpc	r25, r23
     6b6:	09 f4       	brne	.+2      	; 0x6ba <dijkstra+0x9e>
     6b8:	3f c0       	rjmp	.+126    	; 0x738 <dijkstra+0x11c>
     6ba:	fc 01       	movw	r30, r24
     6bc:	ee 0f       	add	r30, r30
     6be:	ff 1f       	adc	r31, r31
     6c0:	e8 5e       	subi	r30, 0xE8	; 232
     6c2:	f2 4e       	sbci	r31, 0xE2	; 226
     6c4:	11 83       	std	Z+1, r17	; 0x01
     6c6:	00 83       	st	Z, r16
     6c8:	1e 14       	cp	r1, r14
     6ca:	1f 04       	cpc	r1, r15
     6cc:	84 f7       	brge	.-32     	; 0x6ae <dijkstra+0x92>
     6ce:	b8 9e       	mul	r11, r24
     6d0:	d0 01       	movw	r26, r0
     6d2:	b9 9e       	mul	r11, r25
     6d4:	b0 0d       	add	r27, r0
     6d6:	11 24       	eor	r1, r1
     6d8:	ae 5f       	subi	r26, 0xFE	; 254
     6da:	bb 4e       	sbci	r27, 0xEB	; 235
     6dc:	f4 01       	movw	r30, r8
     6de:	2a 2d       	mov	r18, r10
     6e0:	37 2d       	mov	r19, r7
     6e2:	ac 01       	movw	r20, r24
     6e4:	44 0f       	add	r20, r20
     6e6:	55 1f       	adc	r21, r21
     6e8:	ea 01       	movw	r28, r20
     6ea:	c0 58       	subi	r28, 0x80	; 128
     6ec:	d1 4e       	sbci	r29, 0xE1	; 225
     6ee:	6e 01       	movw	r12, r28
     6f0:	6d 91       	ld	r22, X+
     6f2:	60 33       	cpi	r22, 0x30	; 48
     6f4:	d1 f0       	breq	.+52     	; 0x72a <dijkstra+0x10e>
     6f6:	a9 01       	movw	r20, r18
     6f8:	48 5e       	subi	r20, 0xE8	; 232
     6fa:	52 4e       	sbci	r21, 0xE2	; 226
     6fc:	ea 01       	movw	r28, r20
     6fe:	48 81       	ld	r20, Y
     700:	59 81       	ldd	r21, Y+1	; 0x01
     702:	45 2b       	or	r20, r21
     704:	91 f4       	brne	.+36     	; 0x72a <dijkstra+0x10e>
     706:	e6 01       	movw	r28, r12
     708:	48 81       	ld	r20, Y
     70a:	59 81       	ldd	r21, Y+1	; 0x01
     70c:	46 0f       	add	r20, r22
     70e:	51 1d       	adc	r21, r1
     710:	60 81       	ld	r22, Z
     712:	71 81       	ldd	r23, Z+1	; 0x01
     714:	46 17       	cp	r20, r22
     716:	57 07       	cpc	r21, r23
     718:	44 f4       	brge	.+16     	; 0x72a <dijkstra+0x10e>
     71a:	b9 01       	movw	r22, r18
     71c:	66 51       	subi	r22, 0x16	; 22
     71e:	72 4e       	sbci	r23, 0xE2	; 226
     720:	eb 01       	movw	r28, r22
     722:	99 83       	std	Y+1, r25	; 0x01
     724:	88 83       	st	Y, r24
     726:	51 83       	std	Z+1, r21	; 0x01
     728:	40 83       	st	Z, r20
     72a:	2e 5f       	subi	r18, 0xFE	; 254
     72c:	3f 4f       	sbci	r19, 0xFF	; 255
     72e:	32 96       	adiw	r30, 0x02	; 2
     730:	e4 15       	cp	r30, r4
     732:	f5 05       	cpc	r31, r5
     734:	e9 f6       	brne	.-70     	; 0x6f0 <dijkstra+0xd4>
     736:	bb cf       	rjmp	.-138    	; 0x6ae <dijkstra+0x92>
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	df 90       	pop	r13
     746:	cf 90       	pop	r12
     748:	bf 90       	pop	r11
     74a:	af 90       	pop	r10
     74c:	9f 90       	pop	r9
     74e:	8f 90       	pop	r8
     750:	7f 90       	pop	r7
     752:	5f 90       	pop	r5
     754:	4f 90       	pop	r4
     756:	08 95       	ret

00000758 <uart0_init>:
     758:	e1 ec       	ldi	r30, 0xC1	; 193
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	10 82       	st	Z, r1
     75e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     762:	86 e0       	ldi	r24, 0x06	; 6
     764:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     768:	8f e5       	ldi	r24, 0x5F	; 95
     76a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     76e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     772:	88 e9       	ldi	r24, 0x98	; 152
     774:	80 83       	st	Z, r24
     776:	08 95       	ret

00000778 <lcd_port_config>:
     778:	87 b1       	in	r24, 0x07	; 7
     77a:	87 6f       	ori	r24, 0xF7	; 247
     77c:	87 b9       	out	0x07, r24	; 7
     77e:	88 b1       	in	r24, 0x08	; 8
     780:	80 78       	andi	r24, 0x80	; 128
     782:	88 b9       	out	0x08, r24	; 8
     784:	08 95       	ret

00000786 <adc_pin_config>:
     786:	10 ba       	out	0x10, r1	; 16
     788:	11 ba       	out	0x11, r1	; 17
     78a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     78e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     792:	08 95       	ret

00000794 <adc_init>:
     794:	ea e7       	ldi	r30, 0x7A	; 122
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	10 82       	st	Z, r1
     79a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     79e:	80 e2       	ldi	r24, 0x20	; 32
     7a0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     7a4:	80 e8       	ldi	r24, 0x80	; 128
     7a6:	80 bf       	out	0x30, r24	; 48
     7a8:	86 e8       	ldi	r24, 0x86	; 134
     7aa:	80 83       	st	Z, r24
     7ac:	08 95       	ret

000007ae <ADC_Conversion>:
     7ae:	88 30       	cpi	r24, 0x08	; 8
     7b0:	18 f0       	brcs	.+6      	; 0x7b8 <ADC_Conversion+0xa>
     7b2:	98 e0       	ldi	r25, 0x08	; 8
     7b4:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     7b8:	87 70       	andi	r24, 0x07	; 7
     7ba:	80 62       	ori	r24, 0x20	; 32
     7bc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     7c0:	ea e7       	ldi	r30, 0x7A	; 122
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
     7c6:	80 64       	ori	r24, 0x40	; 64
     7c8:	80 83       	st	Z, r24
     7ca:	80 81       	ld	r24, Z
     7cc:	84 ff       	sbrs	r24, 4
     7ce:	fd cf       	rjmp	.-6      	; 0x7ca <ADC_Conversion+0x1c>
     7d0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     7d4:	ea e7       	ldi	r30, 0x7A	; 122
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	90 81       	ld	r25, Z
     7da:	90 61       	ori	r25, 0x10	; 16
     7dc:	90 83       	st	Z, r25
     7de:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     7e2:	08 95       	ret

000007e4 <motion_pin_config>:
     7e4:	81 b1       	in	r24, 0x01	; 1
     7e6:	8f 60       	ori	r24, 0x0F	; 15
     7e8:	81 b9       	out	0x01, r24	; 1
     7ea:	82 b1       	in	r24, 0x02	; 2
     7ec:	80 7f       	andi	r24, 0xF0	; 240
     7ee:	82 b9       	out	0x02, r24	; 2
     7f0:	ea e0       	ldi	r30, 0x0A	; 10
     7f2:	f1 e0       	ldi	r31, 0x01	; 1
     7f4:	80 81       	ld	r24, Z
     7f6:	88 61       	ori	r24, 0x18	; 24
     7f8:	80 83       	st	Z, r24
     7fa:	eb e0       	ldi	r30, 0x0B	; 11
     7fc:	f1 e0       	ldi	r31, 0x01	; 1
     7fe:	80 81       	ld	r24, Z
     800:	88 61       	ori	r24, 0x18	; 24
     802:	80 83       	st	Z, r24
     804:	08 95       	ret

00000806 <timer5_init>:
     806:	e1 e2       	ldi	r30, 0x21	; 33
     808:	f1 e0       	ldi	r31, 0x01	; 1
     80a:	10 82       	st	Z, r1
     80c:	8f ef       	ldi	r24, 0xFF	; 255
     80e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
     818:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     81c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     820:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     824:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
     828:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     82c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
     830:	89 ea       	ldi	r24, 0xA9	; 169
     832:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     836:	8b e0       	ldi	r24, 0x0B	; 11
     838:	80 83       	st	Z, r24
     83a:	08 95       	ret

0000083c <motion_set>:
     83c:	92 b1       	in	r25, 0x02	; 2
     83e:	90 7f       	andi	r25, 0xF0	; 240
     840:	8f 70       	andi	r24, 0x0F	; 15
     842:	98 2b       	or	r25, r24
     844:	92 b9       	out	0x02, r25	; 2
     846:	08 95       	ret

00000848 <forward>:
     848:	86 e0       	ldi	r24, 0x06	; 6
     84a:	f8 cf       	rjmp	.-16     	; 0x83c <motion_set>
     84c:	08 95       	ret

0000084e <stop>:
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	f5 cf       	rjmp	.-22     	; 0x83c <motion_set>
     852:	08 95       	ret

00000854 <back>:
     854:	89 e0       	ldi	r24, 0x09	; 9
     856:	f2 cf       	rjmp	.-28     	; 0x83c <motion_set>
     858:	08 95       	ret

0000085a <left>:
     85a:	85 e0       	ldi	r24, 0x05	; 5
     85c:	ef cf       	rjmp	.-34     	; 0x83c <motion_set>
     85e:	08 95       	ret

00000860 <right>:
     860:	8a e0       	ldi	r24, 0x0A	; 10
     862:	ec cf       	rjmp	.-40     	; 0x83c <motion_set>
     864:	08 95       	ret

00000866 <left_encoder_pin_config>:
     866:	6c 98       	cbi	0x0d, 4	; 13
     868:	74 9a       	sbi	0x0e, 4	; 14
     86a:	08 95       	ret

0000086c <right_encoder_pin_config>:
     86c:	6d 98       	cbi	0x0d, 5	; 13
     86e:	75 9a       	sbi	0x0e, 5	; 14
     870:	08 95       	ret

00000872 <left_position_encoder_interrupt_init>:
     872:	f8 94       	cli
     874:	ea e6       	ldi	r30, 0x6A	; 106
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	80 81       	ld	r24, Z
     87a:	82 60       	ori	r24, 0x02	; 2
     87c:	80 83       	st	Z, r24
     87e:	ec 9a       	sbi	0x1d, 4	; 29
     880:	78 94       	sei
     882:	08 95       	ret

00000884 <right_position_encoder_interrupt_init>:
     884:	f8 94       	cli
     886:	ea e6       	ldi	r30, 0x6A	; 106
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	80 81       	ld	r24, Z
     88c:	88 60       	ori	r24, 0x08	; 8
     88e:	80 83       	st	Z, r24
     890:	ed 9a       	sbi	0x1d, 5	; 29
     892:	08 95       	ret

00000894 <__vector_6>:
     894:	1f 92       	push	r1
     896:	0f 92       	push	r0
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	0f 92       	push	r0
     89c:	11 24       	eor	r1, r1
     89e:	8f 93       	push	r24
     8a0:	9f 93       	push	r25
     8a2:	af 93       	push	r26
     8a4:	bf 93       	push	r27
     8a6:	80 91 08 1d 	lds	r24, 0x1D08	; 0x801d08 <ShaftCountRight>
     8aa:	90 91 09 1d 	lds	r25, 0x1D09	; 0x801d09 <ShaftCountRight+0x1>
     8ae:	a0 91 0a 1d 	lds	r26, 0x1D0A	; 0x801d0a <ShaftCountRight+0x2>
     8b2:	b0 91 0b 1d 	lds	r27, 0x1D0B	; 0x801d0b <ShaftCountRight+0x3>
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	a1 1d       	adc	r26, r1
     8ba:	b1 1d       	adc	r27, r1
     8bc:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <ShaftCountRight>
     8c0:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <ShaftCountRight+0x1>
     8c4:	a0 93 0a 1d 	sts	0x1D0A, r26	; 0x801d0a <ShaftCountRight+0x2>
     8c8:	b0 93 0b 1d 	sts	0x1D0B, r27	; 0x801d0b <ShaftCountRight+0x3>
     8cc:	bf 91       	pop	r27
     8ce:	af 91       	pop	r26
     8d0:	9f 91       	pop	r25
     8d2:	8f 91       	pop	r24
     8d4:	0f 90       	pop	r0
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	0f 90       	pop	r0
     8da:	1f 90       	pop	r1
     8dc:	18 95       	reti

000008de <__vector_5>:
     8de:	1f 92       	push	r1
     8e0:	0f 92       	push	r0
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	0f 92       	push	r0
     8e6:	11 24       	eor	r1, r1
     8e8:	8f 93       	push	r24
     8ea:	9f 93       	push	r25
     8ec:	af 93       	push	r26
     8ee:	bf 93       	push	r27
     8f0:	80 91 04 1d 	lds	r24, 0x1D04	; 0x801d04 <__data_end>
     8f4:	90 91 05 1d 	lds	r25, 0x1D05	; 0x801d05 <__data_end+0x1>
     8f8:	a0 91 06 1d 	lds	r26, 0x1D06	; 0x801d06 <__data_end+0x2>
     8fc:	b0 91 07 1d 	lds	r27, 0x1D07	; 0x801d07 <__data_end+0x3>
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	a1 1d       	adc	r26, r1
     904:	b1 1d       	adc	r27, r1
     906:	80 93 04 1d 	sts	0x1D04, r24	; 0x801d04 <__data_end>
     90a:	90 93 05 1d 	sts	0x1D05, r25	; 0x801d05 <__data_end+0x1>
     90e:	a0 93 06 1d 	sts	0x1D06, r26	; 0x801d06 <__data_end+0x2>
     912:	b0 93 07 1d 	sts	0x1D07, r27	; 0x801d07 <__data_end+0x3>
     916:	bf 91       	pop	r27
     918:	af 91       	pop	r26
     91a:	9f 91       	pop	r25
     91c:	8f 91       	pop	r24
     91e:	0f 90       	pop	r0
     920:	0f be       	out	0x3f, r0	; 63
     922:	0f 90       	pop	r0
     924:	1f 90       	pop	r1
     926:	18 95       	reti

00000928 <angle_rotate>:
     928:	cf 92       	push	r12
     92a:	df 92       	push	r13
     92c:	ef 92       	push	r14
     92e:	ff 92       	push	r15
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	bc 01       	movw	r22, r24
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__floatunsisf>
     93e:	28 e4       	ldi	r18, 0x48	; 72
     940:	31 ee       	ldi	r19, 0xE1	; 225
     942:	42 e8       	ldi	r20, 0x82	; 130
     944:	50 e4       	ldi	r21, 0x40	; 64
     946:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__divsf3>
     94a:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__fixunssfsi>
     94e:	ab 01       	movw	r20, r22
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <ShaftCountRight>
     958:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <ShaftCountRight+0x1>
     95c:	10 92 0a 1d 	sts	0x1D0A, r1	; 0x801d0a <ShaftCountRight+0x2>
     960:	10 92 0b 1d 	sts	0x1D0B, r1	; 0x801d0b <ShaftCountRight+0x3>
     964:	10 92 04 1d 	sts	0x1D04, r1	; 0x801d04 <__data_end>
     968:	10 92 05 1d 	sts	0x1D05, r1	; 0x801d05 <__data_end+0x1>
     96c:	10 92 06 1d 	sts	0x1D06, r1	; 0x801d06 <__data_end+0x2>
     970:	10 92 07 1d 	sts	0x1D07, r1	; 0x801d07 <__data_end+0x3>
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	e0 e0       	ldi	r30, 0x00	; 0
     978:	c0 90 08 1d 	lds	r12, 0x1D08	; 0x801d08 <ShaftCountRight>
     97c:	d0 90 09 1d 	lds	r13, 0x1D09	; 0x801d09 <ShaftCountRight+0x1>
     980:	e0 90 0a 1d 	lds	r14, 0x1D0A	; 0x801d0a <ShaftCountRight+0x2>
     984:	f0 90 0b 1d 	lds	r15, 0x1D0B	; 0x801d0b <ShaftCountRight+0x3>
     988:	00 91 04 1d 	lds	r16, 0x1D04	; 0x801d04 <__data_end>
     98c:	10 91 05 1d 	lds	r17, 0x1D05	; 0x801d05 <__data_end+0x1>
     990:	20 91 06 1d 	lds	r18, 0x1D06	; 0x801d06 <__data_end+0x2>
     994:	30 91 07 1d 	lds	r19, 0x1D07	; 0x801d07 <__data_end+0x3>
     998:	89 2f       	mov	r24, r25
     99a:	04 17       	cp	r16, r20
     99c:	15 07       	cpc	r17, r21
     99e:	26 07       	cpc	r18, r22
     9a0:	37 07       	cpc	r19, r23
     9a2:	08 f4       	brcc	.+2      	; 0x9a6 <angle_rotate+0x7e>
     9a4:	8e 2f       	mov	r24, r30
     9a6:	81 11       	cpse	r24, r1
     9a8:	09 c0       	rjmp	.+18     	; 0x9bc <angle_rotate+0x94>
     9aa:	89 2f       	mov	r24, r25
     9ac:	c4 16       	cp	r12, r20
     9ae:	d5 06       	cpc	r13, r21
     9b0:	e6 06       	cpc	r14, r22
     9b2:	f7 06       	cpc	r15, r23
     9b4:	08 f4       	brcc	.+2      	; 0x9b8 <angle_rotate+0x90>
     9b6:	8e 2f       	mov	r24, r30
     9b8:	88 23       	and	r24, r24
     9ba:	f1 f2       	breq	.-68     	; 0x978 <angle_rotate+0x50>
     9bc:	48 df       	rcall	.-368    	; 0x84e <stop>
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	ef 90       	pop	r14
     9c6:	df 90       	pop	r13
     9c8:	cf 90       	pop	r12
     9ca:	08 95       	ret

000009cc <buzzer_pin_config>:
     9cc:	3b 9a       	sbi	0x07, 3	; 7
     9ce:	43 98       	cbi	0x08, 3	; 8
     9d0:	08 95       	ret

000009d2 <buzzer_on>:
     9d2:	86 b1       	in	r24, 0x06	; 6
     9d4:	88 60       	ori	r24, 0x08	; 8
     9d6:	88 b9       	out	0x08, r24	; 8
     9d8:	08 95       	ret

000009da <buzzer_off>:
     9da:	86 b1       	in	r24, 0x06	; 6
     9dc:	87 7f       	andi	r24, 0xF7	; 247
     9de:	88 b9       	out	0x08, r24	; 8
     9e0:	08 95       	ret

000009e2 <linear_distance_mm>:
     9e2:	bc 01       	movw	r22, r24
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__floatunsisf>
     9ec:	25 ee       	ldi	r18, 0xE5	; 229
     9ee:	30 ed       	ldi	r19, 0xD0	; 208
     9f0:	4a ea       	ldi	r20, 0xAA	; 170
     9f2:	50 e4       	ldi	r21, 0x40	; 64
     9f4:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__divsf3>
     9f8:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__fixunssfsi>
     9fc:	ab 01       	movw	r20, r22
     9fe:	bc 01       	movw	r22, r24
     a00:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <ShaftCountRight>
     a04:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <ShaftCountRight+0x1>
     a08:	10 92 0a 1d 	sts	0x1D0A, r1	; 0x801d0a <ShaftCountRight+0x2>
     a0c:	10 92 0b 1d 	sts	0x1D0B, r1	; 0x801d0b <ShaftCountRight+0x3>
     a10:	80 91 08 1d 	lds	r24, 0x1D08	; 0x801d08 <ShaftCountRight>
     a14:	90 91 09 1d 	lds	r25, 0x1D09	; 0x801d09 <ShaftCountRight+0x1>
     a18:	a0 91 0a 1d 	lds	r26, 0x1D0A	; 0x801d0a <ShaftCountRight+0x2>
     a1c:	b0 91 0b 1d 	lds	r27, 0x1D0B	; 0x801d0b <ShaftCountRight+0x3>
     a20:	48 17       	cp	r20, r24
     a22:	59 07       	cpc	r21, r25
     a24:	6a 07       	cpc	r22, r26
     a26:	7b 07       	cpc	r23, r27
     a28:	98 f7       	brcc	.-26     	; 0xa10 <linear_distance_mm+0x2e>
     a2a:	11 cf       	rjmp	.-478    	; 0x84e <stop>
     a2c:	08 95       	ret

00000a2e <forward_mm>:
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	ec 01       	movw	r28, r24
     a34:	09 df       	rcall	.-494    	; 0x848 <forward>
     a36:	ce 01       	movw	r24, r28
     a38:	d4 df       	rcall	.-88     	; 0x9e2 <linear_distance_mm>
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	08 95       	ret

00000a40 <follow>:
     a40:	2f 92       	push	r2
     a42:	3f 92       	push	r3
     a44:	4f 92       	push	r4
     a46:	5f 92       	push	r5
     a48:	6f 92       	push	r6
     a4a:	7f 92       	push	r7
     a4c:	8f 92       	push	r8
     a4e:	9f 92       	push	r9
     a50:	af 92       	push	r10
     a52:	bf 92       	push	r11
     a54:	cf 92       	push	r12
     a56:	df 92       	push	r13
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	2f ef       	ldi	r18, 0xFF	; 255
     a66:	8f e7       	ldi	r24, 0x7F	; 127
     a68:	96 e1       	ldi	r25, 0x16	; 22
     a6a:	21 50       	subi	r18, 0x01	; 1
     a6c:	80 40       	sbci	r24, 0x00	; 0
     a6e:	90 40       	sbci	r25, 0x00	; 0
     a70:	e1 f7       	brne	.-8      	; 0xa6a <follow+0x2a>
     a72:	00 c0       	rjmp	.+0      	; 0xa74 <follow+0x34>
     a74:	00 00       	nop
     a76:	8e e1       	ldi	r24, 0x1E	; 30
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	d9 df       	rcall	.-78     	; 0xa2e <forward_mm>
     a7c:	e5 de       	rcall	.-566    	; 0x848 <forward>
     a7e:	00 e0       	ldi	r16, 0x00	; 0
     a80:	10 e0       	ldi	r17, 0x00	; 0
     a82:	c0 e0       	ldi	r28, 0x00	; 0
     a84:	d0 e0       	ldi	r29, 0x00	; 0
     a86:	0f 2e       	mov	r0, r31
     a88:	fa ef       	ldi	r31, 0xFA	; 250
     a8a:	3f 2e       	mov	r3, r31
     a8c:	f0 2d       	mov	r31, r0
     a8e:	0f 2e       	mov	r0, r31
     a90:	f8 e2       	ldi	r31, 0x28	; 40
     a92:	cf 2e       	mov	r12, r31
     a94:	dd 24       	eor	r13, r13
     a96:	d3 94       	inc	r13
     a98:	f0 2d       	mov	r31, r0
     a9a:	0f 2e       	mov	r0, r31
     a9c:	fa e2       	ldi	r31, 0x2A	; 42
     a9e:	8f 2e       	mov	r8, r31
     aa0:	99 24       	eor	r9, r9
     aa2:	93 94       	inc	r9
     aa4:	f0 2d       	mov	r31, r0
     aa6:	ee 24       	eor	r14, r14
     aa8:	ea 94       	dec	r14
     aaa:	f1 2c       	mov	r15, r1
     aac:	22 24       	eor	r2, r2
     aae:	23 94       	inc	r2
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	7d de       	rcall	.-774    	; 0x7ae <ADC_Conversion>
     ab4:	a8 2e       	mov	r10, r24
     ab6:	83 e0       	ldi	r24, 0x03	; 3
     ab8:	7a de       	rcall	.-780    	; 0x7ae <ADC_Conversion>
     aba:	b8 2e       	mov	r11, r24
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	77 de       	rcall	.-786    	; 0x7ae <ADC_Conversion>
     ac0:	2a 2d       	mov	r18, r10
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	eb 2d       	mov	r30, r11
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	d9 01       	movw	r26, r18
     aca:	ae 0f       	add	r26, r30
     acc:	bf 1f       	adc	r27, r31
     ace:	48 2f       	mov	r20, r24
     ad0:	50 e0       	ldi	r21, 0x00	; 0
     ad2:	bd 01       	movw	r22, r26
     ad4:	64 0f       	add	r22, r20
     ad6:	75 1f       	adc	r23, r21
     ad8:	6c 38       	cpi	r22, 0x8C	; 140
     ada:	71 05       	cpc	r23, r1
     adc:	80 f0       	brcs	.+32     	; 0xafe <follow+0xbe>
     ade:	b7 de       	rcall	.-658    	; 0x84e <stop>
     ae0:	ef ef       	ldi	r30, 0xFF	; 255
     ae2:	ff e8       	ldi	r31, 0x8F	; 143
     ae4:	31 97       	sbiw	r30, 0x01	; 1
     ae6:	f1 f7       	brne	.-4      	; 0xae4 <follow+0xa4>
     ae8:	00 c0       	rjmp	.+0      	; 0xaea <follow+0xaa>
     aea:	00 00       	nop
     aec:	ad de       	rcall	.-678    	; 0x848 <forward>
     aee:	8c ef       	ldi	r24, 0xFC	; 252
     af0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     af4:	8f ef       	ldi	r24, 0xFF	; 255
     af6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
     afa:	a9 de       	rcall	.-686    	; 0x84e <stop>
     afc:	d1 c0       	rjmp	.+418    	; 0xca0 <follow+0x260>
     afe:	b8 16       	cp	r11, r24
     b00:	08 f4       	brcc	.+2      	; 0xb04 <follow+0xc4>
     b02:	68 c0       	rjmp	.+208    	; 0xbd4 <follow+0x194>
     b04:	44 0f       	add	r20, r20
     b06:	55 1f       	adc	r21, r21
     b08:	24 0f       	add	r18, r20
     b0a:	35 1f       	adc	r19, r21
     b0c:	32 9e       	mul	r3, r18
     b0e:	c0 01       	movw	r24, r0
     b10:	33 9e       	mul	r3, r19
     b12:	90 0d       	add	r25, r0
     b14:	11 24       	eor	r1, r1
     b16:	0e 94 b8 11 	call	0x2370	; 0x2370 <__udivmodhi4>
     b1a:	5b 01       	movw	r10, r22
     b1c:	fa ef       	ldi	r31, 0xFA	; 250
     b1e:	af 1a       	sub	r10, r31
     b20:	b1 08       	sbc	r11, r1
     b22:	0a 0d       	add	r16, r10
     b24:	1b 1d       	adc	r17, r11
     b26:	b5 01       	movw	r22, r10
     b28:	0b 2c       	mov	r0, r11
     b2a:	00 0c       	add	r0, r0
     b2c:	88 0b       	sbc	r24, r24
     b2e:	99 0b       	sbc	r25, r25
     b30:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__floatsisf>
     b34:	26 e6       	ldi	r18, 0x66	; 102
     b36:	36 e6       	ldi	r19, 0x66	; 102
     b38:	46 ee       	ldi	r20, 0xE6	; 230
     b3a:	5f e3       	ldi	r21, 0x3F	; 63
     b3c:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__mulsf3>
     b40:	2b 01       	movw	r4, r22
     b42:	3c 01       	movw	r6, r24
     b44:	b8 01       	movw	r22, r16
     b46:	01 2e       	mov	r0, r17
     b48:	00 0c       	add	r0, r0
     b4a:	88 0b       	sbc	r24, r24
     b4c:	99 0b       	sbc	r25, r25
     b4e:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__floatsisf>
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	a9 01       	movw	r20, r18
     b58:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__mulsf3>
     b5c:	9b 01       	movw	r18, r22
     b5e:	ac 01       	movw	r20, r24
     b60:	c3 01       	movw	r24, r6
     b62:	b2 01       	movw	r22, r4
     b64:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__addsf3>
     b68:	2b 01       	movw	r4, r22
     b6a:	3c 01       	movw	r6, r24
     b6c:	b5 01       	movw	r22, r10
     b6e:	6c 1b       	sub	r22, r28
     b70:	7d 0b       	sbc	r23, r29
     b72:	07 2e       	mov	r0, r23
     b74:	00 0c       	add	r0, r0
     b76:	88 0b       	sbc	r24, r24
     b78:	99 0b       	sbc	r25, r25
     b7a:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__floatsisf>
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	48 e9       	ldi	r20, 0x98	; 152
     b84:	50 e4       	ldi	r21, 0x40	; 64
     b86:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__mulsf3>
     b8a:	9b 01       	movw	r18, r22
     b8c:	ac 01       	movw	r20, r24
     b8e:	c3 01       	movw	r24, r6
     b90:	b2 01       	movw	r22, r4
     b92:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__addsf3>
     b96:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__fixsfsi>
     b9a:	eb 01       	movw	r28, r22
     b9c:	61 30       	cpi	r22, 0x01	; 1
     b9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ba0:	1c f4       	brge	.+6      	; 0xba8 <follow+0x168>
     ba2:	c2 2d       	mov	r28, r2
     ba4:	9f ef       	ldi	r25, 0xFF	; 255
     ba6:	d9 2f       	mov	r29, r25
     ba8:	cf 3f       	cpi	r28, 0xFF	; 255
     baa:	d1 05       	cpc	r29, r1
     bac:	11 f0       	breq	.+4      	; 0xbb2 <follow+0x172>
     bae:	0c f0       	brlt	.+2      	; 0xbb2 <follow+0x172>
     bb0:	e7 01       	movw	r28, r14
     bb2:	dd 23       	and	r29, r29
     bb4:	24 f4       	brge	.+8      	; 0xbbe <follow+0x17e>
     bb6:	c1 50       	subi	r28, 0x01	; 1
     bb8:	df 4f       	sbci	r29, 0xFF	; 255
     bba:	37 01       	movw	r6, r14
     bbc:	04 c0       	rjmp	.+8      	; 0xbc6 <follow+0x186>
     bbe:	37 01       	movw	r6, r14
     bc0:	6c 1a       	sub	r6, r28
     bc2:	7d 0a       	sbc	r7, r29
     bc4:	e7 01       	movw	r28, r14
     bc6:	40 de       	rcall	.-896    	; 0x848 <forward>
     bc8:	f6 01       	movw	r30, r12
     bca:	c0 83       	st	Z, r28
     bcc:	f4 01       	movw	r30, r8
     bce:	60 82       	st	Z, r6
     bd0:	e5 01       	movw	r28, r10
     bd2:	6e cf       	rjmp	.-292    	; 0xab0 <follow+0x70>
     bd4:	ea 0f       	add	r30, r26
     bd6:	fb 1f       	adc	r31, r27
     bd8:	3e 9e       	mul	r3, r30
     bda:	c0 01       	movw	r24, r0
     bdc:	3f 9e       	mul	r3, r31
     bde:	90 0d       	add	r25, r0
     be0:	11 24       	eor	r1, r1
     be2:	0e 94 b8 11 	call	0x2370	; 0x2370 <__udivmodhi4>
     be6:	5b 01       	movw	r10, r22
     be8:	fa ef       	ldi	r31, 0xFA	; 250
     bea:	af 1a       	sub	r10, r31
     bec:	b1 08       	sbc	r11, r1
     bee:	0a 0d       	add	r16, r10
     bf0:	1b 1d       	adc	r17, r11
     bf2:	b5 01       	movw	r22, r10
     bf4:	0b 2c       	mov	r0, r11
     bf6:	00 0c       	add	r0, r0
     bf8:	88 0b       	sbc	r24, r24
     bfa:	99 0b       	sbc	r25, r25
     bfc:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__floatsisf>
     c00:	26 e6       	ldi	r18, 0x66	; 102
     c02:	36 e6       	ldi	r19, 0x66	; 102
     c04:	46 ee       	ldi	r20, 0xE6	; 230
     c06:	5f e3       	ldi	r21, 0x3F	; 63
     c08:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__mulsf3>
     c0c:	2b 01       	movw	r4, r22
     c0e:	3c 01       	movw	r6, r24
     c10:	b8 01       	movw	r22, r16
     c12:	01 2e       	mov	r0, r17
     c14:	00 0c       	add	r0, r0
     c16:	88 0b       	sbc	r24, r24
     c18:	99 0b       	sbc	r25, r25
     c1a:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__floatsisf>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	a9 01       	movw	r20, r18
     c24:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__mulsf3>
     c28:	9b 01       	movw	r18, r22
     c2a:	ac 01       	movw	r20, r24
     c2c:	c3 01       	movw	r24, r6
     c2e:	b2 01       	movw	r22, r4
     c30:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__addsf3>
     c34:	2b 01       	movw	r4, r22
     c36:	3c 01       	movw	r6, r24
     c38:	b5 01       	movw	r22, r10
     c3a:	6c 1b       	sub	r22, r28
     c3c:	7d 0b       	sbc	r23, r29
     c3e:	07 2e       	mov	r0, r23
     c40:	00 0c       	add	r0, r0
     c42:	88 0b       	sbc	r24, r24
     c44:	99 0b       	sbc	r25, r25
     c46:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__floatsisf>
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	48 e9       	ldi	r20, 0x98	; 152
     c50:	50 e4       	ldi	r21, 0x40	; 64
     c52:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__mulsf3>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	c3 01       	movw	r24, r6
     c5c:	b2 01       	movw	r22, r4
     c5e:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__addsf3>
     c62:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__fixsfsi>
     c66:	eb 01       	movw	r28, r22
     c68:	61 30       	cpi	r22, 0x01	; 1
     c6a:	7f 4f       	sbci	r23, 0xFF	; 255
     c6c:	1c f4       	brge	.+6      	; 0xc74 <follow+0x234>
     c6e:	c2 2d       	mov	r28, r2
     c70:	9f ef       	ldi	r25, 0xFF	; 255
     c72:	d9 2f       	mov	r29, r25
     c74:	cf 3f       	cpi	r28, 0xFF	; 255
     c76:	d1 05       	cpc	r29, r1
     c78:	11 f0       	breq	.+4      	; 0xc7e <follow+0x23e>
     c7a:	0c f0       	brlt	.+2      	; 0xc7e <follow+0x23e>
     c7c:	e7 01       	movw	r28, r14
     c7e:	dd 23       	and	r29, r29
     c80:	24 f4       	brge	.+8      	; 0xc8a <follow+0x24a>
     c82:	c1 50       	subi	r28, 0x01	; 1
     c84:	df 4f       	sbci	r29, 0xFF	; 255
     c86:	37 01       	movw	r6, r14
     c88:	04 c0       	rjmp	.+8      	; 0xc92 <follow+0x252>
     c8a:	37 01       	movw	r6, r14
     c8c:	6c 1a       	sub	r6, r28
     c8e:	7d 0a       	sbc	r7, r29
     c90:	e7 01       	movw	r28, r14
     c92:	da dd       	rcall	.-1100   	; 0x848 <forward>
     c94:	f6 01       	movw	r30, r12
     c96:	60 82       	st	Z, r6
     c98:	f4 01       	movw	r30, r8
     c9a:	c0 83       	st	Z, r28
     c9c:	e5 01       	movw	r28, r10
     c9e:	08 cf       	rjmp	.-496    	; 0xab0 <follow+0x70>
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	ff 90       	pop	r15
     caa:	ef 90       	pop	r14
     cac:	df 90       	pop	r13
     cae:	cf 90       	pop	r12
     cb0:	bf 90       	pop	r11
     cb2:	af 90       	pop	r10
     cb4:	9f 90       	pop	r9
     cb6:	8f 90       	pop	r8
     cb8:	7f 90       	pop	r7
     cba:	6f 90       	pop	r6
     cbc:	5f 90       	pop	r5
     cbe:	4f 90       	pop	r4
     cc0:	3f 90       	pop	r3
     cc2:	2f 90       	pop	r2
     cc4:	08 95       	ret

00000cc6 <left_degrees>:
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	ec 01       	movw	r28, r24
     ccc:	8e e1       	ldi	r24, 0x1E	; 30
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	ae de       	rcall	.-676    	; 0xa2e <forward_mm>
     cd2:	c3 dd       	rcall	.-1146   	; 0x85a <left>
     cd4:	ce 01       	movw	r24, r28
     cd6:	28 de       	rcall	.-944    	; 0x928 <angle_rotate>
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	08 95       	ret

00000cde <right_degrees>:
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	ec 01       	movw	r28, r24
     ce4:	8e e1       	ldi	r24, 0x1E	; 30
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	a2 de       	rcall	.-700    	; 0xa2e <forward_mm>
     cea:	ba dd       	rcall	.-1164   	; 0x860 <right>
     cec:	ce 01       	movw	r24, r28
     cee:	1c de       	rcall	.-968    	; 0x928 <angle_rotate>
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	08 95       	ret

00000cf6 <back_mm>:
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	ec 01       	movw	r28, r24
     cfc:	ab dd       	rcall	.-1194   	; 0x854 <back>
     cfe:	ce 01       	movw	r24, r28
     d00:	70 de       	rcall	.-800    	; 0x9e2 <linear_distance_mm>
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	08 95       	ret

00000d08 <timer1_init>:
     d08:	e1 e8       	ldi	r30, 0x81	; 129
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	10 82       	st	Z, r1
     d0e:	8c ef       	ldi	r24, 0xFC	; 252
     d10:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     d1a:	93 e0       	ldi	r25, 0x03	; 3
     d1c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     d20:	8f ef       	ldi	r24, 0xFF	; 255
     d22:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     d26:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     d2a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     d2e:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
     d32:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
     d36:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     d3a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
     d3e:	8b ea       	ldi	r24, 0xAB	; 171
     d40:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     d44:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
     d48:	8c e0       	ldi	r24, 0x0C	; 12
     d4a:	80 83       	st	Z, r24
     d4c:	08 95       	ret

00000d4e <Sharp_GP2D12_estimation>:
     d4e:	68 2f       	mov	r22, r24
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__floatunsisf>
     d5a:	2f ee       	ldi	r18, 0xEF	; 239
     d5c:	39 ec       	ldi	r19, 0xC9	; 201
     d5e:	43 e9       	ldi	r20, 0x93	; 147
     d60:	5f e3       	ldi	r21, 0x3F	; 63
     d62:	0e 94 53 10 	call	0x20a6	; 0x20a6 <pow>
     d66:	9b 01       	movw	r18, r22
     d68:	ac 01       	movw	r20, r24
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	80 e8       	ldi	r24, 0x80	; 128
     d70:	9f e3       	ldi	r25, 0x3F	; 63
     d72:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__divsf3>
     d76:	2a e9       	ldi	r18, 0x9A	; 154
     d78:	39 ef       	ldi	r19, 0xF9	; 249
     d7a:	4e e2       	ldi	r20, 0x2E	; 46
     d7c:	55 e4       	ldi	r21, 0x45	; 69
     d7e:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__mulsf3>
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	40 e2       	ldi	r20, 0x20	; 32
     d88:	51 e4       	ldi	r21, 0x41	; 65
     d8a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__mulsf3>
     d8e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__fixsfsi>
     d92:	cb 01       	movw	r24, r22
     d94:	61 32       	cpi	r22, 0x21	; 33
     d96:	73 40       	sbci	r23, 0x03	; 3
     d98:	10 f0       	brcs	.+4      	; 0xd9e <Sharp_GP2D12_estimation+0x50>
     d9a:	80 e2       	ldi	r24, 0x20	; 32
     d9c:	93 e0       	ldi	r25, 0x03	; 3
     d9e:	08 95       	ret

00000da0 <right_servo1_pin_config>:
     da0:	25 9a       	sbi	0x04, 5	; 4
     da2:	2d 9a       	sbi	0x05, 5	; 5
     da4:	08 95       	ret

00000da6 <left_servo2_pin_config>:
     da6:	26 9a       	sbi	0x04, 6	; 4
     da8:	2e 9a       	sbi	0x05, 6	; 5
     daa:	08 95       	ret

00000dac <striking_arm_servo3_pin_config>:
     dac:	27 9a       	sbi	0x04, 7	; 4
     dae:	2f 9a       	sbi	0x05, 7	; 5
     db0:	08 95       	ret

00000db2 <port_init>:
     db2:	e9 dc       	rcall	.-1582   	; 0x786 <adc_pin_config>
     db4:	17 dd       	rcall	.-1490   	; 0x7e4 <motion_pin_config>
     db6:	57 dd       	rcall	.-1362   	; 0x866 <left_encoder_pin_config>
     db8:	59 dd       	rcall	.-1358   	; 0x86c <right_encoder_pin_config>
     dba:	08 de       	rcall	.-1008   	; 0x9cc <buzzer_pin_config>
     dbc:	dd dc       	rcall	.-1606   	; 0x778 <lcd_port_config>
     dbe:	f0 df       	rcall	.-32     	; 0xda0 <right_servo1_pin_config>
     dc0:	f2 df       	rcall	.-28     	; 0xda6 <left_servo2_pin_config>
     dc2:	f4 cf       	rjmp	.-24     	; 0xdac <striking_arm_servo3_pin_config>
     dc4:	08 95       	ret

00000dc6 <init_devices>:
     dc6:	f8 94       	cli
     dc8:	f4 df       	rcall	.-24     	; 0xdb2 <port_init>
     dca:	e4 dc       	rcall	.-1592   	; 0x794 <adc_init>
     dcc:	9d df       	rcall	.-198    	; 0xd08 <timer1_init>
     dce:	1b dd       	rcall	.-1482   	; 0x806 <timer5_init>
     dd0:	50 dd       	rcall	.-1376   	; 0x872 <left_position_encoder_interrupt_init>
     dd2:	58 dd       	rcall	.-1360   	; 0x884 <right_position_encoder_interrupt_init>
     dd4:	c1 dc       	rcall	.-1662   	; 0x758 <uart0_init>
     dd6:	78 94       	sei
     dd8:	08 95       	ret

00000dda <right_servo_1>:
     dda:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     dde:	68 2f       	mov	r22, r24
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__floatunsisf>
     dea:	2b e7       	ldi	r18, 0x7B	; 123
     dec:	34 e1       	ldi	r19, 0x14	; 20
     dee:	4e ee       	ldi	r20, 0xEE	; 238
     df0:	5f e3       	ldi	r21, 0x3F	; 63
     df2:	cf d7       	rcall	.+3998   	; 0x1d92 <__divsf3>
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	4c e0       	ldi	r20, 0x0C	; 12
     dfa:	52 e4       	ldi	r21, 0x42	; 66
     dfc:	66 d7       	rcall	.+3788   	; 0x1cca <__addsf3>
     dfe:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__fixunssfsi>
     e02:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     e06:	08 95       	ret

00000e08 <left_servo_2>:
     e08:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     e0c:	68 2f       	mov	r22, r24
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__floatunsisf>
     e18:	2b e7       	ldi	r18, 0x7B	; 123
     e1a:	34 e1       	ldi	r19, 0x14	; 20
     e1c:	4e ee       	ldi	r20, 0xEE	; 238
     e1e:	5f e3       	ldi	r21, 0x3F	; 63
     e20:	b8 d7       	rcall	.+3952   	; 0x1d92 <__divsf3>
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	4c e0       	ldi	r20, 0x0C	; 12
     e28:	52 e4       	ldi	r21, 0x42	; 66
     e2a:	4f d7       	rcall	.+3742   	; 0x1cca <__addsf3>
     e2c:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__fixunssfsi>
     e30:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     e34:	08 95       	ret

00000e36 <__vector_25>:




ISR(USART0_RX_vect) // receive mnp list
{
     e36:	1f 92       	push	r1
     e38:	0f 92       	push	r0
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	0f 92       	push	r0
     e3e:	11 24       	eor	r1, r1
     e40:	0b b6       	in	r0, 0x3b	; 59
     e42:	0f 92       	push	r0
     e44:	2f 93       	push	r18
     e46:	3f 93       	push	r19
     e48:	4f 93       	push	r20
     e4a:	8f 93       	push	r24
     e4c:	9f 93       	push	r25
     e4e:	ef 93       	push	r30
     e50:	ff 93       	push	r31
	int current_node, successor_node, data;
	data = UDR0;
     e52:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     e56:	90 e0       	ldi	r25, 0x00	; 0
	if (data >= 251 && data <= 254)
     e58:	9c 01       	movw	r18, r24
     e5a:	2b 5f       	subi	r18, 0xFB	; 251
     e5c:	31 09       	sbc	r19, r1
     e5e:	24 30       	cpi	r18, 0x04	; 4
     e60:	31 05       	cpc	r19, r1
     e62:	28 f4       	brcc	.+10     	; 0xe6e <__vector_25+0x38>
	{
		flag_rx = data;
     e64:	90 93 7d 1d 	sts	0x1D7D, r25	; 0x801d7d <flag_rx+0x1>
     e68:	80 93 7c 1d 	sts	0x1D7C, r24	; 0x801d7c <flag_rx>
     e6c:	8f c0       	rjmp	.+286    	; 0xf8c <__vector_25+0x156>
	}
	else
	{
		if(flag_rx == 251) // receive mnp list
     e6e:	20 91 7c 1d 	lds	r18, 0x1D7C	; 0x801d7c <flag_rx>
     e72:	30 91 7d 1d 	lds	r19, 0x1D7D	; 0x801d7d <flag_rx+0x1>
     e76:	2b 3f       	cpi	r18, 0xFB	; 251
     e78:	31 05       	cpc	r19, r1
     e7a:	01 f5       	brne	.+64     	; 0xebc <__vector_25+0x86>
		{
			if (x == 0)
     e7c:	20 91 0c 1d 	lds	r18, 0x1D0C	; 0x801d0c <x>
     e80:	30 91 0d 1d 	lds	r19, 0x1D0D	; 0x801d0d <x+0x1>
     e84:	21 15       	cp	r18, r1
     e86:	31 05       	cpc	r19, r1
     e88:	59 f4       	brne	.+22     	; 0xea0 <__vector_25+0x6a>
			{
				MNP_list_length = data;
     e8a:	90 93 15 1d 	sts	0x1D15, r25	; 0x801d15 <MNP_list_length+0x1>
     e8e:	80 93 14 1d 	sts	0x1D14, r24	; 0x801d14 <MNP_list_length>
				x++;
     e92:	21 e0       	ldi	r18, 0x01	; 1
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	30 93 0d 1d 	sts	0x1D0D, r19	; 0x801d0d <x+0x1>
     e9a:	20 93 0c 1d 	sts	0x1D0C, r18	; 0x801d0c <x>
     e9e:	1e c0       	rjmp	.+60     	; 0xedc <__vector_25+0xa6>
			}
			else
			{
				MNP_list[x-1] = data;
     ea0:	f9 01       	movw	r30, r18
     ea2:	ee 0f       	add	r30, r30
     ea4:	ff 1f       	adc	r31, r31
     ea6:	ee 51       	subi	r30, 0x1E	; 30
     ea8:	f1 4e       	sbci	r31, 0xE1	; 225
     eaa:	91 83       	std	Z+1, r25	; 0x01
     eac:	80 83       	st	Z, r24
				x++;
     eae:	2f 5f       	subi	r18, 0xFF	; 255
     eb0:	3f 4f       	sbci	r19, 0xFF	; 255
     eb2:	30 93 0d 1d 	sts	0x1D0D, r19	; 0x801d0d <x+0x1>
     eb6:	20 93 0c 1d 	sts	0x1D0C, r18	; 0x801d0c <x>
     eba:	10 c0       	rjmp	.+32     	; 0xedc <__vector_25+0xa6>
		{
		MNP_list[y-1] = data;
		y++;
		}
		}*/
		if(flag_rx == 253)
     ebc:	2d 3f       	cpi	r18, 0xFD	; 253
     ebe:	31 05       	cpc	r19, r1
     ec0:	69 f4       	brne	.+26     	; 0xedc <__vector_25+0xa6>
		{
			track_current_mnp_index = data;
     ec2:	90 93 e5 1d 	sts	0x1DE5, r25	; 0x801de5 <track_current_mnp_index+0x1>
     ec6:	80 93 e4 1d 	sts	0x1DE4, r24	; 0x801de4 <track_current_mnp_index>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     eca:	2f ef       	ldi	r18, 0xFF	; 255
     ecc:	3f e7       	ldi	r19, 0x7F	; 127
     ece:	44 e0       	ldi	r20, 0x04	; 4
     ed0:	21 50       	subi	r18, 0x01	; 1
     ed2:	30 40       	sbci	r19, 0x00	; 0
     ed4:	40 40       	sbci	r20, 0x00	; 0
     ed6:	e1 f7       	brne	.-8      	; 0xed0 <__vector_25+0x9a>
     ed8:	00 c0       	rjmp	.+0      	; 0xeda <__vector_25+0xa4>
     eda:	00 00       	nop
			_delay_ms(100);
			// lcd_print(2, 1, track_current_mnp_index, 1);
		}
		if(flag_rx == 254)
     edc:	20 91 7c 1d 	lds	r18, 0x1D7C	; 0x801d7c <flag_rx>
     ee0:	30 91 7d 1d 	lds	r19, 0x1D7D	; 0x801d7d <flag_rx+0x1>
     ee4:	2e 3f       	cpi	r18, 0xFE	; 254
     ee6:	31 05       	cpc	r19, r1
     ee8:	09 f0       	breq	.+2      	; 0xeec <__vector_25+0xb6>
     eea:	50 c0       	rjmp	.+160    	; 0xf8c <__vector_25+0x156>
		{
			if(data == 100)
     eec:	84 36       	cpi	r24, 0x64	; 100
     eee:	91 05       	cpc	r25, r1
     ef0:	81 f4       	brne	.+32     	; 0xf12 <__vector_25+0xdc>
			{
				obs_flag = 210;
     ef2:	82 ed       	ldi	r24, 0xD2	; 210
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	90 93 4f 1e 	sts	0x1E4F, r25	; 0x801e4f <obs_flag+0x1>
     efa:	80 93 4e 1e 	sts	0x1E4E, r24	; 0x801e4e <obs_flag>
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	9f e7       	ldi	r25, 0x7F	; 127
     f02:	24 e0       	ldi	r18, 0x04	; 4
     f04:	81 50       	subi	r24, 0x01	; 1
     f06:	90 40       	sbci	r25, 0x00	; 0
     f08:	20 40       	sbci	r18, 0x00	; 0
     f0a:	e1 f7       	brne	.-8      	; 0xf04 <__vector_25+0xce>
     f0c:	00 c0       	rjmp	.+0      	; 0xf0e <__vector_25+0xd8>
     f0e:	00 00       	nop
     f10:	3d c0       	rjmp	.+122    	; 0xf8c <__vector_25+0x156>
				_delay_ms(100);
			}
			else if(data == 200)
     f12:	88 3c       	cpi	r24, 0xC8	; 200
     f14:	91 05       	cpc	r25, r1
     f16:	81 f4       	brne	.+32     	; 0xf38 <__vector_25+0x102>
			{
				obs_flag = 220;
     f18:	8c ed       	ldi	r24, 0xDC	; 220
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	90 93 4f 1e 	sts	0x1E4F, r25	; 0x801e4f <obs_flag+0x1>
     f20:	80 93 4e 1e 	sts	0x1E4E, r24	; 0x801e4e <obs_flag>
     f24:	3f ef       	ldi	r19, 0xFF	; 255
     f26:	4f e7       	ldi	r20, 0x7F	; 127
     f28:	84 e0       	ldi	r24, 0x04	; 4
     f2a:	31 50       	subi	r19, 0x01	; 1
     f2c:	40 40       	sbci	r20, 0x00	; 0
     f2e:	80 40       	sbci	r24, 0x00	; 0
     f30:	e1 f7       	brne	.-8      	; 0xf2a <__vector_25+0xf4>
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <__vector_25+0xfe>
     f34:	00 00       	nop
     f36:	2a c0       	rjmp	.+84     	; 0xf8c <__vector_25+0x156>
				_delay_ms(100);
			}
			else
			{
				if(obs_flag == 210)
     f38:	20 91 4e 1e 	lds	r18, 0x1E4E	; 0x801e4e <obs_flag>
     f3c:	30 91 4f 1e 	lds	r19, 0x1E4F	; 0x801e4f <obs_flag+0x1>
     f40:	22 3d       	cpi	r18, 0xD2	; 210
     f42:	31 05       	cpc	r19, r1
     f44:	51 f4       	brne	.+20     	; 0xf5a <__vector_25+0x124>
     f46:	9f ef       	ldi	r25, 0xFF	; 255
     f48:	2f e7       	ldi	r18, 0x7F	; 127
     f4a:	34 e0       	ldi	r19, 0x04	; 4
     f4c:	91 50       	subi	r25, 0x01	; 1
     f4e:	20 40       	sbci	r18, 0x00	; 0
     f50:	30 40       	sbci	r19, 0x00	; 0
     f52:	e1 f7       	brne	.-8      	; 0xf4c <__vector_25+0x116>
     f54:	00 c0       	rjmp	.+0      	; 0xf56 <__vector_25+0x120>
     f56:	00 00       	nop
     f58:	19 c0       	rjmp	.+50     	; 0xf8c <__vector_25+0x156>
				{
					current_node = data;
					_delay_ms(100);
				}
				else if(obs_flag == 220)
     f5a:	2c 3d       	cpi	r18, 0xDC	; 220
     f5c:	31 05       	cpc	r19, r1
     f5e:	b1 f4       	brne	.+44     	; 0xf8c <__vector_25+0x156>
     f60:	4f ef       	ldi	r20, 0xFF	; 255
     f62:	2f e7       	ldi	r18, 0x7F	; 127
     f64:	34 e0       	ldi	r19, 0x04	; 4
     f66:	41 50       	subi	r20, 0x01	; 1
     f68:	20 40       	sbci	r18, 0x00	; 0
     f6a:	30 40       	sbci	r19, 0x00	; 0
     f6c:	e1 f7       	brne	.-8      	; 0xf66 <__vector_25+0x130>
     f6e:	00 c0       	rjmp	.+0      	; 0xf70 <__vector_25+0x13a>
     f70:	00 00       	nop
				{
					successor_node = data;
					_delay_ms(100);
					connected_nodes[current_node][successor_node] = '0';
     f72:	20 e3       	ldi	r18, 0x30	; 48
     f74:	fc 01       	movw	r30, r24
     f76:	ee 5f       	subi	r30, 0xFE	; 254
     f78:	fb 4e       	sbci	r31, 0xEB	; 235
     f7a:	20 83       	st	Z, r18
					connected_nodes[successor_node][current_node] = '0';
     f7c:	28 9f       	mul	r18, r24
     f7e:	f0 01       	movw	r30, r0
     f80:	29 9f       	mul	r18, r25
     f82:	f0 0d       	add	r31, r0
     f84:	11 24       	eor	r1, r1
     f86:	ee 5f       	subi	r30, 0xFE	; 254
     f88:	fb 4e       	sbci	r31, 0xEB	; 235
     f8a:	20 83       	st	Z, r18
				}
			}
		}
	}
}
     f8c:	ff 91       	pop	r31
     f8e:	ef 91       	pop	r30
     f90:	9f 91       	pop	r25
     f92:	8f 91       	pop	r24
     f94:	4f 91       	pop	r20
     f96:	3f 91       	pop	r19
     f98:	2f 91       	pop	r18
     f9a:	0f 90       	pop	r0
     f9c:	0b be       	out	0x3b, r0	; 59
     f9e:	0f 90       	pop	r0
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	0f 90       	pop	r0
     fa4:	1f 90       	pop	r1
     fa6:	18 95       	reti

00000fa8 <find_shortest_path>:
*
* Example Call:	find_shortest_path()
*
*/

void find_shortest_path() {
     fa8:	ee e7       	ldi	r30, 0x7E	; 126
     faa:	fd e1       	ldi	r31, 0x1D	; 29
     fac:	82 ee       	ldi	r24, 0xE2	; 226
     fae:	9d e1       	ldi	r25, 0x1D	; 29
	// initialize path array
	for (int i = 0; i < MAX; i++) {
		path[i] = 0;
     fb0:	11 92       	st	Z+, r1
     fb2:	11 92       	st	Z+, r1
*
*/

void find_shortest_path() {
	// initialize path array
	for (int i = 0; i < MAX; i++) {
     fb4:	e8 17       	cp	r30, r24
     fb6:	f9 07       	cpc	r31, r25
     fb8:	d9 f7       	brne	.-10     	; 0xfb0 <find_shortest_path+0x8>
		path[i] = 0;
	}
	path_length = 0; // initialize path length
     fba:	10 92 17 1d 	sts	0x1D17, r1	; 0x801d17 <path_length+0x1>
     fbe:	10 92 16 1d 	sts	0x1D16, r1	; 0x801d16 <path_length>
	dijkstra(source_node);
     fc2:	80 91 28 1f 	lds	r24, 0x1F28	; 0x801f28 <source_node>
     fc6:	90 91 29 1f 	lds	r25, 0x1F29	; 0x801f29 <source_node+0x1>
     fca:	28 db       	rcall	.-2480   	; 0x61c <dijkstra>
	find_path(source_node, destination_node);
     fcc:	60 91 e2 1d 	lds	r22, 0x1DE2	; 0x801de2 <destination_node>
     fd0:	70 91 e3 1d 	lds	r23, 0x1DE3	; 0x801de3 <destination_node+0x1>
     fd4:	80 91 28 1f 	lds	r24, 0x1F28	; 0x801f28 <source_node>
     fd8:	90 91 29 1f 	lds	r25, 0x1F29	; 0x801f29 <source_node+0x1>
     fdc:	a2 ca       	rjmp	.-2748   	; 0x522 <find_path>
     fde:	08 95       	ret

00000fe0 <check_path>:
*
* Example Call:	check_path(current node, successor node)
*
*/

int check_path(int current_node, int successor_node, int j) {
     fe0:	af 92       	push	r10
     fe2:	bf 92       	push	r11
     fe4:	cf 92       	push	r12
     fe6:	df 92       	push	r13
     fe8:	ef 92       	push	r14
     fea:	ff 92       	push	r15
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	7c 01       	movw	r14, r24
     ff6:	6b 01       	movw	r12, r22
     ff8:	5a 01       	movw	r10, r20
     ffa:	c5 e0       	ldi	r28, 0x05	; 5
     ffc:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char sharp;
	unsigned int distance_mm = 0; // stores the distance obtained from the sharp IR sensor in millimeters
     ffe:	00 e0       	ldi	r16, 0x00	; 0
    1000:	10 e0       	ldi	r17, 0x00	; 0
	int k = 0, sharp_threshold;
	while (k < 5) {
		sharp = ADC_Conversion(11);
    1002:	8b e0       	ldi	r24, 0x0B	; 11
    1004:	d4 db       	rcall	.-2136   	; 0x7ae <ADC_Conversion>
		distance_mm += Sharp_GP2D12_estimation(sharp);
    1006:	a3 de       	rcall	.-698    	; 0xd4e <Sharp_GP2D12_estimation>
    1008:	08 0f       	add	r16, r24
    100a:	19 1f       	adc	r17, r25
    100c:	2f ef       	ldi	r18, 0xFF	; 255
    100e:	8f e3       	ldi	r24, 0x3F	; 63
    1010:	92 e0       	ldi	r25, 0x02	; 2
    1012:	21 50       	subi	r18, 0x01	; 1
    1014:	80 40       	sbci	r24, 0x00	; 0
    1016:	90 40       	sbci	r25, 0x00	; 0
    1018:	e1 f7       	brne	.-8      	; 0x1012 <check_path+0x32>
    101a:	00 c0       	rjmp	.+0      	; 0x101c <check_path+0x3c>
    101c:	00 00       	nop
    101e:	21 97       	sbiw	r28, 0x01	; 1

int check_path(int current_node, int successor_node, int j) {
	unsigned char sharp;
	unsigned int distance_mm = 0; // stores the distance obtained from the sharp IR sensor in millimeters
	int k = 0, sharp_threshold;
	while (k < 5) {
    1020:	81 f7       	brne	.-32     	; 0x1002 <check_path+0x22>
		sharp = ADC_Conversion(11);
		distance_mm += Sharp_GP2D12_estimation(sharp);
		k++;
		_delay_ms(50);
	}
	distance_mm /= 5;
    1022:	98 01       	movw	r18, r16
    1024:	ad ec       	ldi	r26, 0xCD	; 205
    1026:	bc ec       	ldi	r27, 0xCC	; 204
    1028:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__umulhisi3>
    102c:	ec 01       	movw	r28, r24
    102e:	d6 95       	lsr	r29
    1030:	c7 95       	ror	r28
    1032:	d6 95       	lsr	r29
    1034:	c7 95       	ror	r28
	lcd_print(2, 13, distance_mm, 3);
    1036:	23 e0       	ldi	r18, 0x03	; 3
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	ae 01       	movw	r20, r28
    103c:	6d e0       	ldi	r22, 0x0D	; 13
    103e:	82 e0       	ldi	r24, 0x02	; 2
    1040:	78 d9       	rcall	.-3344   	; 0x332 <lcd_print>

	// Since the path between nodes 37 and 40, 25 and 28, 31 and 34 is twice the length of other path the distance between the bot and the object
	// will be greater. Hence, setting higher sharp threshold  for these paths
	if ((current_node == 37 || current_node == 40 || current_node == 25 || current_node == 28 || current_node == 31 || current_node == 34)
    1042:	25 e2       	ldi	r18, 0x25	; 37
    1044:	e2 16       	cp	r14, r18
    1046:	f1 04       	cpc	r15, r1
    1048:	a1 f0       	breq	.+40     	; 0x1072 <check_path+0x92>
    104a:	88 e2       	ldi	r24, 0x28	; 40
    104c:	e8 16       	cp	r14, r24
    104e:	f1 04       	cpc	r15, r1
    1050:	81 f0       	breq	.+32     	; 0x1072 <check_path+0x92>
    1052:	99 e1       	ldi	r25, 0x19	; 25
    1054:	e9 16       	cp	r14, r25
    1056:	f1 04       	cpc	r15, r1
    1058:	61 f0       	breq	.+24     	; 0x1072 <check_path+0x92>
    105a:	2c e1       	ldi	r18, 0x1C	; 28
    105c:	e2 16       	cp	r14, r18
    105e:	f1 04       	cpc	r15, r1
    1060:	41 f0       	breq	.+16     	; 0x1072 <check_path+0x92>
    1062:	8f e1       	ldi	r24, 0x1F	; 31
    1064:	e8 16       	cp	r14, r24
    1066:	f1 04       	cpc	r15, r1
    1068:	21 f0       	breq	.+8      	; 0x1072 <check_path+0x92>
    106a:	92 e2       	ldi	r25, 0x22	; 34
    106c:	e9 16       	cp	r14, r25
    106e:	f1 04       	cpc	r15, r1
    1070:	d9 f4       	brne	.+54     	; 0x10a8 <check_path+0xc8>
	&& (successor_node == 37 || successor_node == 40 || successor_node == 25 || successor_node == 28 || successor_node == 31 || successor_node == 34)) {
    1072:	25 e2       	ldi	r18, 0x25	; 37
    1074:	c2 16       	cp	r12, r18
    1076:	d1 04       	cpc	r13, r1
    1078:	d1 f0       	breq	.+52     	; 0x10ae <check_path+0xce>
    107a:	88 e2       	ldi	r24, 0x28	; 40
    107c:	c8 16       	cp	r12, r24
    107e:	d1 04       	cpc	r13, r1
    1080:	c9 f0       	breq	.+50     	; 0x10b4 <check_path+0xd4>
    1082:	99 e1       	ldi	r25, 0x19	; 25
    1084:	c9 16       	cp	r12, r25
    1086:	d1 04       	cpc	r13, r1
    1088:	c1 f0       	breq	.+48     	; 0x10ba <check_path+0xda>
    108a:	2c e1       	ldi	r18, 0x1C	; 28
    108c:	c2 16       	cp	r12, r18
    108e:	d1 04       	cpc	r13, r1
    1090:	b9 f0       	breq	.+46     	; 0x10c0 <check_path+0xe0>
    1092:	8f e1       	ldi	r24, 0x1F	; 31
    1094:	c8 16       	cp	r12, r24
    1096:	d1 04       	cpc	r13, r1
    1098:	b1 f0       	breq	.+44     	; 0x10c6 <check_path+0xe6>
    109a:	92 e2       	ldi	r25, 0x22	; 34
    109c:	c9 16       	cp	r12, r25
    109e:	d1 04       	cpc	r13, r1
    10a0:	a9 f4       	brne	.+42     	; 0x10cc <check_path+0xec>
		sharp_threshold = 600;
    10a2:	88 e5       	ldi	r24, 0x58	; 88
    10a4:	92 e0       	ldi	r25, 0x02	; 2
    10a6:	14 c0       	rjmp	.+40     	; 0x10d0 <check_path+0xf0>
		} else {
		sharp_threshold = 100;
    10a8:	84 e6       	ldi	r24, 0x64	; 100
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	11 c0       	rjmp	.+34     	; 0x10d0 <check_path+0xf0>

	// Since the path between nodes 37 and 40, 25 and 28, 31 and 34 is twice the length of other path the distance between the bot and the object
	// will be greater. Hence, setting higher sharp threshold  for these paths
	if ((current_node == 37 || current_node == 40 || current_node == 25 || current_node == 28 || current_node == 31 || current_node == 34)
	&& (successor_node == 37 || successor_node == 40 || successor_node == 25 || successor_node == 28 || successor_node == 31 || successor_node == 34)) {
		sharp_threshold = 600;
    10ae:	88 e5       	ldi	r24, 0x58	; 88
    10b0:	92 e0       	ldi	r25, 0x02	; 2
    10b2:	0e c0       	rjmp	.+28     	; 0x10d0 <check_path+0xf0>
    10b4:	88 e5       	ldi	r24, 0x58	; 88
    10b6:	92 e0       	ldi	r25, 0x02	; 2
    10b8:	0b c0       	rjmp	.+22     	; 0x10d0 <check_path+0xf0>
    10ba:	88 e5       	ldi	r24, 0x58	; 88
    10bc:	92 e0       	ldi	r25, 0x02	; 2
    10be:	08 c0       	rjmp	.+16     	; 0x10d0 <check_path+0xf0>
    10c0:	88 e5       	ldi	r24, 0x58	; 88
    10c2:	92 e0       	ldi	r25, 0x02	; 2
    10c4:	05 c0       	rjmp	.+10     	; 0x10d0 <check_path+0xf0>
    10c6:	88 e5       	ldi	r24, 0x58	; 88
    10c8:	92 e0       	ldi	r25, 0x02	; 2
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <check_path+0xf0>
		} else {
		sharp_threshold = 100;
    10cc:	84 e6       	ldi	r24, 0x64	; 100
    10ce:	90 e0       	ldi	r25, 0x00	; 0
	}

	if (distance_mm <= sharp_threshold) {
    10d0:	8c 17       	cp	r24, r28
    10d2:	9d 07       	cpc	r25, r29
    10d4:	08 f4       	brcc	.+2      	; 0x10d8 <check_path+0xf8>
    10d6:	64 c0       	rjmp	.+200    	; 0x11a0 <check_path+0x1c0>
		// removing path between the nodes with obstacle
		flag_tx = 254; // denotes obstacle
    10d8:	8e ef       	ldi	r24, 0xFE	; 254
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	90 93 53 1e 	sts	0x1E53, r25	; 0x801e53 <flag_tx+0x1>
    10e0:	80 93 52 1e 	sts	0x1E52, r24	; 0x801e52 <flag_tx>
		UDR0 = flag_tx;
    10e4:	e6 ec       	ldi	r30, 0xC6	; 198
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	8e ef       	ldi	r24, 0xFE	; 254
    10ea:	80 83       	st	Z, r24
    10ec:	2f ef       	ldi	r18, 0xFF	; 255
    10ee:	8f e7       	ldi	r24, 0x7F	; 127
    10f0:	94 e0       	ldi	r25, 0x04	; 4
    10f2:	21 50       	subi	r18, 0x01	; 1
    10f4:	80 40       	sbci	r24, 0x00	; 0
    10f6:	90 40       	sbci	r25, 0x00	; 0
    10f8:	e1 f7       	brne	.-8      	; 0x10f2 <check_path+0x112>
    10fa:	00 c0       	rjmp	.+0      	; 0x10fc <check_path+0x11c>
    10fc:	00 00       	nop
		_delay_ms(100);
		connected_nodes[current_node][successor_node] = '0';
    10fe:	80 e3       	ldi	r24, 0x30	; 48
    1100:	8e 9d       	mul	r24, r14
    1102:	d0 01       	movw	r26, r0
    1104:	8f 9d       	mul	r24, r15
    1106:	b0 0d       	add	r27, r0
    1108:	11 24       	eor	r1, r1
    110a:	ac 0d       	add	r26, r12
    110c:	bd 1d       	adc	r27, r13
    110e:	ae 5f       	subi	r26, 0xFE	; 254
    1110:	bb 4e       	sbci	r27, 0xEB	; 235
    1112:	8c 93       	st	X, r24
		connected_nodes[successor_node][current_node] = '0';
    1114:	8c 9d       	mul	r24, r12
    1116:	d0 01       	movw	r26, r0
    1118:	8d 9d       	mul	r24, r13
    111a:	b0 0d       	add	r27, r0
    111c:	11 24       	eor	r1, r1
    111e:	ae 0d       	add	r26, r14
    1120:	bf 1d       	adc	r27, r15
    1122:	ae 5f       	subi	r26, 0xFE	; 254
    1124:	bb 4e       	sbci	r27, 0xEB	; 235
    1126:	8c 93       	st	X, r24
		UDR0 = 100; // flag to send current node
    1128:	84 e6       	ldi	r24, 0x64	; 100
    112a:	80 83       	st	Z, r24
    112c:	2f ef       	ldi	r18, 0xFF	; 255
    112e:	8f e7       	ldi	r24, 0x7F	; 127
    1130:	94 e0       	ldi	r25, 0x04	; 4
    1132:	21 50       	subi	r18, 0x01	; 1
    1134:	80 40       	sbci	r24, 0x00	; 0
    1136:	90 40       	sbci	r25, 0x00	; 0
    1138:	e1 f7       	brne	.-8      	; 0x1132 <check_path+0x152>
    113a:	00 c0       	rjmp	.+0      	; 0x113c <check_path+0x15c>
    113c:	00 00       	nop
		_delay_ms(100);
		UDR0 = current_node;
    113e:	e0 82       	st	Z, r14
    1140:	2f ef       	ldi	r18, 0xFF	; 255
    1142:	8f e7       	ldi	r24, 0x7F	; 127
    1144:	94 e0       	ldi	r25, 0x04	; 4
    1146:	21 50       	subi	r18, 0x01	; 1
    1148:	80 40       	sbci	r24, 0x00	; 0
    114a:	90 40       	sbci	r25, 0x00	; 0
    114c:	e1 f7       	brne	.-8      	; 0x1146 <check_path+0x166>
    114e:	00 c0       	rjmp	.+0      	; 0x1150 <check_path+0x170>
    1150:	00 00       	nop
		_delay_ms(100);
		UDR0 = 200;	// flag to send successor nod
    1152:	88 ec       	ldi	r24, 0xC8	; 200
    1154:	80 83       	st	Z, r24
    1156:	2f ef       	ldi	r18, 0xFF	; 255
    1158:	8f e7       	ldi	r24, 0x7F	; 127
    115a:	94 e0       	ldi	r25, 0x04	; 4
    115c:	21 50       	subi	r18, 0x01	; 1
    115e:	80 40       	sbci	r24, 0x00	; 0
    1160:	90 40       	sbci	r25, 0x00	; 0
    1162:	e1 f7       	brne	.-8      	; 0x115c <check_path+0x17c>
    1164:	00 c0       	rjmp	.+0      	; 0x1166 <check_path+0x186>
    1166:	00 00       	nop
		_delay_ms(100);
		UDR0 = successor_node;
    1168:	c0 82       	st	Z, r12
    116a:	2f ef       	ldi	r18, 0xFF	; 255
    116c:	8f e7       	ldi	r24, 0x7F	; 127
    116e:	94 e0       	ldi	r25, 0x04	; 4
    1170:	21 50       	subi	r18, 0x01	; 1
    1172:	80 40       	sbci	r24, 0x00	; 0
    1174:	90 40       	sbci	r25, 0x00	; 0
    1176:	e1 f7       	brne	.-8      	; 0x1170 <check_path+0x190>
    1178:	00 c0       	rjmp	.+0      	; 0x117a <check_path+0x19a>
    117a:	00 00       	nop
		_delay_ms(100);
		// setting current node as the source node and re-calculating the path to the destination MNP
		source_node = path[j];
    117c:	f5 01       	movw	r30, r10
    117e:	ee 0f       	add	r30, r30
    1180:	ff 1f       	adc	r31, r31
    1182:	e2 58       	subi	r30, 0x82	; 130
    1184:	f2 4e       	sbci	r31, 0xE2	; 226
    1186:	80 81       	ld	r24, Z
    1188:	91 81       	ldd	r25, Z+1	; 0x01
    118a:	90 93 29 1f 	sts	0x1F29, r25	; 0x801f29 <source_node+0x1>
    118e:	80 93 28 1f 	sts	0x1F28, r24	; 0x801f28 <source_node>
		find_shortest_path();
    1192:	0a df       	rcall	.-492    	; 0xfa8 <find_shortest_path>

		back_mm(30); // go back to avoid crashing with the obstacle
    1194:	8e e1       	ldi	r24, 0x1E	; 30
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	ae dd       	rcall	.-1188   	; 0xcf6 <back_mm>
		return 1;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <check_path+0x1c4>
	}
	return 0;
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
}
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	ff 90       	pop	r15
    11ae:	ef 90       	pop	r14
    11b0:	df 90       	pop	r13
    11b2:	cf 90       	pop	r12
    11b4:	bf 90       	pop	r11
    11b6:	af 90       	pop	r10
    11b8:	08 95       	ret

000011ba <find_optimal_path_for_MNP_with_several_neighbor_nodes>:
*
* Example Call:	find_optimal_path(array of nearest neighbors of MNP, length of array)
*
*/

void find_optimal_path_for_MNP_with_several_neighbor_nodes(int neighbor_nodes[], int neighbor_nodes_array_length) {
    11ba:	8f 92       	push	r8
    11bc:	9f 92       	push	r9
    11be:	af 92       	push	r10
    11c0:	bf 92       	push	r11
    11c2:	cf 92       	push	r12
    11c4:	df 92       	push	r13
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	5c 01       	movw	r10, r24
    11d4:	7b 01       	movw	r14, r22
	int index_of_shortest_path = 0;
	// calculate path for the first nearest node
	destination_node = neighbor_nodes[0];
    11d6:	fc 01       	movw	r30, r24
    11d8:	80 81       	ld	r24, Z
    11da:	91 81       	ldd	r25, Z+1	; 0x01
    11dc:	90 93 e3 1d 	sts	0x1DE3, r25	; 0x801de3 <destination_node+0x1>
    11e0:	80 93 e2 1d 	sts	0x1DE2, r24	; 0x801de2 <destination_node>
	find_shortest_path(); // calculate shortest path
    11e4:	e1 de       	rcall	.-574    	; 0xfa8 <find_shortest_path>
	int current_minimum_length = path_length;
    11e6:	00 91 16 1d 	lds	r16, 0x1D16	; 0x801d16 <path_length>
    11ea:	10 91 17 1d 	lds	r17, 0x1D17	; 0x801d17 <path_length+0x1>

	// calculate path starting from second nearest node
	for (int i = 1; i < neighbor_nodes_array_length; i++) {
    11ee:	f2 e0       	ldi	r31, 0x02	; 2
    11f0:	ef 16       	cp	r14, r31
    11f2:	f1 04       	cpc	r15, r1
    11f4:	f4 f0       	brlt	.+60     	; 0x1232 <find_optimal_path_for_MNP_with_several_neighbor_nodes+0x78>
    11f6:	e5 01       	movw	r28, r10
    11f8:	22 96       	adiw	r28, 0x02	; 2
    11fa:	88 24       	eor	r8, r8
    11fc:	83 94       	inc	r8
    11fe:	91 2c       	mov	r9, r1
    1200:	c1 2c       	mov	r12, r1
    1202:	d1 2c       	mov	r13, r1
		destination_node = neighbor_nodes[i];
    1204:	89 91       	ld	r24, Y+
    1206:	99 91       	ld	r25, Y+
    1208:	90 93 e3 1d 	sts	0x1DE3, r25	; 0x801de3 <destination_node+0x1>
    120c:	80 93 e2 1d 	sts	0x1DE2, r24	; 0x801de2 <destination_node>
		find_shortest_path();
    1210:	cb de       	rcall	.-618    	; 0xfa8 <find_shortest_path>
		if (path_length < current_minimum_length) {
    1212:	80 91 16 1d 	lds	r24, 0x1D16	; 0x801d16 <path_length>
    1216:	90 91 17 1d 	lds	r25, 0x1D17	; 0x801d17 <path_length+0x1>
    121a:	80 17       	cp	r24, r16
    121c:	91 07       	cpc	r25, r17
    121e:	14 f4       	brge	.+4      	; 0x1224 <find_optimal_path_for_MNP_with_several_neighbor_nodes+0x6a>
			current_minimum_length = path_length;
    1220:	8c 01       	movw	r16, r24

	// calculate path starting from second nearest node
	for (int i = 1; i < neighbor_nodes_array_length; i++) {
		destination_node = neighbor_nodes[i];
		find_shortest_path();
		if (path_length < current_minimum_length) {
    1222:	64 01       	movw	r12, r8
	destination_node = neighbor_nodes[0];
	find_shortest_path(); // calculate shortest path
	int current_minimum_length = path_length;

	// calculate path starting from second nearest node
	for (int i = 1; i < neighbor_nodes_array_length; i++) {
    1224:	8f ef       	ldi	r24, 0xFF	; 255
    1226:	88 1a       	sub	r8, r24
    1228:	98 0a       	sbc	r9, r24
    122a:	8e 14       	cp	r8, r14
    122c:	9f 04       	cpc	r9, r15
    122e:	51 f7       	brne	.-44     	; 0x1204 <find_optimal_path_for_MNP_with_several_neighbor_nodes+0x4a>
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <find_optimal_path_for_MNP_with_several_neighbor_nodes+0x7c>
* Example Call:	find_optimal_path(array of nearest neighbors of MNP, length of array)
*
*/

void find_optimal_path_for_MNP_with_several_neighbor_nodes(int neighbor_nodes[], int neighbor_nodes_array_length) {
	int index_of_shortest_path = 0;
    1232:	c1 2c       	mov	r12, r1
    1234:	d1 2c       	mov	r13, r1
			current_minimum_length = path_length;
			index_of_shortest_path = i; // if the current path is shorter than previous one then store its index
		}
	}
	// re-calculate the path using the index_of_shortest_path
	destination_node = neighbor_nodes[index_of_shortest_path];
    1236:	cc 0c       	add	r12, r12
    1238:	dd 1c       	adc	r13, r13
    123a:	f5 01       	movw	r30, r10
    123c:	ec 0d       	add	r30, r12
    123e:	fd 1d       	adc	r31, r13
    1240:	80 81       	ld	r24, Z
    1242:	91 81       	ldd	r25, Z+1	; 0x01
    1244:	90 93 e3 1d 	sts	0x1DE3, r25	; 0x801de3 <destination_node+0x1>
    1248:	80 93 e2 1d 	sts	0x1DE2, r24	; 0x801de2 <destination_node>
	find_shortest_path();
    124c:	ad de       	rcall	.-678    	; 0xfa8 <find_shortest_path>
	// now path array stores shortest path among all its neighbors
}
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	ff 90       	pop	r15
    1258:	ef 90       	pop	r14
    125a:	df 90       	pop	r13
    125c:	cf 90       	pop	r12
    125e:	bf 90       	pop	r11
    1260:	af 90       	pop	r10
    1262:	9f 90       	pop	r9
    1264:	8f 90       	pop	r8
    1266:	08 95       	ret

00001268 <identify_neighbors_of_MNP>:
*
* Example Call:	identify_neighbors_MNP(index of current MNP)
*
*/

void identify_neighbors_of_MNP(int mnp) {
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	2c 97       	sbiw	r28, 0x0c	; 12
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
	int a[6];
	switch (mnp) {
    127c:	fc 01       	movw	r30, r24
    127e:	79 97       	sbiw	r30, 0x19	; 25
    1280:	e9 30       	cpi	r30, 0x09	; 9
    1282:	f1 05       	cpc	r31, r1
    1284:	08 f0       	brcs	.+2      	; 0x1288 <identify_neighbors_of_MNP+0x20>
    1286:	e2 c0       	rjmp	.+452    	; 0x144c <identify_neighbors_of_MNP+0x1e4>
    1288:	88 27       	eor	r24, r24
    128a:	ee 58       	subi	r30, 0x8E	; 142
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	8f 4f       	sbci	r24, 0xFF	; 255
    1290:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <__tablejump2__>
		case 25:
		a[0] = 0;
    1294:	1a 82       	std	Y+2, r1	; 0x02
    1296:	19 82       	std	Y+1, r1	; 0x01
		a[1] = 39;
    1298:	87 e2       	ldi	r24, 0x27	; 39
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	9c 83       	std	Y+4, r25	; 0x04
    129e:	8b 83       	std	Y+3, r24	; 0x03
		a[2] = 40;
    12a0:	88 e2       	ldi	r24, 0x28	; 40
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	9e 83       	std	Y+6, r25	; 0x06
    12a6:	8d 83       	std	Y+5, r24	; 0x05
		a[3] = 41;
    12a8:	89 e2       	ldi	r24, 0x29	; 41
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	98 87       	std	Y+8, r25	; 0x08
    12ae:	8f 83       	std	Y+7, r24	; 0x07
		find_optimal_path_for_MNP_with_several_neighbor_nodes(a, 4);
    12b0:	64 e0       	ldi	r22, 0x04	; 4
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	ce 01       	movw	r24, r28
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	80 df       	rcall	.-256    	; 0x11ba <find_optimal_path_for_MNP_with_several_neighbor_nodes>
		break;
    12ba:	ce c0       	rjmp	.+412    	; 0x1458 <identify_neighbors_of_MNP+0x1f0>
		case 26:
		a[0] = 24;
    12bc:	88 e1       	ldi	r24, 0x18	; 24
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	9a 83       	std	Y+2, r25	; 0x02
    12c2:	89 83       	std	Y+1, r24	; 0x01
		a[1] = 25;
    12c4:	89 e1       	ldi	r24, 0x19	; 25
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	9c 83       	std	Y+4, r25	; 0x04
    12ca:	8b 83       	std	Y+3, r24	; 0x03
		a[2] = 40;
    12cc:	88 e2       	ldi	r24, 0x28	; 40
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	9e 83       	std	Y+6, r25	; 0x06
    12d2:	8d 83       	std	Y+5, r24	; 0x05
		a[3] = 41;
    12d4:	89 e2       	ldi	r24, 0x29	; 41
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	98 87       	std	Y+8, r25	; 0x08
    12da:	8f 83       	std	Y+7, r24	; 0x07
		a[4] = 42;
    12dc:	8a e2       	ldi	r24, 0x2A	; 42
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	9a 87       	std	Y+10, r25	; 0x0a
    12e2:	89 87       	std	Y+9, r24	; 0x09
		a[5] = 43;
    12e4:	8b e2       	ldi	r24, 0x2B	; 43
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	9c 87       	std	Y+12, r25	; 0x0c
    12ea:	8b 87       	std	Y+11, r24	; 0x0b
		find_optimal_path_for_MNP_with_several_neighbor_nodes(a, 6);
    12ec:	66 e0       	ldi	r22, 0x06	; 6
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	ce 01       	movw	r24, r28
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	62 df       	rcall	.-316    	; 0x11ba <find_optimal_path_for_MNP_with_several_neighbor_nodes>
		break;
    12f6:	b0 c0       	rjmp	.+352    	; 0x1458 <identify_neighbors_of_MNP+0x1f0>
		case 27:
		a[0] = 4;
    12f8:	84 e0       	ldi	r24, 0x04	; 4
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	9a 83       	std	Y+2, r25	; 0x02
    12fe:	89 83       	std	Y+1, r24	; 0x01
		a[1] = 24;
    1300:	88 e1       	ldi	r24, 0x18	; 24
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	9c 83       	std	Y+4, r25	; 0x04
    1306:	8b 83       	std	Y+3, r24	; 0x03
		a[2] = 25;
    1308:	89 e1       	ldi	r24, 0x19	; 25
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9e 83       	std	Y+6, r25	; 0x06
    130e:	8d 83       	std	Y+5, r24	; 0x05
		a[3] = 26;
    1310:	8a e1       	ldi	r24, 0x1A	; 26
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	98 87       	std	Y+8, r25	; 0x08
    1316:	8f 83       	std	Y+7, r24	; 0x07
		find_optimal_path_for_MNP_with_several_neighbor_nodes(a, 4);
    1318:	64 e0       	ldi	r22, 0x04	; 4
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	ce 01       	movw	r24, r28
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	4c df       	rcall	.-360    	; 0x11ba <find_optimal_path_for_MNP_with_several_neighbor_nodes>
		break;
    1322:	9a c0       	rjmp	.+308    	; 0x1458 <identify_neighbors_of_MNP+0x1f0>
		case 28:
		a[0] = 8;
    1324:	88 e0       	ldi	r24, 0x08	; 8
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	9a 83       	std	Y+2, r25	; 0x02
    132a:	89 83       	std	Y+1, r24	; 0x01
		a[1] = 27;
    132c:	8b e1       	ldi	r24, 0x1B	; 27
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	8b 83       	std	Y+3, r24	; 0x03
		a[2] = 28;
    1334:	8c e1       	ldi	r24, 0x1C	; 28
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	9e 83       	std	Y+6, r25	; 0x06
    133a:	8d 83       	std	Y+5, r24	; 0x05
		a[3] = 29;
    133c:	8d e1       	ldi	r24, 0x1D	; 29
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	98 87       	std	Y+8, r25	; 0x08
    1342:	8f 83       	std	Y+7, r24	; 0x07
		find_optimal_path_for_MNP_with_several_neighbor_nodes(a, 4);
    1344:	64 e0       	ldi	r22, 0x04	; 4
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	ce 01       	movw	r24, r28
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	36 df       	rcall	.-404    	; 0x11ba <find_optimal_path_for_MNP_with_several_neighbor_nodes>
		break;
    134e:	84 c0       	rjmp	.+264    	; 0x1458 <identify_neighbors_of_MNP+0x1f0>
		case 29:
		a[0] = 28;
    1350:	8c e1       	ldi	r24, 0x1C	; 28
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	89 83       	std	Y+1, r24	; 0x01
		a[1] = 29;
    1358:	8d e1       	ldi	r24, 0x1D	; 29
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	9c 83       	std	Y+4, r25	; 0x04
    135e:	8b 83       	std	Y+3, r24	; 0x03
		a[2] = 30;
    1360:	8e e1       	ldi	r24, 0x1E	; 30
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	9e 83       	std	Y+6, r25	; 0x06
    1366:	8d 83       	std	Y+5, r24	; 0x05
		a[3] = 31;
    1368:	8f e1       	ldi	r24, 0x1F	; 31
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	98 87       	std	Y+8, r25	; 0x08
    136e:	8f 83       	std	Y+7, r24	; 0x07
		a[4] = 44;
    1370:	8c e2       	ldi	r24, 0x2C	; 44
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	9a 87       	std	Y+10, r25	; 0x0a
    1376:	89 87       	std	Y+9, r24	; 0x09
		a[5] = 45;
    1378:	8d e2       	ldi	r24, 0x2D	; 45
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	9c 87       	std	Y+12, r25	; 0x0c
    137e:	8b 87       	std	Y+11, r24	; 0x0b
		find_optimal_path_for_MNP_with_several_neighbor_nodes(a, 6);
    1380:	66 e0       	ldi	r22, 0x06	; 6
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	ce 01       	movw	r24, r28
    1386:	01 96       	adiw	r24, 0x01	; 1
    1388:	18 df       	rcall	.-464    	; 0x11ba <find_optimal_path_for_MNP_with_several_neighbor_nodes>
		break;
    138a:	66 c0       	rjmp	.+204    	; 0x1458 <identify_neighbors_of_MNP+0x1f0>
		case 30:
		a[0] = 12;
    138c:	8c e0       	ldi	r24, 0x0C	; 12
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	9a 83       	std	Y+2, r25	; 0x02
    1392:	89 83       	std	Y+1, r24	; 0x01
		a[1] = 30;
    1394:	8e e1       	ldi	r24, 0x1E	; 30
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	9c 83       	std	Y+4, r25	; 0x04
    139a:	8b 83       	std	Y+3, r24	; 0x03
		a[2] = 31;
    139c:	8f e1       	ldi	r24, 0x1F	; 31
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	9e 83       	std	Y+6, r25	; 0x06
    13a2:	8d 83       	std	Y+5, r24	; 0x05
		a[3] = 32;
    13a4:	80 e2       	ldi	r24, 0x20	; 32
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	98 87       	std	Y+8, r25	; 0x08
    13aa:	8f 83       	std	Y+7, r24	; 0x07
		find_optimal_path_for_MNP_with_several_neighbor_nodes(a, 4);
    13ac:	64 e0       	ldi	r22, 0x04	; 4
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	ce 01       	movw	r24, r28
    13b2:	01 96       	adiw	r24, 0x01	; 1
    13b4:	02 df       	rcall	.-508    	; 0x11ba <find_optimal_path_for_MNP_with_several_neighbor_nodes>
		break;
    13b6:	50 c0       	rjmp	.+160    	; 0x1458 <identify_neighbors_of_MNP+0x1f0>
		case 31:
		a[0] = 16;
    13b8:	80 e1       	ldi	r24, 0x10	; 16
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	9a 83       	std	Y+2, r25	; 0x02
    13be:	89 83       	std	Y+1, r24	; 0x01
		a[1] = 33;
    13c0:	81 e2       	ldi	r24, 0x21	; 33
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	9c 83       	std	Y+4, r25	; 0x04
    13c6:	8b 83       	std	Y+3, r24	; 0x03
		a[2] = 34;
    13c8:	82 e2       	ldi	r24, 0x22	; 34
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	9e 83       	std	Y+6, r25	; 0x06
    13ce:	8d 83       	std	Y+5, r24	; 0x05
		a[3] = 35;
    13d0:	83 e2       	ldi	r24, 0x23	; 35
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	98 87       	std	Y+8, r25	; 0x08
    13d6:	8f 83       	std	Y+7, r24	; 0x07
		find_optimal_path_for_MNP_with_several_neighbor_nodes(a, 4);
    13d8:	64 e0       	ldi	r22, 0x04	; 4
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	ce 01       	movw	r24, r28
    13de:	01 96       	adiw	r24, 0x01	; 1
    13e0:	ec de       	rcall	.-552    	; 0x11ba <find_optimal_path_for_MNP_with_several_neighbor_nodes>
		break;
    13e2:	3a c0       	rjmp	.+116    	; 0x1458 <identify_neighbors_of_MNP+0x1f0>
		case 32:
		a[0] = 34;
    13e4:	82 e2       	ldi	r24, 0x22	; 34
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	9a 83       	std	Y+2, r25	; 0x02
    13ea:	89 83       	std	Y+1, r24	; 0x01
		a[1] = 35;
    13ec:	83 e2       	ldi	r24, 0x23	; 35
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	9c 83       	std	Y+4, r25	; 0x04
    13f2:	8b 83       	std	Y+3, r24	; 0x03
		a[2] = 36;
    13f4:	84 e2       	ldi	r24, 0x24	; 36
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	9e 83       	std	Y+6, r25	; 0x06
    13fa:	8d 83       	std	Y+5, r24	; 0x05
		a[3] = 37;
    13fc:	85 e2       	ldi	r24, 0x25	; 37
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	98 87       	std	Y+8, r25	; 0x08
    1402:	8f 83       	std	Y+7, r24	; 0x07
		a[4] = 46;
    1404:	8e e2       	ldi	r24, 0x2E	; 46
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	9a 87       	std	Y+10, r25	; 0x0a
    140a:	89 87       	std	Y+9, r24	; 0x09
		a[5] = 47;
    140c:	8f e2       	ldi	r24, 0x2F	; 47
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	9c 87       	std	Y+12, r25	; 0x0c
    1412:	8b 87       	std	Y+11, r24	; 0x0b
		find_optimal_path_for_MNP_with_several_neighbor_nodes(a, 6);
    1414:	66 e0       	ldi	r22, 0x06	; 6
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	ce 01       	movw	r24, r28
    141a:	01 96       	adiw	r24, 0x01	; 1
    141c:	ce de       	rcall	.-612    	; 0x11ba <find_optimal_path_for_MNP_with_several_neighbor_nodes>
		break;
    141e:	1c c0       	rjmp	.+56     	; 0x1458 <identify_neighbors_of_MNP+0x1f0>
		case 33:
		a[0] = 20;
    1420:	84 e1       	ldi	r24, 0x14	; 20
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	9a 83       	std	Y+2, r25	; 0x02
    1426:	89 83       	std	Y+1, r24	; 0x01
		a[1] = 36;
    1428:	84 e2       	ldi	r24, 0x24	; 36
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	9c 83       	std	Y+4, r25	; 0x04
    142e:	8b 83       	std	Y+3, r24	; 0x03
		a[2] = 37;
    1430:	85 e2       	ldi	r24, 0x25	; 37
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	9e 83       	std	Y+6, r25	; 0x06
    1436:	8d 83       	std	Y+5, r24	; 0x05
		a[3] = 38;
    1438:	86 e2       	ldi	r24, 0x26	; 38
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	98 87       	std	Y+8, r25	; 0x08
    143e:	8f 83       	std	Y+7, r24	; 0x07
		find_optimal_path_for_MNP_with_several_neighbor_nodes(a, 4);
    1440:	64 e0       	ldi	r22, 0x04	; 4
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	ce 01       	movw	r24, r28
    1446:	01 96       	adiw	r24, 0x01	; 1
    1448:	b8 de       	rcall	.-656    	; 0x11ba <find_optimal_path_for_MNP_with_several_neighbor_nodes>
		break;
    144a:	06 c0       	rjmp	.+12     	; 0x1458 <identify_neighbors_of_MNP+0x1f0>
		default: // For MNPs on the circular path there is only one nearest node
		destination_node = mnp - 1; // Since the node is indexed from 0, the node corresponding to MNP on the circular path will be one less than the MNP number
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	90 93 e3 1d 	sts	0x1DE3, r25	; 0x801de3 <destination_node+0x1>
    1452:	80 93 e2 1d 	sts	0x1DE2, r24	; 0x801de2 <destination_node>
		find_shortest_path();
    1456:	a8 dd       	rcall	.-1200   	; 0xfa8 <find_shortest_path>
	}

}
    1458:	2c 96       	adiw	r28, 0x0c	; 12
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	08 95       	ret

0000146a <mnp_assigner>:
		}
	}
}


void mnp_assigner(void) {
    146a:	2f 92       	push	r2
    146c:	3f 92       	push	r3
    146e:	4f 92       	push	r4
    1470:	5f 92       	push	r5
    1472:	6f 92       	push	r6
    1474:	7f 92       	push	r7
    1476:	8f 92       	push	r8
    1478:	9f 92       	push	r9
    147a:	af 92       	push	r10
    147c:	bf 92       	push	r11
    147e:	cf 92       	push	r12
    1480:	df 92       	push	r13
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29

	// accumulate previous length of path covered
	int master_total_path_length = 0;
	int slave_total_path_length = 0;
	int i, j = 0, k = 0;
	for (i = 0; i < MNP_list_length; i++) {
    148e:	80 91 14 1d 	lds	r24, 0x1D14	; 0x801d14 <MNP_list_length>
    1492:	90 91 15 1d 	lds	r25, 0x1D15	; 0x801d15 <MNP_list_length+0x1>
    1496:	18 16       	cp	r1, r24
    1498:	19 06       	cpc	r1, r25
    149a:	0c f0       	brlt	.+2      	; 0x149e <mnp_assigner+0x34>
    149c:	72 c0       	rjmp	.+228    	; 0x1582 <mnp_assigner+0x118>
    149e:	c4 ee       	ldi	r28, 0xE4	; 228
    14a0:	de e1       	ldi	r29, 0x1E	; 30
    14a2:	a1 2c       	mov	r10, r1
    14a4:	b1 2c       	mov	r11, r1
    14a6:	c1 2c       	mov	r12, r1
    14a8:	d1 2c       	mov	r13, r1
    14aa:	21 2c       	mov	r2, r1
    14ac:	31 2c       	mov	r3, r1
    14ae:	61 2c       	mov	r6, r1
    14b0:	71 2c       	mov	r7, r1
    14b2:	41 2c       	mov	r4, r1
    14b4:	51 2c       	mov	r5, r1
    14b6:	0f 2e       	mov	r0, r31
    14b8:	fc e0       	ldi	r31, 0x0C	; 12
    14ba:	ef 2e       	mov	r14, r31
    14bc:	f1 2c       	mov	r15, r1
    14be:	f0 2d       	mov	r31, r0
    14c0:	81 2c       	mov	r8, r1
    14c2:	91 2c       	mov	r9, r1
		// bot 1: Master
		source_node = master_source_node;
    14c4:	90 92 29 1f 	sts	0x1F29, r9	; 0x801f29 <source_node+0x1>
    14c8:	80 92 28 1f 	sts	0x1F28, r8	; 0x801f28 <source_node>
		identify_neighbors_of_MNP(MNP_list[i]);
    14cc:	88 81       	ld	r24, Y
    14ce:	99 81       	ldd	r25, Y+1	; 0x01
    14d0:	cb de       	rcall	.-618    	; 0x1268 <identify_neighbors_of_MNP>
		master_current_path_length = path_length;
		master_total_path_length += path_length;
    14d2:	00 91 16 1d 	lds	r16, 0x1D16	; 0x801d16 <path_length>
    14d6:	10 91 17 1d 	lds	r17, 0x1D17	; 0x801d17 <path_length+0x1>
    14da:	04 0d       	add	r16, r4
    14dc:	15 1d       	adc	r17, r5

		// bot 2: Slave
		source_node = slave_source_node;
    14de:	f0 92 29 1f 	sts	0x1F29, r15	; 0x801f29 <source_node+0x1>
    14e2:	e0 92 28 1f 	sts	0x1F28, r14	; 0x801f28 <source_node>
		identify_neighbors_of_MNP(MNP_list[i]);
    14e6:	88 81       	ld	r24, Y
    14e8:	99 81       	ldd	r25, Y+1	; 0x01
    14ea:	be de       	rcall	.-644    	; 0x1268 <identify_neighbors_of_MNP>
		slave_current_path_length = path_length;
		slave_total_path_length += path_length;
    14ec:	80 91 16 1d 	lds	r24, 0x1D16	; 0x801d16 <path_length>
    14f0:	90 91 17 1d 	lds	r25, 0x1D17	; 0x801d17 <path_length+0x1>
    14f4:	86 0d       	add	r24, r6
    14f6:	97 1d       	adc	r25, r7

		// compare the TOTAL path lengths
		if (master_total_path_length < slave_total_path_length) {
    14f8:	08 17       	cp	r16, r24
    14fa:	19 07       	cpc	r17, r25
    14fc:	dc f4       	brge	.+54     	; 0x1534 <mnp_assigner+0xca>
			// bot 1 is selected for current MNP
			master_mnp_list[j] = MNP_list[i];
    14fe:	f6 01       	movw	r30, r12
    1500:	ee 0f       	add	r30, r30
    1502:	ff 1f       	adc	r31, r31
    1504:	e2 5d       	subi	r30, 0xD2	; 210
    1506:	f0 4e       	sbci	r31, 0xE0	; 224
    1508:	88 81       	ld	r24, Y
    150a:	99 81       	ldd	r25, Y+1	; 0x01
    150c:	91 83       	std	Z+1, r25	; 0x01
    150e:	80 83       	st	Z, r24
			slave_total_path_length -= slave_current_path_length;

			// update source nodes
			master_source_node = destination_node;
    1510:	80 90 e2 1d 	lds	r8, 0x1DE2	; 0x801de2 <destination_node>
    1514:	90 90 e3 1d 	lds	r9, 0x1DE3	; 0x801de3 <destination_node+0x1>

			// counter
			master_mnp_list_length++;
    1518:	80 91 12 1d 	lds	r24, 0x1D12	; 0x801d12 <master_mnp_list_length>
    151c:	90 91 13 1d 	lds	r25, 0x1D13	; 0x801d13 <master_mnp_list_length+0x1>
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	90 93 13 1d 	sts	0x1D13, r25	; 0x801d13 <master_mnp_list_length+0x1>
    1526:	80 93 12 1d 	sts	0x1D12, r24	; 0x801d12 <master_mnp_list_length>
			j++;
    152a:	2f ef       	ldi	r18, 0xFF	; 255
    152c:	c2 1a       	sub	r12, r18
    152e:	d2 0a       	sbc	r13, r18
	for (i = 0; i < MNP_list_length; i++) {
		// bot 1: Master
		source_node = master_source_node;
		identify_neighbors_of_MNP(MNP_list[i]);
		master_current_path_length = path_length;
		master_total_path_length += path_length;
    1530:	28 01       	movw	r4, r16
    1532:	1b c0       	rjmp	.+54     	; 0x156a <mnp_assigner+0x100>

			// counter
			master_mnp_list_length++;
			j++;
			} else {
			slave_mnp_list[k] = MNP_list[i];
    1534:	f5 01       	movw	r30, r10
    1536:	ee 0f       	add	r30, r30
    1538:	ff 1f       	adc	r31, r31
    153a:	ec 5a       	subi	r30, 0xAC	; 172
    153c:	f1 4e       	sbci	r31, 0xE1	; 225
    153e:	28 81       	ld	r18, Y
    1540:	39 81       	ldd	r19, Y+1	; 0x01
    1542:	31 83       	std	Z+1, r19	; 0x01
    1544:	20 83       	st	Z, r18
			master_total_path_length -= master_current_path_length;

			// update source nodes
			slave_source_node = destination_node;
    1546:	e0 90 e2 1d 	lds	r14, 0x1DE2	; 0x801de2 <destination_node>
    154a:	f0 90 e3 1d 	lds	r15, 0x1DE3	; 0x801de3 <destination_node+0x1>

			// counter
			slave_mnp_list_length++;
    154e:	20 91 10 1d 	lds	r18, 0x1D10	; 0x801d10 <slave_mnp_list_length>
    1552:	30 91 11 1d 	lds	r19, 0x1D11	; 0x801d11 <slave_mnp_list_length+0x1>
    1556:	2f 5f       	subi	r18, 0xFF	; 255
    1558:	3f 4f       	sbci	r19, 0xFF	; 255
    155a:	30 93 11 1d 	sts	0x1D11, r19	; 0x801d11 <slave_mnp_list_length+0x1>
    155e:	20 93 10 1d 	sts	0x1D10, r18	; 0x801d10 <slave_mnp_list_length>
			k++;
    1562:	2f ef       	ldi	r18, 0xFF	; 255
    1564:	a2 1a       	sub	r10, r18
    1566:	b2 0a       	sbc	r11, r18

		// bot 2: Slave
		source_node = slave_source_node;
		identify_neighbors_of_MNP(MNP_list[i]);
		slave_current_path_length = path_length;
		slave_total_path_length += path_length;
    1568:	3c 01       	movw	r6, r24

	// accumulate previous length of path covered
	int master_total_path_length = 0;
	int slave_total_path_length = 0;
	int i, j = 0, k = 0;
	for (i = 0; i < MNP_list_length; i++) {
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	28 1a       	sub	r2, r24
    156e:	38 0a       	sbc	r3, r24
    1570:	22 96       	adiw	r28, 0x02	; 2
    1572:	80 91 14 1d 	lds	r24, 0x1D14	; 0x801d14 <MNP_list_length>
    1576:	90 91 15 1d 	lds	r25, 0x1D15	; 0x801d15 <MNP_list_length+0x1>
    157a:	28 16       	cp	r2, r24
    157c:	39 06       	cpc	r3, r25
    157e:	0c f4       	brge	.+2      	; 0x1582 <mnp_assigner+0x118>
    1580:	a1 cf       	rjmp	.-190    	; 0x14c4 <mnp_assigner+0x5a>

	}

	//printf("master total path length: %d\n", master_total_path_length);
	//printf("slave total path length: %d\n", slave_total_path_length);
}
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	df 90       	pop	r13
    1590:	cf 90       	pop	r12
    1592:	bf 90       	pop	r11
    1594:	af 90       	pop	r10
    1596:	9f 90       	pop	r9
    1598:	8f 90       	pop	r8
    159a:	7f 90       	pop	r7
    159c:	6f 90       	pop	r6
    159e:	5f 90       	pop	r5
    15a0:	4f 90       	pop	r4
    15a2:	3f 90       	pop	r3
    15a4:	2f 90       	pop	r2
    15a6:	08 95       	ret

000015a8 <turn_left>:
*				  3) If the center white line is not present on the black line then rotate robot left until center white line
*				     comes on the black line
* Example Call:	  turn_left()
*
*/
void turn_left(unsigned int degrees) {
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	ec 01       	movw	r28, r24
	forward_mm(35);
    15ae:	83 e2       	ldi	r24, 0x23	; 35
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	3d da       	rcall	.-2950   	; 0xa2e <forward_mm>
	TCCR5B = 0x0B;    //WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

//Function for velocity control
void velocity(unsigned char left_motor, unsigned char right_motor) {
	OCR5AL = (unsigned char) left_motor;
    15b4:	96 ee       	ldi	r25, 0xE6	; 230
    15b6:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char) right_motor;
    15ba:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
*/
void turn_left(unsigned int degrees) {
	forward_mm(35);
	unsigned char center = 0;
	velocity(230, 230);
	left_degrees(degrees); // rotate left by degree specified
    15be:	ce 01       	movw	r24, r28
    15c0:	82 db       	rcall	.-2300   	; 0xcc6 <left_degrees>
	center = ADC_Conversion(2); // read of white line sensor
    15c2:	82 e0       	ldi	r24, 0x02	; 2
    15c4:	f4 d8       	rcall	.-3608   	; 0x7ae <ADC_Conversion>
	if (center < 30) //check if center white line sensor is on black line or not
    15c6:	8e 31       	cpi	r24, 0x1E	; 30
    15c8:	48 f4       	brcc	.+18     	; 0x15dc <turn_left+0x34>
	{
		left(); //if center white line is not on black line then rotate left
    15ca:	47 d9       	rcall	.-3442   	; 0x85a <left>
		center = ADC_Conversion(2); //read values white line sensor
    15cc:	82 e0       	ldi	r24, 0x02	; 2
    15ce:	ef d8       	rcall	.-3618   	; 0x7ae <ADC_Conversion>
		while (center < 30) // keep turning left while center white line does not come on black line
    15d0:	8e 31       	cpi	r24, 0x1E	; 30
    15d2:	20 f4       	brcc	.+8      	; 0x15dc <turn_left+0x34>
		{
			center = ADC_Conversion(2); // while turning keep checking the white line sensor value
    15d4:	82 e0       	ldi	r24, 0x02	; 2
    15d6:	eb d8       	rcall	.-3626   	; 0x7ae <ADC_Conversion>
	center = ADC_Conversion(2); // read of white line sensor
	if (center < 30) //check if center white line sensor is on black line or not
	{
		left(); //if center white line is not on black line then rotate left
		center = ADC_Conversion(2); //read values white line sensor
		while (center < 30) // keep turning left while center white line does not come on black line
    15d8:	8e 31       	cpi	r24, 0x1E	; 30
    15da:	e0 f3       	brcs	.-8      	; 0x15d4 <turn_left+0x2c>
    15dc:	29 e9       	ldi	r18, 0x99	; 153
    15de:	89 e9       	ldi	r24, 0x99	; 153
    15e0:	93 e0       	ldi	r25, 0x03	; 3
    15e2:	21 50       	subi	r18, 0x01	; 1
    15e4:	80 40       	sbci	r24, 0x00	; 0
    15e6:	90 40       	sbci	r25, 0x00	; 0
    15e8:	e1 f7       	brne	.-8      	; 0x15e2 <turn_left+0x3a>
    15ea:	00 00       	nop
		{
			center = ADC_Conversion(2); // while turning keep checking the white line sensor value
		}
	}
	_delay_ms(80);
	right_degrees(5);
    15ec:	85 e0       	ldi	r24, 0x05	; 5
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	76 db       	rcall	.-2324   	; 0xcde <right_degrees>
	stop(); //stop after turning left
    15f2:	2d d9       	rcall	.-3494   	; 0x84e <stop>
    15f4:	2f ef       	ldi	r18, 0xFF	; 255
    15f6:	8f e7       	ldi	r24, 0x7F	; 127
    15f8:	96 e1       	ldi	r25, 0x16	; 22
    15fa:	21 50       	subi	r18, 0x01	; 1
    15fc:	80 40       	sbci	r24, 0x00	; 0
    15fe:	90 40       	sbci	r25, 0x00	; 0
    1600:	e1 f7       	brne	.-8      	; 0x15fa <turn_left+0x52>
    1602:	00 c0       	rjmp	.+0      	; 0x1604 <turn_left+0x5c>
    1604:	00 00       	nop
	_delay_ms(500);
}
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	08 95       	ret

0000160c <turn_right>:
*				  3) If the center white line is not present on the black line then rotate robot left until center white line
*				     comes on the black line
* Example Call:	  turn_right()
*
*/
void turn_right(unsigned int degrees) {
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	ec 01       	movw	r28, r24
	forward_mm(35);
    1612:	83 e2       	ldi	r24, 0x23	; 35
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	0b da       	rcall	.-3050   	; 0xa2e <forward_mm>
	TCCR5B = 0x0B;    //WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

//Function for velocity control
void velocity(unsigned char left_motor, unsigned char right_motor) {
	OCR5AL = (unsigned char) left_motor;
    1618:	96 ee       	ldi	r25, 0xE6	; 230
    161a:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char) right_motor;
    161e:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
*/
void turn_right(unsigned int degrees) {
	forward_mm(35);
	unsigned char center = 0;
	velocity(230, 230);
	right_degrees(degrees); // rotate right by degree specified
    1622:	ce 01       	movw	r24, r28
    1624:	5c db       	rcall	.-2376   	; 0xcde <right_degrees>
	center = ADC_Conversion(2); // read of white line sensor
    1626:	82 e0       	ldi	r24, 0x02	; 2
    1628:	c2 d8       	rcall	.-3708   	; 0x7ae <ADC_Conversion>
	if (center < 30) //check if center white line sensor is on black line or not
    162a:	8e 31       	cpi	r24, 0x1E	; 30
    162c:	48 f4       	brcc	.+18     	; 0x1640 <turn_right+0x34>
	{
		right(); //if center white line is not on black line then rotate right
    162e:	18 d9       	rcall	.-3536   	; 0x860 <right>
		center = ADC_Conversion(2); //read values white line sensor
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	bd d8       	rcall	.-3718   	; 0x7ae <ADC_Conversion>
		while (center < 30) // keep turning right while center white line does not come on black line
    1634:	8e 31       	cpi	r24, 0x1E	; 30
    1636:	20 f4       	brcc	.+8      	; 0x1640 <turn_right+0x34>
		{
			center = ADC_Conversion(2); // while turning keep checking the white line sensor value
    1638:	82 e0       	ldi	r24, 0x02	; 2
    163a:	b9 d8       	rcall	.-3726   	; 0x7ae <ADC_Conversion>
	center = ADC_Conversion(2); // read of white line sensor
	if (center < 30) //check if center white line sensor is on black line or not
	{
		right(); //if center white line is not on black line then rotate right
		center = ADC_Conversion(2); //read values white line sensor
		while (center < 30) // keep turning right while center white line does not come on black line
    163c:	8e 31       	cpi	r24, 0x1E	; 30
    163e:	e0 f3       	brcs	.-8      	; 0x1638 <turn_right+0x2c>
    1640:	29 e9       	ldi	r18, 0x99	; 153
    1642:	89 e9       	ldi	r24, 0x99	; 153
    1644:	93 e0       	ldi	r25, 0x03	; 3
    1646:	21 50       	subi	r18, 0x01	; 1
    1648:	80 40       	sbci	r24, 0x00	; 0
    164a:	90 40       	sbci	r25, 0x00	; 0
    164c:	e1 f7       	brne	.-8      	; 0x1646 <turn_right+0x3a>
    164e:	00 00       	nop
		{
			center = ADC_Conversion(2); // while turning keep checking the white line sensor value
		}
	}
	_delay_ms(80);
	left_degrees(5);
    1650:	85 e0       	ldi	r24, 0x05	; 5
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	38 db       	rcall	.-2448   	; 0xcc6 <left_degrees>
	stop(); //stop after turning left
    1656:	fb d8       	rcall	.-3594   	; 0x84e <stop>
    1658:	2f ef       	ldi	r18, 0xFF	; 255
    165a:	8f e7       	ldi	r24, 0x7F	; 127
    165c:	96 e1       	ldi	r25, 0x16	; 22
    165e:	21 50       	subi	r18, 0x01	; 1
    1660:	80 40       	sbci	r24, 0x00	; 0
    1662:	90 40       	sbci	r25, 0x00	; 0
    1664:	e1 f7       	brne	.-8      	; 0x165e <turn_right+0x52>
    1666:	00 c0       	rjmp	.+0      	; 0x1668 <turn_right+0x5c>
    1668:	00 00       	nop
	_delay_ms(500);
}
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	08 95       	ret

00001670 <bot_traversal>:
*
* Example Call:	bot_traversal()
{
*
*/
void bot_traversal() {
    1670:	2f 92       	push	r2
    1672:	3f 92       	push	r3
    1674:	4f 92       	push	r4
    1676:	5f 92       	push	r5
    1678:	6f 92       	push	r6
    167a:	7f 92       	push	r7
    167c:	8f 92       	push	r8
    167e:	9f 92       	push	r9
    1680:	af 92       	push	r10
    1682:	bf 92       	push	r11
    1684:	cf 92       	push	r12
    1686:	df 92       	push	r13
    1688:	ef 92       	push	r14
    168a:	ff 92       	push	r15
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
	HERE:
	for (int k = 0, j = path_length; k < path_length; k++, j--) {
    1694:	21 2c       	mov	r2, r1
		path_angle = rotation_angles[path[j]][path[j - 1]]; // Read the angle of the path from rotation_angles matrix
    1696:	0f 2e       	mov	r0, r31
    1698:	f0 e3       	ldi	r31, 0x30	; 48
    169a:	5f 2e       	mov	r5, r31
    169c:	f0 2d       	mov	r31, r0
						_delay_ms(1500);
						goto HERE;
					}
					left_servo_2(185);
					_delay_ms(1500);
					turn_left(360 - (bot_rotate_angle - 30));
    169e:	0f 2e       	mov	r0, r31
    16a0:	f6 e8       	ldi	r31, 0x86	; 134
    16a2:	6f 2e       	mov	r6, r31
    16a4:	77 24       	eor	r7, r7
    16a6:	73 94       	inc	r7
    16a8:	f0 2d       	mov	r31, r0
					turn_right(360 - (bot_rotate_angle - 30));
				}
				
				else
				{
					left_servo_2(180 - bot_rotate_angle);
    16aa:	0f 2e       	mov	r0, r31
    16ac:	f4 eb       	ldi	r31, 0xB4	; 180
    16ae:	3f 2e       	mov	r3, r31
    16b0:	f0 2d       	mov	r31, r0
				// rotate sharp sensor left
				
				
				if(bot_rotate_angle > 180)
				{
					right_servo_1(360 - bot_rotate_angle);
    16b2:	0f 2e       	mov	r0, r31
    16b4:	f8 e6       	ldi	r31, 0x68	; 104
    16b6:	4f 2e       	mov	r4, r31
    16b8:	f0 2d       	mov	r31, r0
{
*
*/
void bot_traversal() {
	HERE:
	for (int k = 0, j = path_length; k < path_length; k++, j--) {
    16ba:	c0 91 16 1d 	lds	r28, 0x1D16	; 0x801d16 <path_length>
    16be:	d0 91 17 1d 	lds	r29, 0x1D17	; 0x801d17 <path_length+0x1>
    16c2:	1c 16       	cp	r1, r28
    16c4:	1d 06       	cpc	r1, r29
    16c6:	0c f0       	brlt	.+2      	; 0x16ca <bot_traversal+0x5a>
    16c8:	32 c1       	rjmp	.+612    	; 0x192e <bot_traversal+0x2be>
    16ca:	4e 01       	movw	r8, r28
    16cc:	cc 0f       	add	r28, r28
    16ce:	dd 1f       	adc	r29, r29
    16d0:	c2 58       	subi	r28, 0x82	; 130
    16d2:	d2 4e       	sbci	r29, 0xE2	; 226
    16d4:	e2 2c       	mov	r14, r2
    16d6:	f1 2c       	mov	r15, r1
    16d8:	54 01       	movw	r10, r8
    16da:	ae 18       	sub	r10, r14
    16dc:	bf 08       	sbc	r11, r15
		path_angle = rotation_angles[path[j]][path[j - 1]]; // Read the angle of the path from rotation_angles matrix
    16de:	88 81       	ld	r24, Y
    16e0:	99 81       	ldd	r25, Y+1	; 0x01
    16e2:	22 97       	sbiw	r28, 0x02	; 2
    16e4:	6e 01       	movw	r12, r28
    16e6:	58 9e       	mul	r5, r24
    16e8:	f0 01       	movw	r30, r0
    16ea:	59 9e       	mul	r5, r25
    16ec:	f0 0d       	add	r31, r0
    16ee:	11 24       	eor	r1, r1
    16f0:	88 81       	ld	r24, Y
    16f2:	99 81       	ldd	r25, Y+1	; 0x01
    16f4:	e8 0f       	add	r30, r24
    16f6:	f9 1f       	adc	r31, r25
    16f8:	ee 0f       	add	r30, r30
    16fa:	ff 1f       	adc	r31, r31
    16fc:	e0 50       	subi	r30, 0x00	; 0
    16fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1700:	80 81       	ld	r24, Z
    1702:	91 81       	ldd	r25, Z+1	; 0x01
    1704:	90 93 0f 1d 	sts	0x1D0F, r25	; 0x801d0f <path_angle+0x1>
    1708:	80 93 0e 1d 	sts	0x1D0E, r24	; 0x801d0e <path_angle>
		int bot_rotate_angle = abs(path_angle - current_bot_angle); // calculate the rotation angle
    170c:	20 91 00 14 	lds	r18, 0x1400	; 0x801400 <current_bot_angle>
    1710:	30 91 01 14 	lds	r19, 0x1401	; 0x801401 <current_bot_angle+0x1>
    1714:	82 1b       	sub	r24, r18
    1716:	93 0b       	sbc	r25, r19
    1718:	ac 01       	movw	r20, r24
    171a:	22 f4       	brpl	.+8      	; 0x1724 <bot_traversal+0xb4>
    171c:	44 27       	eor	r20, r20
    171e:	55 27       	eor	r21, r21
    1720:	48 1b       	sub	r20, r24
    1722:	59 0b       	sbc	r21, r25
    1724:	8a 01       	movw	r16, r20
		lcd_print(2,6,bot_rotate_angle,3);
    1726:	23 e0       	ldi	r18, 0x03	; 3
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	66 e0       	ldi	r22, 0x06	; 6
    172c:	82 e0       	ldi	r24, 0x02	; 2
    172e:	0e 94 99 01 	call	0x332	; 0x332 <lcd_print>
		if (bot_rotate_angle > 15) // if angle is not greater than 15 degrees then don't rotate
    1732:	00 31       	cpi	r16, 0x10	; 16
    1734:	11 05       	cpc	r17, r1
    1736:	0c f4       	brge	.+2      	; 0x173a <bot_traversal+0xca>
    1738:	d3 c0       	rjmp	.+422    	; 0x18e0 <bot_traversal+0x270>
		{
			if (current_bot_angle > path_angle)
    173a:	20 91 00 14 	lds	r18, 0x1400	; 0x801400 <current_bot_angle>
    173e:	30 91 01 14 	lds	r19, 0x1401	; 0x801401 <current_bot_angle+0x1>
    1742:	80 91 0e 1d 	lds	r24, 0x1D0E	; 0x801d0e <path_angle>
    1746:	90 91 0f 1d 	lds	r25, 0x1D0F	; 0x801d0f <path_angle+0x1>
    174a:	82 17       	cp	r24, r18
    174c:	93 07       	cpc	r25, r19
    174e:	0c f0       	brlt	.+2      	; 0x1752 <bot_traversal+0xe2>
    1750:	64 c0       	rjmp	.+200    	; 0x181a <bot_traversal+0x1aa>
			{
				// rotate sharp sensor left
				
				
				if(bot_rotate_angle > 180)
    1752:	05 3b       	cpi	r16, 0xB5	; 181
    1754:	11 05       	cpc	r17, r1
    1756:	8c f1       	brlt	.+98     	; 0x17ba <bot_traversal+0x14a>
				{
					right_servo_1(360 - bot_rotate_angle);
    1758:	84 2d       	mov	r24, r4
    175a:	80 1b       	sub	r24, r16
    175c:	3e db       	rcall	.-2436   	; 0xdda <right_servo_1>
    175e:	2f ef       	ldi	r18, 0xFF	; 255
    1760:	8f e7       	ldi	r24, 0x7F	; 127
    1762:	93 e4       	ldi	r25, 0x43	; 67
    1764:	21 50       	subi	r18, 0x01	; 1
    1766:	80 40       	sbci	r24, 0x00	; 0
    1768:	90 40       	sbci	r25, 0x00	; 0
    176a:	e1 f7       	brne	.-8      	; 0x1764 <bot_traversal+0xf4>
    176c:	00 c0       	rjmp	.+0      	; 0x176e <bot_traversal+0xfe>
    176e:	00 00       	nop
					_delay_ms(1500);
					if (check_path(path[j], path[j - 1], j)) // check for obstacle between the current and next nodes
    1770:	f6 01       	movw	r30, r12
    1772:	60 81       	ld	r22, Z
    1774:	71 81       	ldd	r23, Z+1	; 0x01
    1776:	a5 01       	movw	r20, r10
    1778:	82 81       	ldd	r24, Z+2	; 0x02
    177a:	93 81       	ldd	r25, Z+3	; 0x03
    177c:	31 dc       	rcall	.-1950   	; 0xfe0 <check_path>
    177e:	89 2b       	or	r24, r25
    1780:	61 f0       	breq	.+24     	; 0x179a <bot_traversal+0x12a>
					{
						right_servo_1(5);
    1782:	85 e0       	ldi	r24, 0x05	; 5
    1784:	2a db       	rcall	.-2476   	; 0xdda <right_servo_1>
    1786:	ff ef       	ldi	r31, 0xFF	; 255
    1788:	2f e7       	ldi	r18, 0x7F	; 127
    178a:	83 e4       	ldi	r24, 0x43	; 67
    178c:	f1 50       	subi	r31, 0x01	; 1
    178e:	20 40       	sbci	r18, 0x00	; 0
    1790:	80 40       	sbci	r24, 0x00	; 0
    1792:	e1 f7       	brne	.-8      	; 0x178c <bot_traversal+0x11c>
    1794:	00 c0       	rjmp	.+0      	; 0x1796 <bot_traversal+0x126>
    1796:	00 00       	nop
    1798:	90 cf       	rjmp	.-224    	; 0x16ba <bot_traversal+0x4a>
						_delay_ms(1500);
						goto HERE;
					}
					right_servo_1(5);
    179a:	85 e0       	ldi	r24, 0x05	; 5
    179c:	1e db       	rcall	.-2500   	; 0xdda <right_servo_1>
    179e:	9f ef       	ldi	r25, 0xFF	; 255
    17a0:	ef e7       	ldi	r30, 0x7F	; 127
    17a2:	f3 e4       	ldi	r31, 0x43	; 67
    17a4:	91 50       	subi	r25, 0x01	; 1
    17a6:	e0 40       	sbci	r30, 0x00	; 0
    17a8:	f0 40       	sbci	r31, 0x00	; 0
    17aa:	e1 f7       	brne	.-8      	; 0x17a4 <bot_traversal+0x134>
    17ac:	00 c0       	rjmp	.+0      	; 0x17ae <bot_traversal+0x13e>
    17ae:	00 00       	nop
					_delay_ms(1500);
					turn_right(360 - (bot_rotate_angle - 30));
    17b0:	c3 01       	movw	r24, r6
    17b2:	80 1b       	sub	r24, r16
    17b4:	91 0b       	sbc	r25, r17
    17b6:	2a df       	rcall	.-428    	; 0x160c <turn_right>
    17b8:	9d c0       	rjmp	.+314    	; 0x18f4 <bot_traversal+0x284>
				}
				
				else
				{
					left_servo_2(180 - bot_rotate_angle);
    17ba:	83 2d       	mov	r24, r3
    17bc:	80 1b       	sub	r24, r16
    17be:	24 db       	rcall	.-2488   	; 0xe08 <left_servo_2>
    17c0:	2f ef       	ldi	r18, 0xFF	; 255
    17c2:	8f e7       	ldi	r24, 0x7F	; 127
    17c4:	93 e4       	ldi	r25, 0x43	; 67
    17c6:	21 50       	subi	r18, 0x01	; 1
    17c8:	80 40       	sbci	r24, 0x00	; 0
    17ca:	90 40       	sbci	r25, 0x00	; 0
    17cc:	e1 f7       	brne	.-8      	; 0x17c6 <bot_traversal+0x156>
    17ce:	00 c0       	rjmp	.+0      	; 0x17d0 <bot_traversal+0x160>
    17d0:	00 00       	nop
					_delay_ms(1500);
					if (check_path(path[j], path[j - 1], j)) // check for obstacle between the current and next nodes
    17d2:	f6 01       	movw	r30, r12
    17d4:	60 81       	ld	r22, Z
    17d6:	71 81       	ldd	r23, Z+1	; 0x01
    17d8:	a5 01       	movw	r20, r10
    17da:	82 81       	ldd	r24, Z+2	; 0x02
    17dc:	93 81       	ldd	r25, Z+3	; 0x03
    17de:	00 dc       	rcall	.-2048   	; 0xfe0 <check_path>
    17e0:	89 2b       	or	r24, r25
    17e2:	61 f0       	breq	.+24     	; 0x17fc <bot_traversal+0x18c>
					{
						left_servo_2(185);
    17e4:	89 eb       	ldi	r24, 0xB9	; 185
    17e6:	10 db       	rcall	.-2528   	; 0xe08 <left_servo_2>
    17e8:	ff ef       	ldi	r31, 0xFF	; 255
    17ea:	2f e7       	ldi	r18, 0x7F	; 127
    17ec:	83 e4       	ldi	r24, 0x43	; 67
    17ee:	f1 50       	subi	r31, 0x01	; 1
    17f0:	20 40       	sbci	r18, 0x00	; 0
    17f2:	80 40       	sbci	r24, 0x00	; 0
    17f4:	e1 f7       	brne	.-8      	; 0x17ee <bot_traversal+0x17e>
    17f6:	00 c0       	rjmp	.+0      	; 0x17f8 <bot_traversal+0x188>
    17f8:	00 00       	nop
    17fa:	5f cf       	rjmp	.-322    	; 0x16ba <bot_traversal+0x4a>
						_delay_ms(1500);
						goto HERE;
					}
					left_servo_2(185);
    17fc:	89 eb       	ldi	r24, 0xB9	; 185
    17fe:	04 db       	rcall	.-2552   	; 0xe08 <left_servo_2>
    1800:	9f ef       	ldi	r25, 0xFF	; 255
    1802:	ef e7       	ldi	r30, 0x7F	; 127
    1804:	f3 e4       	ldi	r31, 0x43	; 67
    1806:	91 50       	subi	r25, 0x01	; 1
    1808:	e0 40       	sbci	r30, 0x00	; 0
    180a:	f0 40       	sbci	r31, 0x00	; 0
    180c:	e1 f7       	brne	.-8      	; 0x1806 <bot_traversal+0x196>
    180e:	00 c0       	rjmp	.+0      	; 0x1810 <bot_traversal+0x1a0>
    1810:	00 00       	nop
					_delay_ms(1500);
					turn_left(bot_rotate_angle - 30);
    1812:	c8 01       	movw	r24, r16
    1814:	4e 97       	sbiw	r24, 0x1e	; 30
    1816:	c8 de       	rcall	.-624    	; 0x15a8 <turn_left>
    1818:	6d c0       	rjmp	.+218    	; 0x18f4 <bot_traversal+0x284>
			}
			else
			{
				// rotate sharp sensor right

				if(bot_rotate_angle > 180)
    181a:	05 3b       	cpi	r16, 0xB5	; 181
    181c:	11 05       	cpc	r17, r1
    181e:	8c f1       	brlt	.+98     	; 0x1882 <bot_traversal+0x212>
				{
					left_servo_2(360 - (180 - bot_rotate_angle));
    1820:	84 eb       	ldi	r24, 0xB4	; 180
    1822:	80 0f       	add	r24, r16
    1824:	f1 da       	rcall	.-2590   	; 0xe08 <left_servo_2>
    1826:	2f ef       	ldi	r18, 0xFF	; 255
    1828:	8f e7       	ldi	r24, 0x7F	; 127
    182a:	93 e4       	ldi	r25, 0x43	; 67
    182c:	21 50       	subi	r18, 0x01	; 1
    182e:	80 40       	sbci	r24, 0x00	; 0
    1830:	90 40       	sbci	r25, 0x00	; 0
    1832:	e1 f7       	brne	.-8      	; 0x182c <bot_traversal+0x1bc>
    1834:	00 c0       	rjmp	.+0      	; 0x1836 <bot_traversal+0x1c6>
    1836:	00 00       	nop
					_delay_ms(1500);
					if (check_path(path[j], path[j - 1], j)) // check for obstacle between the current and next nodes
    1838:	f6 01       	movw	r30, r12
    183a:	60 81       	ld	r22, Z
    183c:	71 81       	ldd	r23, Z+1	; 0x01
    183e:	a5 01       	movw	r20, r10
    1840:	82 81       	ldd	r24, Z+2	; 0x02
    1842:	93 81       	ldd	r25, Z+3	; 0x03
    1844:	cd db       	rcall	.-2150   	; 0xfe0 <check_path>
    1846:	89 2b       	or	r24, r25
    1848:	61 f0       	breq	.+24     	; 0x1862 <bot_traversal+0x1f2>
					{
						left_servo_2(185);
    184a:	89 eb       	ldi	r24, 0xB9	; 185
    184c:	dd da       	rcall	.-2630   	; 0xe08 <left_servo_2>
    184e:	ff ef       	ldi	r31, 0xFF	; 255
    1850:	2f e7       	ldi	r18, 0x7F	; 127
    1852:	83 e4       	ldi	r24, 0x43	; 67
    1854:	f1 50       	subi	r31, 0x01	; 1
    1856:	20 40       	sbci	r18, 0x00	; 0
    1858:	80 40       	sbci	r24, 0x00	; 0
    185a:	e1 f7       	brne	.-8      	; 0x1854 <bot_traversal+0x1e4>
    185c:	00 c0       	rjmp	.+0      	; 0x185e <bot_traversal+0x1ee>
    185e:	00 00       	nop
    1860:	2c cf       	rjmp	.-424    	; 0x16ba <bot_traversal+0x4a>
						_delay_ms(1500);
						goto HERE;
					}
					left_servo_2(185);
    1862:	89 eb       	ldi	r24, 0xB9	; 185
    1864:	d1 da       	rcall	.-2654   	; 0xe08 <left_servo_2>
    1866:	9f ef       	ldi	r25, 0xFF	; 255
    1868:	ef e7       	ldi	r30, 0x7F	; 127
    186a:	f3 e4       	ldi	r31, 0x43	; 67
    186c:	91 50       	subi	r25, 0x01	; 1
    186e:	e0 40       	sbci	r30, 0x00	; 0
    1870:	f0 40       	sbci	r31, 0x00	; 0
    1872:	e1 f7       	brne	.-8      	; 0x186c <bot_traversal+0x1fc>
    1874:	00 c0       	rjmp	.+0      	; 0x1876 <bot_traversal+0x206>
    1876:	00 00       	nop
					_delay_ms(1500);
					turn_left(360 - (bot_rotate_angle - 30));
    1878:	c3 01       	movw	r24, r6
    187a:	80 1b       	sub	r24, r16
    187c:	91 0b       	sbc	r25, r17
    187e:	94 de       	rcall	.-728    	; 0x15a8 <turn_left>
    1880:	39 c0       	rjmp	.+114    	; 0x18f4 <bot_traversal+0x284>
				}
				
				else
				{
					right_servo_1(bot_rotate_angle);
    1882:	80 2f       	mov	r24, r16
    1884:	aa da       	rcall	.-2732   	; 0xdda <right_servo_1>
    1886:	2f ef       	ldi	r18, 0xFF	; 255
    1888:	8f e7       	ldi	r24, 0x7F	; 127
    188a:	93 e4       	ldi	r25, 0x43	; 67
    188c:	21 50       	subi	r18, 0x01	; 1
    188e:	80 40       	sbci	r24, 0x00	; 0
    1890:	90 40       	sbci	r25, 0x00	; 0
    1892:	e1 f7       	brne	.-8      	; 0x188c <bot_traversal+0x21c>
    1894:	00 c0       	rjmp	.+0      	; 0x1896 <bot_traversal+0x226>
    1896:	00 00       	nop
					_delay_ms(1500);
					if (check_path(path[j], path[j - 1], j)) // check for obstacle between the current and next nodes
    1898:	f6 01       	movw	r30, r12
    189a:	60 81       	ld	r22, Z
    189c:	71 81       	ldd	r23, Z+1	; 0x01
    189e:	a5 01       	movw	r20, r10
    18a0:	82 81       	ldd	r24, Z+2	; 0x02
    18a2:	93 81       	ldd	r25, Z+3	; 0x03
    18a4:	9d db       	rcall	.-2246   	; 0xfe0 <check_path>
    18a6:	89 2b       	or	r24, r25
    18a8:	61 f0       	breq	.+24     	; 0x18c2 <bot_traversal+0x252>
					{
						right_servo_1(5);
    18aa:	85 e0       	ldi	r24, 0x05	; 5
    18ac:	96 da       	rcall	.-2772   	; 0xdda <right_servo_1>
    18ae:	ff ef       	ldi	r31, 0xFF	; 255
    18b0:	2f e7       	ldi	r18, 0x7F	; 127
    18b2:	83 e4       	ldi	r24, 0x43	; 67
    18b4:	f1 50       	subi	r31, 0x01	; 1
    18b6:	20 40       	sbci	r18, 0x00	; 0
    18b8:	80 40       	sbci	r24, 0x00	; 0
    18ba:	e1 f7       	brne	.-8      	; 0x18b4 <bot_traversal+0x244>
    18bc:	00 c0       	rjmp	.+0      	; 0x18be <bot_traversal+0x24e>
    18be:	00 00       	nop
    18c0:	fc ce       	rjmp	.-520    	; 0x16ba <bot_traversal+0x4a>
						_delay_ms(1500);
						goto HERE;
					}
					right_servo_1(5);
    18c2:	85 e0       	ldi	r24, 0x05	; 5
    18c4:	8a da       	rcall	.-2796   	; 0xdda <right_servo_1>
    18c6:	9f ef       	ldi	r25, 0xFF	; 255
    18c8:	ef e7       	ldi	r30, 0x7F	; 127
    18ca:	f3 e4       	ldi	r31, 0x43	; 67
    18cc:	91 50       	subi	r25, 0x01	; 1
    18ce:	e0 40       	sbci	r30, 0x00	; 0
    18d0:	f0 40       	sbci	r31, 0x00	; 0
    18d2:	e1 f7       	brne	.-8      	; 0x18cc <bot_traversal+0x25c>
    18d4:	00 c0       	rjmp	.+0      	; 0x18d6 <bot_traversal+0x266>
    18d6:	00 00       	nop
					_delay_ms(1500);
					turn_right(bot_rotate_angle - 30);
    18d8:	c8 01       	movw	r24, r16
    18da:	4e 97       	sbiw	r24, 0x1e	; 30
    18dc:	97 de       	rcall	.-722    	; 0x160c <turn_right>
    18de:	0a c0       	rjmp	.+20     	; 0x18f4 <bot_traversal+0x284>
				}
			}
		}
		else
		{
			if (check_path(path[j], path[j - 1], j)) // check for obstacle between the current and next nodes
    18e0:	f6 01       	movw	r30, r12
    18e2:	60 81       	ld	r22, Z
    18e4:	71 81       	ldd	r23, Z+1	; 0x01
    18e6:	a5 01       	movw	r20, r10
    18e8:	82 81       	ldd	r24, Z+2	; 0x02
    18ea:	93 81       	ldd	r25, Z+3	; 0x03
    18ec:	79 db       	rcall	.-2318   	; 0xfe0 <check_path>
    18ee:	89 2b       	or	r24, r25
    18f0:	09 f0       	breq	.+2      	; 0x18f4 <bot_traversal+0x284>
    18f2:	e3 ce       	rjmp	.-570    	; 0x16ba <bot_traversal+0x4a>
			{
				goto HERE;
			}
		}
		current_bot_angle = path_angle; // set the current angle of robot to the path angle
    18f4:	80 91 0e 1d 	lds	r24, 0x1D0E	; 0x801d0e <path_angle>
    18f8:	90 91 0f 1d 	lds	r25, 0x1D0F	; 0x801d0f <path_angle+0x1>
    18fc:	90 93 01 14 	sts	0x1401, r25	; 0x801401 <current_bot_angle+0x1>
    1900:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <current_bot_angle>
		follow(); // traverse to the next node
    1904:	9d d8       	rcall	.-3782   	; 0xa40 <follow>
    1906:	ff ef       	ldi	r31, 0xFF	; 255
    1908:	2f e7       	ldi	r18, 0x7F	; 127
    190a:	86 e1       	ldi	r24, 0x16	; 22
    190c:	f1 50       	subi	r31, 0x01	; 1
    190e:	20 40       	sbci	r18, 0x00	; 0
    1910:	80 40       	sbci	r24, 0x00	; 0
    1912:	e1 f7       	brne	.-8      	; 0x190c <bot_traversal+0x29c>
    1914:	00 c0       	rjmp	.+0      	; 0x1916 <bot_traversal+0x2a6>
    1916:	00 00       	nop
{
*
*/
void bot_traversal() {
	HERE:
	for (int k = 0, j = path_length; k < path_length; k++, j--) {
    1918:	9f ef       	ldi	r25, 0xFF	; 255
    191a:	e9 1a       	sub	r14, r25
    191c:	f9 0a       	sbc	r15, r25
    191e:	80 91 16 1d 	lds	r24, 0x1D16	; 0x801d16 <path_length>
    1922:	90 91 17 1d 	lds	r25, 0x1D17	; 0x801d17 <path_length+0x1>
    1926:	e8 16       	cp	r14, r24
    1928:	f9 06       	cpc	r15, r25
    192a:	0c f4       	brge	.+2      	; 0x192e <bot_traversal+0x2be>
    192c:	d5 ce       	rjmp	.-598    	; 0x16d8 <bot_traversal+0x68>
		current_bot_angle = path_angle; // set the current angle of robot to the path angle
		follow(); // traverse to the next node
		_delay_ms(500);
	}

	source_node = path[0];
    192e:	80 91 7e 1d 	lds	r24, 0x1D7E	; 0x801d7e <path>
    1932:	90 91 7f 1d 	lds	r25, 0x1D7F	; 0x801d7f <path+0x1>
    1936:	90 93 29 1f 	sts	0x1F29, r25	; 0x801f29 <source_node+0x1>
    193a:	80 93 28 1f 	sts	0x1F28, r24	; 0x801f28 <source_node>

	return;
}
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	1f 91       	pop	r17
    1944:	0f 91       	pop	r16
    1946:	ff 90       	pop	r15
    1948:	ef 90       	pop	r14
    194a:	df 90       	pop	r13
    194c:	cf 90       	pop	r12
    194e:	bf 90       	pop	r11
    1950:	af 90       	pop	r10
    1952:	9f 90       	pop	r9
    1954:	8f 90       	pop	r8
    1956:	7f 90       	pop	r7
    1958:	6f 90       	pop	r6
    195a:	5f 90       	pop	r5
    195c:	4f 90       	pop	r4
    195e:	3f 90       	pop	r3
    1960:	2f 90       	pop	r2
    1962:	08 95       	ret

00001964 <slave_com>:
	//printf("slave total path length: %d\n", slave_total_path_length);
}


void slave_com()
{
    1964:	7f 92       	push	r7
    1966:	8f 92       	push	r8
    1968:	9f 92       	push	r9
    196a:	af 92       	push	r10
    196c:	bf 92       	push	r11
    196e:	cf 92       	push	r12
    1970:	df 92       	push	r13
    1972:	ef 92       	push	r14
    1974:	ff 92       	push	r15
    1976:	0f 93       	push	r16
    1978:	1f 93       	push	r17
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
	buzzer_on();
    197e:	29 d8       	rcall	.-4014   	; 0x9d2 <buzzer_on>
    1980:	2f ef       	ldi	r18, 0xFF	; 255
    1982:	8f ef       	ldi	r24, 0xFF	; 255
    1984:	99 e5       	ldi	r25, 0x59	; 89
    1986:	21 50       	subi	r18, 0x01	; 1
    1988:	80 40       	sbci	r24, 0x00	; 0
    198a:	90 40       	sbci	r25, 0x00	; 0
    198c:	e1 f7       	brne	.-8      	; 0x1986 <slave_com+0x22>
    198e:	00 c0       	rjmp	.+0      	; 0x1990 <slave_com+0x2c>
    1990:	00 00       	nop
	_delay_ms(2000);
	buzzer_off();
    1992:	23 d8       	rcall	.-4026   	; 0x9da <buzzer_off>
	int slave_index = 0;
	track_current_mnp_index = 0;
    1994:	10 92 e5 1d 	sts	0x1DE5, r1	; 0x801de5 <track_current_mnp_index+0x1>
    1998:	10 92 e4 1d 	sts	0x1DE4, r1	; 0x801de4 <track_current_mnp_index>
	// go to master_mnp_list[j]

	for(slave_index = 0; slave_index < slave_mnp_list_length; slave_index ++)
    199c:	80 91 10 1d 	lds	r24, 0x1D10	; 0x801d10 <slave_mnp_list_length>
    19a0:	90 91 11 1d 	lds	r25, 0x1D11	; 0x801d11 <slave_mnp_list_length+0x1>
    19a4:	18 16       	cp	r1, r24
    19a6:	19 06       	cpc	r1, r25
    19a8:	0c f0       	brlt	.+2      	; 0x19ac <slave_com+0x48>
    19aa:	8e c0       	rjmp	.+284    	; 0x1ac8 <slave_com+0x164>
    19ac:	04 e5       	ldi	r16, 0x54	; 84
    19ae:	1e e1       	ldi	r17, 0x1E	; 30
    19b0:	e1 2c       	mov	r14, r1
    19b2:	f1 2c       	mov	r15, r1
				//play_note(slave_mnp_list[slave_index]);
				buzzer_on();
				_delay_ms(2000);
				buzzer_off();
				track_current_mnp_index++;  // now select next mnp from MNP_list
				flag_tx = 253;
    19b4:	0f 2e       	mov	r0, r31
    19b6:	fd ef       	ldi	r31, 0xFD	; 253
    19b8:	8f 2e       	mov	r8, r31
    19ba:	91 2c       	mov	r9, r1
    19bc:	f0 2d       	mov	r31, r0
				UDR0 = 253;
    19be:	0f 2e       	mov	r0, r31
    19c0:	f6 ec       	ldi	r31, 0xC6	; 198
    19c2:	cf 2e       	mov	r12, r31
    19c4:	d1 2c       	mov	r13, r1
    19c6:	f0 2d       	mov	r31, r0
    19c8:	0f 2e       	mov	r0, r31
    19ca:	fd ef       	ldi	r31, 0xFD	; 253
    19cc:	7f 2e       	mov	r7, r31
    19ce:	f0 2d       	mov	r31, r0
				_delay_ms(100);
				UDR0 = track_current_mnp_index; // send current mnp to slave robot
    19d0:	0f 2e       	mov	r0, r31
    19d2:	f4 ee       	ldi	r31, 0xE4	; 228
    19d4:	af 2e       	mov	r10, r31
    19d6:	fd e1       	ldi	r31, 0x1D	; 29
    19d8:	bf 2e       	mov	r11, r31
    19da:	f0 2d       	mov	r31, r0
    19dc:	e8 01       	movw	r28, r16
	track_current_mnp_index = 0;
	// go to master_mnp_list[j]

	for(slave_index = 0; slave_index < slave_mnp_list_length; slave_index ++)
	{
		lcd_print(2, 1 , slave_mnp_list[slave_index], 2 );
    19de:	48 81       	ld	r20, Y
    19e0:	59 81       	ldd	r21, Y+1	; 0x01
    19e2:	22 e0       	ldi	r18, 0x02	; 2
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	61 e0       	ldi	r22, 0x01	; 1
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	0e 94 99 01 	call	0x332	; 0x332 <lcd_print>
		identify_neighbors_of_MNP(slave_mnp_list[slave_index]);
    19ee:	88 81       	ld	r24, Y
    19f0:	99 81       	ldd	r25, Y+1	; 0x01
    19f2:	3a dc       	rcall	.-1932   	; 0x1268 <identify_neighbors_of_MNP>
		bot_traversal();
    19f4:	3d de       	rcall	.-902    	; 0x1670 <bot_traversal>
		while (1)
		{			
			if(slave_mnp_list[slave_index] == MNP_list[track_current_mnp_index])
    19f6:	e0 91 e4 1d 	lds	r30, 0x1DE4	; 0x801de4 <track_current_mnp_index>
    19fa:	f0 91 e5 1d 	lds	r31, 0x1DE5	; 0x801de5 <track_current_mnp_index+0x1>
    19fe:	ee 0f       	add	r30, r30
    1a00:	ff 1f       	adc	r31, r31
    1a02:	ec 51       	subi	r30, 0x1C	; 28
    1a04:	f1 4e       	sbci	r31, 0xE1	; 225
    1a06:	28 81       	ld	r18, Y
    1a08:	39 81       	ldd	r19, Y+1	; 0x01
    1a0a:	80 81       	ld	r24, Z
    1a0c:	91 81       	ldd	r25, Z+1	; 0x01
    1a0e:	28 17       	cp	r18, r24
    1a10:	39 07       	cpc	r19, r25
    1a12:	09 f0       	breq	.+2      	; 0x1a16 <slave_com+0xb2>
    1a14:	40 c0       	rjmp	.+128    	; 0x1a96 <slave_com+0x132>
			{
				//play_note(slave_mnp_list[slave_index]);
				buzzer_on();
    1a16:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <buzzer_on>
    1a1a:	af ef       	ldi	r26, 0xFF	; 255
    1a1c:	bf ef       	ldi	r27, 0xFF	; 255
    1a1e:	e9 e5       	ldi	r30, 0x59	; 89
    1a20:	a1 50       	subi	r26, 0x01	; 1
    1a22:	b0 40       	sbci	r27, 0x00	; 0
    1a24:	e0 40       	sbci	r30, 0x00	; 0
    1a26:	e1 f7       	brne	.-8      	; 0x1a20 <slave_com+0xbc>
    1a28:	00 c0       	rjmp	.+0      	; 0x1a2a <slave_com+0xc6>
    1a2a:	00 00       	nop
				_delay_ms(2000);
				buzzer_off();
    1a2c:	0e 94 ed 04 	call	0x9da	; 0x9da <buzzer_off>
				track_current_mnp_index++;  // now select next mnp from MNP_list
    1a30:	80 91 e4 1d 	lds	r24, 0x1DE4	; 0x801de4 <track_current_mnp_index>
    1a34:	90 91 e5 1d 	lds	r25, 0x1DE5	; 0x801de5 <track_current_mnp_index+0x1>
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	90 93 e5 1d 	sts	0x1DE5, r25	; 0x801de5 <track_current_mnp_index+0x1>
    1a3e:	80 93 e4 1d 	sts	0x1DE4, r24	; 0x801de4 <track_current_mnp_index>
				flag_tx = 253;
    1a42:	90 92 53 1e 	sts	0x1E53, r9	; 0x801e53 <flag_tx+0x1>
    1a46:	80 92 52 1e 	sts	0x1E52, r8	; 0x801e52 <flag_tx>
				UDR0 = 253;
    1a4a:	d6 01       	movw	r26, r12
    1a4c:	7c 92       	st	X, r7
    1a4e:	bf ef       	ldi	r27, 0xFF	; 255
    1a50:	ef e7       	ldi	r30, 0x7F	; 127
    1a52:	f4 e0       	ldi	r31, 0x04	; 4
    1a54:	b1 50       	subi	r27, 0x01	; 1
    1a56:	e0 40       	sbci	r30, 0x00	; 0
    1a58:	f0 40       	sbci	r31, 0x00	; 0
    1a5a:	e1 f7       	brne	.-8      	; 0x1a54 <slave_com+0xf0>
    1a5c:	00 c0       	rjmp	.+0      	; 0x1a5e <slave_com+0xfa>
    1a5e:	00 00       	nop
				_delay_ms(100);
				UDR0 = track_current_mnp_index; // send current mnp to slave robot
    1a60:	d5 01       	movw	r26, r10
    1a62:	8c 91       	ld	r24, X
    1a64:	f6 01       	movw	r30, r12
    1a66:	80 83       	st	Z, r24
    1a68:	ff ef       	ldi	r31, 0xFF	; 255
    1a6a:	2f e7       	ldi	r18, 0x7F	; 127
    1a6c:	84 e0       	ldi	r24, 0x04	; 4
    1a6e:	f1 50       	subi	r31, 0x01	; 1
    1a70:	20 40       	sbci	r18, 0x00	; 0
    1a72:	80 40       	sbci	r24, 0x00	; 0
    1a74:	e1 f7       	brne	.-8      	; 0x1a6e <slave_com+0x10a>
    1a76:	00 c0       	rjmp	.+0      	; 0x1a78 <slave_com+0x114>
    1a78:	00 00       	nop
	buzzer_off();
	int slave_index = 0;
	track_current_mnp_index = 0;
	// go to master_mnp_list[j]

	for(slave_index = 0; slave_index < slave_mnp_list_length; slave_index ++)
    1a7a:	9f ef       	ldi	r25, 0xFF	; 255
    1a7c:	e9 1a       	sub	r14, r25
    1a7e:	f9 0a       	sbc	r15, r25
    1a80:	0e 5f       	subi	r16, 0xFE	; 254
    1a82:	1f 4f       	sbci	r17, 0xFF	; 255
    1a84:	80 91 10 1d 	lds	r24, 0x1D10	; 0x801d10 <slave_mnp_list_length>
    1a88:	90 91 11 1d 	lds	r25, 0x1D11	; 0x801d11 <slave_mnp_list_length+0x1>
    1a8c:	e8 16       	cp	r14, r24
    1a8e:	f9 06       	cpc	r15, r25
    1a90:	0c f4       	brge	.+2      	; 0x1a94 <slave_com+0x130>
    1a92:	a4 cf       	rjmp	.-184    	; 0x19dc <slave_com+0x78>
    1a94:	19 c0       	rjmp	.+50     	; 0x1ac8 <slave_com+0x164>
    1a96:	af ef       	ldi	r26, 0xFF	; 255
    1a98:	bf e7       	ldi	r27, 0x7F	; 127
    1a9a:	e4 e0       	ldi	r30, 0x04	; 4
    1a9c:	a1 50       	subi	r26, 0x01	; 1
    1a9e:	b0 40       	sbci	r27, 0x00	; 0
    1aa0:	e0 40       	sbci	r30, 0x00	; 0
    1aa2:	e1 f7       	brne	.-8      	; 0x1a9c <slave_com+0x138>
    1aa4:	00 c0       	rjmp	.+0      	; 0x1aa6 <slave_com+0x142>
    1aa6:	00 00       	nop
		lcd_print(2, 1 , slave_mnp_list[slave_index], 2 );
		identify_neighbors_of_MNP(slave_mnp_list[slave_index]);
		bot_traversal();
		while (1)
		{			
			if(slave_mnp_list[slave_index] == MNP_list[track_current_mnp_index])
    1aa8:	e0 91 e4 1d 	lds	r30, 0x1DE4	; 0x801de4 <track_current_mnp_index>
    1aac:	f0 91 e5 1d 	lds	r31, 0x1DE5	; 0x801de5 <track_current_mnp_index+0x1>
    1ab0:	ee 0f       	add	r30, r30
    1ab2:	ff 1f       	adc	r31, r31
    1ab4:	ec 51       	subi	r30, 0x1C	; 28
    1ab6:	f1 4e       	sbci	r31, 0xE1	; 225
    1ab8:	28 81       	ld	r18, Y
    1aba:	39 81       	ldd	r19, Y+1	; 0x01
    1abc:	80 81       	ld	r24, Z
    1abe:	91 81       	ldd	r25, Z+1	; 0x01
    1ac0:	28 17       	cp	r18, r24
    1ac2:	39 07       	cpc	r19, r25
    1ac4:	41 f7       	brne	.-48     	; 0x1a96 <slave_com+0x132>
    1ac6:	a7 cf       	rjmp	.-178    	; 0x1a16 <slave_com+0xb2>
			// lcd_print(1,5, track_current_mnp_index, 2);
			_delay_ms(100);
		}
		
	}
}
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	ff 90       	pop	r15
    1ad2:	ef 90       	pop	r14
    1ad4:	df 90       	pop	r13
    1ad6:	cf 90       	pop	r12
    1ad8:	bf 90       	pop	r11
    1ada:	af 90       	pop	r10
    1adc:	9f 90       	pop	r9
    1ade:	8f 90       	pop	r8
    1ae0:	7f 90       	pop	r7
    1ae2:	08 95       	ret

00001ae4 <main>:
*                  5) Turns on the continuous buzzer to indicate end of the task
* Example Call:	automatically called by the micro-controller
*
*/
int main(void)
{
    1ae4:	ef 92       	push	r14
    1ae6:	ff 92       	push	r15
    1ae8:	1f 93       	push	r17
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
	init_devices();
    1aee:	6b d9       	rcall	.-3370   	; 0xdc6 <init_devices>
	lcd_set_4bit();
    1af0:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_set_4bit>
	lcd_init();
    1af4:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_init>
	
	while (1)
	{
		if((PINE & 0x80) != 0x80) //switch is pressed
    1af8:	67 99       	sbic	0x0c, 7	; 12
    1afa:	fe cf       	rjmp	.-4      	; 0x1af8 <main+0x14>
		{
			buzzer_on();
    1afc:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <buzzer_on>
    1b00:	2f ef       	ldi	r18, 0xFF	; 255
    1b02:	8f e7       	ldi	r24, 0x7F	; 127
    1b04:	96 e1       	ldi	r25, 0x16	; 22
    1b06:	21 50       	subi	r18, 0x01	; 1
    1b08:	80 40       	sbci	r24, 0x00	; 0
    1b0a:	90 40       	sbci	r25, 0x00	; 0
    1b0c:	e1 f7       	brne	.-8      	; 0x1b06 <main+0x22>
    1b0e:	00 c0       	rjmp	.+0      	; 0x1b10 <main+0x2c>
    1b10:	00 00       	nop
			_delay_ms(500);
			buzzer_off();
    1b12:	0e 94 ed 04 	call	0x9da	; 0x9da <buzzer_off>
    1b16:	0f 2e       	mov	r0, r31
    1b18:	f4 e5       	ldi	r31, 0x54	; 84
    1b1a:	ef 2e       	mov	r14, r31
    1b1c:	fe e1       	ldi	r31, 0x1E	; 30
    1b1e:	ff 2e       	mov	r15, r31
    1b20:	f0 2d       	mov	r31, r0
    1b22:	8c e7       	ldi	r24, 0x7C	; 124
    1b24:	9e e1       	ldi	r25, 0x1E	; 30
    1b26:	f7 01       	movw	r30, r14
	}
	
	// initialize slave mnp list
	for (int i = 0; i < 20; i++)
	{
		slave_mnp_list[i] = 0;
    1b28:	11 92       	st	Z+, r1
    1b2a:	11 92       	st	Z+, r1
			break;
		}
	}
	
	// initialize slave mnp list
	for (int i = 0; i < 20; i++)
    1b2c:	e8 17       	cp	r30, r24
    1b2e:	f9 07       	cpc	r31, r25
    1b30:	d9 f7       	brne	.-10     	; 0x1b28 <main+0x44>
	{
		slave_mnp_list[i] = 0;
	}
	slave_mnp_list_length = 0;
    1b32:	10 92 11 1d 	sts	0x1D11, r1	; 0x801d11 <slave_mnp_list_length+0x1>
    1b36:	10 92 10 1d 	sts	0x1D10, r1	; 0x801d10 <slave_mnp_list_length>
    1b3a:	e4 ee       	ldi	r30, 0xE4	; 228
    1b3c:	fe e1       	ldi	r31, 0x1E	; 30
    1b3e:	80 e2       	ldi	r24, 0x20	; 32
    1b40:	9f e1       	ldi	r25, 0x1F	; 31

	// initialize mnp list
	for (int i = 0; i < 30; i++)
	{
		MNP_list[i] = 0;
    1b42:	11 92       	st	Z+, r1
    1b44:	11 92       	st	Z+, r1
		slave_mnp_list[i] = 0;
	}
	slave_mnp_list_length = 0;

	// initialize mnp list
	for (int i = 0; i < 30; i++)
    1b46:	e8 17       	cp	r30, r24
    1b48:	f9 07       	cpc	r31, r25
    1b4a:	d9 f7       	brne	.-10     	; 0x1b42 <main+0x5e>
	{
		MNP_list[i] = 0;
	}
	MNP_list_length = 0;
    1b4c:	10 92 15 1d 	sts	0x1D15, r1	; 0x801d15 <MNP_list_length+0x1>
    1b50:	10 92 14 1d 	sts	0x1D14, r1	; 0x801d14 <MNP_list_length>
	
	
	
	while(1)
	{
		if (flag_rx == 251)
    1b54:	80 91 7c 1d 	lds	r24, 0x1D7C	; 0x801d7c <flag_rx>
    1b58:	90 91 7d 1d 	lds	r25, 0x1D7D	; 0x801d7d <flag_rx+0x1>
    1b5c:	8b 3f       	cpi	r24, 0xFB	; 251
    1b5e:	91 05       	cpc	r25, r1
    1b60:	81 f0       	breq	.+32     	; 0x1b82 <main+0x9e>
    1b62:	ef ef       	ldi	r30, 0xFF	; 255
    1b64:	ff e7       	ldi	r31, 0x7F	; 127
    1b66:	26 e1       	ldi	r18, 0x16	; 22
    1b68:	e1 50       	subi	r30, 0x01	; 1
    1b6a:	f0 40       	sbci	r31, 0x00	; 0
    1b6c:	20 40       	sbci	r18, 0x00	; 0
    1b6e:	e1 f7       	brne	.-8      	; 0x1b68 <main+0x84>
    1b70:	00 c0       	rjmp	.+0      	; 0x1b72 <main+0x8e>
    1b72:	00 00       	nop
    1b74:	80 91 7c 1d 	lds	r24, 0x1D7C	; 0x801d7c <flag_rx>
    1b78:	90 91 7d 1d 	lds	r25, 0x1D7D	; 0x801d7d <flag_rx+0x1>
    1b7c:	8b 3f       	cpi	r24, 0xFB	; 251
    1b7e:	91 05       	cpc	r25, r1
    1b80:	81 f7       	brne	.-32     	; 0x1b62 <main+0x7e>
    1b82:	8f ef       	ldi	r24, 0xFF	; 255
    1b84:	9f ef       	ldi	r25, 0xFF	; 255
    1b86:	e9 e5       	ldi	r30, 0x59	; 89
    1b88:	81 50       	subi	r24, 0x01	; 1
    1b8a:	90 40       	sbci	r25, 0x00	; 0
    1b8c:	e0 40       	sbci	r30, 0x00	; 0
    1b8e:	e1 f7       	brne	.-8      	; 0x1b88 <main+0xa4>
    1b90:	00 c0       	rjmp	.+0      	; 0x1b92 <main+0xae>
    1b92:	00 00       	nop
	}
	
	_delay_ms(2000);
	while (1)
	{
		if (MNP_list_length != 0)
    1b94:	80 91 14 1d 	lds	r24, 0x1D14	; 0x801d14 <MNP_list_length>
    1b98:	90 91 15 1d 	lds	r25, 0x1D15	; 0x801d15 <MNP_list_length+0x1>
    1b9c:	89 2b       	or	r24, r25
    1b9e:	79 f4       	brne	.+30     	; 0x1bbe <main+0xda>
    1ba0:	ff ef       	ldi	r31, 0xFF	; 255
    1ba2:	2f e7       	ldi	r18, 0x7F	; 127
    1ba4:	86 e1       	ldi	r24, 0x16	; 22
    1ba6:	f1 50       	subi	r31, 0x01	; 1
    1ba8:	20 40       	sbci	r18, 0x00	; 0
    1baa:	80 40       	sbci	r24, 0x00	; 0
    1bac:	e1 f7       	brne	.-8      	; 0x1ba6 <main+0xc2>
    1bae:	00 c0       	rjmp	.+0      	; 0x1bb0 <main+0xcc>
    1bb0:	00 00       	nop
    1bb2:	80 91 14 1d 	lds	r24, 0x1D14	; 0x801d14 <MNP_list_length>
    1bb6:	90 91 15 1d 	lds	r25, 0x1D15	; 0x801d15 <MNP_list_length+0x1>
    1bba:	89 2b       	or	r24, r25
    1bbc:	89 f3       	breq	.-30     	; 0x1ba0 <main+0xbc>
    1bbe:	9f ef       	ldi	r25, 0xFF	; 255
    1bc0:	ef ef       	ldi	r30, 0xFF	; 255
    1bc2:	f9 e5       	ldi	r31, 0x59	; 89
    1bc4:	91 50       	subi	r25, 0x01	; 1
    1bc6:	e0 40       	sbci	r30, 0x00	; 0
    1bc8:	f0 40       	sbci	r31, 0x00	; 0
    1bca:	e1 f7       	brne	.-8      	; 0x1bc4 <main+0xe0>
    1bcc:	00 c0       	rjmp	.+0      	; 0x1bce <main+0xea>
    1bce:	00 00       	nop

	_delay_ms(2000);

	while(1)
	{
		if (x > MNP_list_length)
    1bd0:	20 91 0c 1d 	lds	r18, 0x1D0C	; 0x801d0c <x>
    1bd4:	30 91 0d 1d 	lds	r19, 0x1D0D	; 0x801d0d <x+0x1>
    1bd8:	80 91 14 1d 	lds	r24, 0x1D14	; 0x801d14 <MNP_list_length>
    1bdc:	90 91 15 1d 	lds	r25, 0x1D15	; 0x801d15 <MNP_list_length+0x1>
    1be0:	82 17       	cp	r24, r18
    1be2:	93 07       	cpc	r25, r19
    1be4:	a4 f0       	brlt	.+40     	; 0x1c0e <main+0x12a>
    1be6:	2f ef       	ldi	r18, 0xFF	; 255
    1be8:	8f e7       	ldi	r24, 0x7F	; 127
    1bea:	96 e1       	ldi	r25, 0x16	; 22
    1bec:	21 50       	subi	r18, 0x01	; 1
    1bee:	80 40       	sbci	r24, 0x00	; 0
    1bf0:	90 40       	sbci	r25, 0x00	; 0
    1bf2:	e1 f7       	brne	.-8      	; 0x1bec <main+0x108>
    1bf4:	00 c0       	rjmp	.+0      	; 0x1bf6 <main+0x112>
    1bf6:	00 00       	nop
    1bf8:	20 91 0c 1d 	lds	r18, 0x1D0C	; 0x801d0c <x>
    1bfc:	30 91 0d 1d 	lds	r19, 0x1D0D	; 0x801d0d <x+0x1>
    1c00:	80 91 14 1d 	lds	r24, 0x1D14	; 0x801d14 <MNP_list_length>
    1c04:	90 91 15 1d 	lds	r25, 0x1D15	; 0x801d15 <MNP_list_length+0x1>
    1c08:	82 17       	cp	r24, r18
    1c0a:	93 07       	cpc	r25, r19
    1c0c:	64 f7       	brge	.-40     	; 0x1be6 <main+0x102>
	lcd_print(2, 1+i, MNP_list[i], 1);
	_delay_ms(1000);
	}*/
	
	
	lcd_set_4bit();
    1c0e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_set_4bit>
	lcd_init();
    1c12:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_init>
	_delay_ms(1000);
	}
	
	*/
	
	mnp_assigner();
    1c16:	29 dc       	rcall	.-1966   	; 0x146a <mnp_assigner>
	for(int i = 0; i < slave_mnp_list_length; i++)
    1c18:	80 91 10 1d 	lds	r24, 0x1D10	; 0x801d10 <slave_mnp_list_length>
    1c1c:	90 91 11 1d 	lds	r25, 0x1D11	; 0x801d11 <slave_mnp_list_length+0x1>
    1c20:	18 16       	cp	r1, r24
    1c22:	19 06       	cpc	r1, r25
    1c24:	b4 f4       	brge	.+44     	; 0x1c52 <main+0x16e>
    1c26:	11 e0       	ldi	r17, 0x01	; 1
    1c28:	c0 e0       	ldi	r28, 0x00	; 0
    1c2a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		lcd_print(1, 1+i*2, slave_mnp_list[i], 2);
    1c2c:	f7 01       	movw	r30, r14
    1c2e:	41 91       	ld	r20, Z+
    1c30:	51 91       	ld	r21, Z+
    1c32:	7f 01       	movw	r14, r30
    1c34:	22 e0       	ldi	r18, 0x02	; 2
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	61 2f       	mov	r22, r17
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	0e 94 99 01 	call	0x332	; 0x332 <lcd_print>
	}
	
	*/
	
	mnp_assigner();
	for(int i = 0; i < slave_mnp_list_length; i++)
    1c40:	21 96       	adiw	r28, 0x01	; 1
    1c42:	1e 5f       	subi	r17, 0xFE	; 254
    1c44:	80 91 10 1d 	lds	r24, 0x1D10	; 0x801d10 <slave_mnp_list_length>
    1c48:	90 91 11 1d 	lds	r25, 0x1D11	; 0x801d11 <slave_mnp_list_length+0x1>
    1c4c:	c8 17       	cp	r28, r24
    1c4e:	d9 07       	cpc	r29, r25
    1c50:	6c f3       	brlt	.-38     	; 0x1c2c <main+0x148>
	{
		lcd_print(1, 1+i*2, slave_mnp_list[i], 2);
	}
	source_node = 12; // The bot initially starts from Start 2(i.e. node 12)
    1c52:	8c e0       	ldi	r24, 0x0C	; 12
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	90 93 29 1f 	sts	0x1F29, r25	; 0x801f29 <source_node+0x1>
    1c5a:	80 93 28 1f 	sts	0x1F28, r24	; 0x801f28 <source_node>
	right_servo_1(5);
    1c5e:	85 e0       	ldi	r24, 0x05	; 5
    1c60:	bc d8       	rcall	.-3720   	; 0xdda <right_servo_1>
    1c62:	ff ef       	ldi	r31, 0xFF	; 255
    1c64:	2f ef       	ldi	r18, 0xFF	; 255
    1c66:	8c e2       	ldi	r24, 0x2C	; 44
    1c68:	f1 50       	subi	r31, 0x01	; 1
    1c6a:	20 40       	sbci	r18, 0x00	; 0
    1c6c:	80 40       	sbci	r24, 0x00	; 0
    1c6e:	e1 f7       	brne	.-8      	; 0x1c68 <main+0x184>
    1c70:	00 c0       	rjmp	.+0      	; 0x1c72 <main+0x18e>
    1c72:	00 00       	nop
	_delay_ms(1000);
	left_servo_2(185);
    1c74:	89 eb       	ldi	r24, 0xB9	; 185
    1c76:	c8 d8       	rcall	.-3696   	; 0xe08 <left_servo_2>
    1c78:	9f ef       	ldi	r25, 0xFF	; 255
    1c7a:	ef ef       	ldi	r30, 0xFF	; 255
    1c7c:	fc e2       	ldi	r31, 0x2C	; 44
    1c7e:	91 50       	subi	r25, 0x01	; 1
    1c80:	e0 40       	sbci	r30, 0x00	; 0
    1c82:	f0 40       	sbci	r31, 0x00	; 0
    1c84:	e1 f7       	brne	.-8      	; 0x1c7e <main+0x19a>
    1c86:	00 c0       	rjmp	.+0      	; 0x1c88 <main+0x1a4>
    1c88:	00 00       	nop
	_delay_ms(1000);
	slave_com();
    1c8a:	6c de       	rcall	.-808    	; 0x1964 <slave_com>
    1c8c:	2f ef       	ldi	r18, 0xFF	; 255
    1c8e:	8f ef       	ldi	r24, 0xFF	; 255
    1c90:	99 e5       	ldi	r25, 0x59	; 89
    1c92:	21 50       	subi	r18, 0x01	; 1
    1c94:	80 40       	sbci	r24, 0x00	; 0
    1c96:	90 40       	sbci	r25, 0x00	; 0
    1c98:	e1 f7       	brne	.-8      	; 0x1c92 <main+0x1ae>
    1c9a:	00 c0       	rjmp	.+0      	; 0x1c9c <main+0x1b8>
    1c9c:	00 00       	nop
	_delay_ms(2000);
	buzzer_on();
    1c9e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <buzzer_on>
    1ca2:	ef ef       	ldi	r30, 0xFF	; 255
    1ca4:	ff ef       	ldi	r31, 0xFF	; 255
    1ca6:	20 ee       	ldi	r18, 0xE0	; 224
    1ca8:	e1 50       	subi	r30, 0x01	; 1
    1caa:	f0 40       	sbci	r31, 0x00	; 0
    1cac:	20 40       	sbci	r18, 0x00	; 0
    1cae:	e1 f7       	brne	.-8      	; 0x1ca8 <main+0x1c4>
    1cb0:	00 c0       	rjmp	.+0      	; 0x1cb2 <main+0x1ce>
    1cb2:	00 00       	nop
	_delay_ms(5000);
	buzzer_off();
    1cb4:	0e 94 ed 04 	call	0x9da	; 0x9da <buzzer_off>
	return 0;

}
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	df 91       	pop	r29
    1cbe:	cf 91       	pop	r28
    1cc0:	1f 91       	pop	r17
    1cc2:	ff 90       	pop	r15
    1cc4:	ef 90       	pop	r14
    1cc6:	08 95       	ret

00001cc8 <__subsf3>:
    1cc8:	50 58       	subi	r21, 0x80	; 128

00001cca <__addsf3>:
    1cca:	bb 27       	eor	r27, r27
    1ccc:	aa 27       	eor	r26, r26
    1cce:	0e d0       	rcall	.+28     	; 0x1cec <__addsf3x>
    1cd0:	4d c1       	rjmp	.+666    	; 0x1f6c <__fp_round>
    1cd2:	3e d1       	rcall	.+636    	; 0x1f50 <__fp_pscA>
    1cd4:	30 f0       	brcs	.+12     	; 0x1ce2 <__addsf3+0x18>
    1cd6:	43 d1       	rcall	.+646    	; 0x1f5e <__fp_pscB>
    1cd8:	20 f0       	brcs	.+8      	; 0x1ce2 <__addsf3+0x18>
    1cda:	31 f4       	brne	.+12     	; 0x1ce8 <__addsf3+0x1e>
    1cdc:	9f 3f       	cpi	r25, 0xFF	; 255
    1cde:	11 f4       	brne	.+4      	; 0x1ce4 <__addsf3+0x1a>
    1ce0:	1e f4       	brtc	.+6      	; 0x1ce8 <__addsf3+0x1e>
    1ce2:	33 c1       	rjmp	.+614    	; 0x1f4a <__fp_nan>
    1ce4:	0e f4       	brtc	.+2      	; 0x1ce8 <__addsf3+0x1e>
    1ce6:	e0 95       	com	r30
    1ce8:	e7 fb       	bst	r30, 7
    1cea:	29 c1       	rjmp	.+594    	; 0x1f3e <__fp_inf>

00001cec <__addsf3x>:
    1cec:	e9 2f       	mov	r30, r25
    1cee:	4f d1       	rcall	.+670    	; 0x1f8e <__fp_split3>
    1cf0:	80 f3       	brcs	.-32     	; 0x1cd2 <__addsf3+0x8>
    1cf2:	ba 17       	cp	r27, r26
    1cf4:	62 07       	cpc	r22, r18
    1cf6:	73 07       	cpc	r23, r19
    1cf8:	84 07       	cpc	r24, r20
    1cfa:	95 07       	cpc	r25, r21
    1cfc:	18 f0       	brcs	.+6      	; 0x1d04 <__addsf3x+0x18>
    1cfe:	71 f4       	brne	.+28     	; 0x1d1c <__addsf3x+0x30>
    1d00:	9e f5       	brtc	.+102    	; 0x1d68 <__addsf3x+0x7c>
    1d02:	67 c1       	rjmp	.+718    	; 0x1fd2 <__fp_zero>
    1d04:	0e f4       	brtc	.+2      	; 0x1d08 <__addsf3x+0x1c>
    1d06:	e0 95       	com	r30
    1d08:	0b 2e       	mov	r0, r27
    1d0a:	ba 2f       	mov	r27, r26
    1d0c:	a0 2d       	mov	r26, r0
    1d0e:	0b 01       	movw	r0, r22
    1d10:	b9 01       	movw	r22, r18
    1d12:	90 01       	movw	r18, r0
    1d14:	0c 01       	movw	r0, r24
    1d16:	ca 01       	movw	r24, r20
    1d18:	a0 01       	movw	r20, r0
    1d1a:	11 24       	eor	r1, r1
    1d1c:	ff 27       	eor	r31, r31
    1d1e:	59 1b       	sub	r21, r25
    1d20:	99 f0       	breq	.+38     	; 0x1d48 <__addsf3x+0x5c>
    1d22:	59 3f       	cpi	r21, 0xF9	; 249
    1d24:	50 f4       	brcc	.+20     	; 0x1d3a <__addsf3x+0x4e>
    1d26:	50 3e       	cpi	r21, 0xE0	; 224
    1d28:	68 f1       	brcs	.+90     	; 0x1d84 <__addsf3x+0x98>
    1d2a:	1a 16       	cp	r1, r26
    1d2c:	f0 40       	sbci	r31, 0x00	; 0
    1d2e:	a2 2f       	mov	r26, r18
    1d30:	23 2f       	mov	r18, r19
    1d32:	34 2f       	mov	r19, r20
    1d34:	44 27       	eor	r20, r20
    1d36:	58 5f       	subi	r21, 0xF8	; 248
    1d38:	f3 cf       	rjmp	.-26     	; 0x1d20 <__addsf3x+0x34>
    1d3a:	46 95       	lsr	r20
    1d3c:	37 95       	ror	r19
    1d3e:	27 95       	ror	r18
    1d40:	a7 95       	ror	r26
    1d42:	f0 40       	sbci	r31, 0x00	; 0
    1d44:	53 95       	inc	r21
    1d46:	c9 f7       	brne	.-14     	; 0x1d3a <__addsf3x+0x4e>
    1d48:	7e f4       	brtc	.+30     	; 0x1d68 <__addsf3x+0x7c>
    1d4a:	1f 16       	cp	r1, r31
    1d4c:	ba 0b       	sbc	r27, r26
    1d4e:	62 0b       	sbc	r22, r18
    1d50:	73 0b       	sbc	r23, r19
    1d52:	84 0b       	sbc	r24, r20
    1d54:	ba f0       	brmi	.+46     	; 0x1d84 <__addsf3x+0x98>
    1d56:	91 50       	subi	r25, 0x01	; 1
    1d58:	a1 f0       	breq	.+40     	; 0x1d82 <__addsf3x+0x96>
    1d5a:	ff 0f       	add	r31, r31
    1d5c:	bb 1f       	adc	r27, r27
    1d5e:	66 1f       	adc	r22, r22
    1d60:	77 1f       	adc	r23, r23
    1d62:	88 1f       	adc	r24, r24
    1d64:	c2 f7       	brpl	.-16     	; 0x1d56 <__addsf3x+0x6a>
    1d66:	0e c0       	rjmp	.+28     	; 0x1d84 <__addsf3x+0x98>
    1d68:	ba 0f       	add	r27, r26
    1d6a:	62 1f       	adc	r22, r18
    1d6c:	73 1f       	adc	r23, r19
    1d6e:	84 1f       	adc	r24, r20
    1d70:	48 f4       	brcc	.+18     	; 0x1d84 <__addsf3x+0x98>
    1d72:	87 95       	ror	r24
    1d74:	77 95       	ror	r23
    1d76:	67 95       	ror	r22
    1d78:	b7 95       	ror	r27
    1d7a:	f7 95       	ror	r31
    1d7c:	9e 3f       	cpi	r25, 0xFE	; 254
    1d7e:	08 f0       	brcs	.+2      	; 0x1d82 <__addsf3x+0x96>
    1d80:	b3 cf       	rjmp	.-154    	; 0x1ce8 <__addsf3+0x1e>
    1d82:	93 95       	inc	r25
    1d84:	88 0f       	add	r24, r24
    1d86:	08 f0       	brcs	.+2      	; 0x1d8a <__addsf3x+0x9e>
    1d88:	99 27       	eor	r25, r25
    1d8a:	ee 0f       	add	r30, r30
    1d8c:	97 95       	ror	r25
    1d8e:	87 95       	ror	r24
    1d90:	08 95       	ret

00001d92 <__divsf3>:
    1d92:	0c d0       	rcall	.+24     	; 0x1dac <__divsf3x>
    1d94:	eb c0       	rjmp	.+470    	; 0x1f6c <__fp_round>
    1d96:	e3 d0       	rcall	.+454    	; 0x1f5e <__fp_pscB>
    1d98:	40 f0       	brcs	.+16     	; 0x1daa <__divsf3+0x18>
    1d9a:	da d0       	rcall	.+436    	; 0x1f50 <__fp_pscA>
    1d9c:	30 f0       	brcs	.+12     	; 0x1daa <__divsf3+0x18>
    1d9e:	21 f4       	brne	.+8      	; 0x1da8 <__divsf3+0x16>
    1da0:	5f 3f       	cpi	r21, 0xFF	; 255
    1da2:	19 f0       	breq	.+6      	; 0x1daa <__divsf3+0x18>
    1da4:	cc c0       	rjmp	.+408    	; 0x1f3e <__fp_inf>
    1da6:	51 11       	cpse	r21, r1
    1da8:	15 c1       	rjmp	.+554    	; 0x1fd4 <__fp_szero>
    1daa:	cf c0       	rjmp	.+414    	; 0x1f4a <__fp_nan>

00001dac <__divsf3x>:
    1dac:	f0 d0       	rcall	.+480    	; 0x1f8e <__fp_split3>
    1dae:	98 f3       	brcs	.-26     	; 0x1d96 <__divsf3+0x4>

00001db0 <__divsf3_pse>:
    1db0:	99 23       	and	r25, r25
    1db2:	c9 f3       	breq	.-14     	; 0x1da6 <__divsf3+0x14>
    1db4:	55 23       	and	r21, r21
    1db6:	b1 f3       	breq	.-20     	; 0x1da4 <__divsf3+0x12>
    1db8:	95 1b       	sub	r25, r21
    1dba:	55 0b       	sbc	r21, r21
    1dbc:	bb 27       	eor	r27, r27
    1dbe:	aa 27       	eor	r26, r26
    1dc0:	62 17       	cp	r22, r18
    1dc2:	73 07       	cpc	r23, r19
    1dc4:	84 07       	cpc	r24, r20
    1dc6:	38 f0       	brcs	.+14     	; 0x1dd6 <__divsf3_pse+0x26>
    1dc8:	9f 5f       	subi	r25, 0xFF	; 255
    1dca:	5f 4f       	sbci	r21, 0xFF	; 255
    1dcc:	22 0f       	add	r18, r18
    1dce:	33 1f       	adc	r19, r19
    1dd0:	44 1f       	adc	r20, r20
    1dd2:	aa 1f       	adc	r26, r26
    1dd4:	a9 f3       	breq	.-22     	; 0x1dc0 <__divsf3_pse+0x10>
    1dd6:	33 d0       	rcall	.+102    	; 0x1e3e <__divsf3_pse+0x8e>
    1dd8:	0e 2e       	mov	r0, r30
    1dda:	3a f0       	brmi	.+14     	; 0x1dea <__divsf3_pse+0x3a>
    1ddc:	e0 e8       	ldi	r30, 0x80	; 128
    1dde:	30 d0       	rcall	.+96     	; 0x1e40 <__divsf3_pse+0x90>
    1de0:	91 50       	subi	r25, 0x01	; 1
    1de2:	50 40       	sbci	r21, 0x00	; 0
    1de4:	e6 95       	lsr	r30
    1de6:	00 1c       	adc	r0, r0
    1de8:	ca f7       	brpl	.-14     	; 0x1ddc <__divsf3_pse+0x2c>
    1dea:	29 d0       	rcall	.+82     	; 0x1e3e <__divsf3_pse+0x8e>
    1dec:	fe 2f       	mov	r31, r30
    1dee:	27 d0       	rcall	.+78     	; 0x1e3e <__divsf3_pse+0x8e>
    1df0:	66 0f       	add	r22, r22
    1df2:	77 1f       	adc	r23, r23
    1df4:	88 1f       	adc	r24, r24
    1df6:	bb 1f       	adc	r27, r27
    1df8:	26 17       	cp	r18, r22
    1dfa:	37 07       	cpc	r19, r23
    1dfc:	48 07       	cpc	r20, r24
    1dfe:	ab 07       	cpc	r26, r27
    1e00:	b0 e8       	ldi	r27, 0x80	; 128
    1e02:	09 f0       	breq	.+2      	; 0x1e06 <__divsf3_pse+0x56>
    1e04:	bb 0b       	sbc	r27, r27
    1e06:	80 2d       	mov	r24, r0
    1e08:	bf 01       	movw	r22, r30
    1e0a:	ff 27       	eor	r31, r31
    1e0c:	93 58       	subi	r25, 0x83	; 131
    1e0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e10:	2a f0       	brmi	.+10     	; 0x1e1c <__divsf3_pse+0x6c>
    1e12:	9e 3f       	cpi	r25, 0xFE	; 254
    1e14:	51 05       	cpc	r21, r1
    1e16:	68 f0       	brcs	.+26     	; 0x1e32 <__divsf3_pse+0x82>
    1e18:	92 c0       	rjmp	.+292    	; 0x1f3e <__fp_inf>
    1e1a:	dc c0       	rjmp	.+440    	; 0x1fd4 <__fp_szero>
    1e1c:	5f 3f       	cpi	r21, 0xFF	; 255
    1e1e:	ec f3       	brlt	.-6      	; 0x1e1a <__divsf3_pse+0x6a>
    1e20:	98 3e       	cpi	r25, 0xE8	; 232
    1e22:	dc f3       	brlt	.-10     	; 0x1e1a <__divsf3_pse+0x6a>
    1e24:	86 95       	lsr	r24
    1e26:	77 95       	ror	r23
    1e28:	67 95       	ror	r22
    1e2a:	b7 95       	ror	r27
    1e2c:	f7 95       	ror	r31
    1e2e:	9f 5f       	subi	r25, 0xFF	; 255
    1e30:	c9 f7       	brne	.-14     	; 0x1e24 <__divsf3_pse+0x74>
    1e32:	88 0f       	add	r24, r24
    1e34:	91 1d       	adc	r25, r1
    1e36:	96 95       	lsr	r25
    1e38:	87 95       	ror	r24
    1e3a:	97 f9       	bld	r25, 7
    1e3c:	08 95       	ret
    1e3e:	e1 e0       	ldi	r30, 0x01	; 1
    1e40:	66 0f       	add	r22, r22
    1e42:	77 1f       	adc	r23, r23
    1e44:	88 1f       	adc	r24, r24
    1e46:	bb 1f       	adc	r27, r27
    1e48:	62 17       	cp	r22, r18
    1e4a:	73 07       	cpc	r23, r19
    1e4c:	84 07       	cpc	r24, r20
    1e4e:	ba 07       	cpc	r27, r26
    1e50:	20 f0       	brcs	.+8      	; 0x1e5a <__divsf3_pse+0xaa>
    1e52:	62 1b       	sub	r22, r18
    1e54:	73 0b       	sbc	r23, r19
    1e56:	84 0b       	sbc	r24, r20
    1e58:	ba 0b       	sbc	r27, r26
    1e5a:	ee 1f       	adc	r30, r30
    1e5c:	88 f7       	brcc	.-30     	; 0x1e40 <__divsf3_pse+0x90>
    1e5e:	e0 95       	com	r30
    1e60:	08 95       	ret

00001e62 <__fixsfsi>:
    1e62:	04 d0       	rcall	.+8      	; 0x1e6c <__fixunssfsi>
    1e64:	68 94       	set
    1e66:	b1 11       	cpse	r27, r1
    1e68:	b5 c0       	rjmp	.+362    	; 0x1fd4 <__fp_szero>
    1e6a:	08 95       	ret

00001e6c <__fixunssfsi>:
    1e6c:	98 d0       	rcall	.+304    	; 0x1f9e <__fp_splitA>
    1e6e:	88 f0       	brcs	.+34     	; 0x1e92 <__fixunssfsi+0x26>
    1e70:	9f 57       	subi	r25, 0x7F	; 127
    1e72:	90 f0       	brcs	.+36     	; 0x1e98 <__fixunssfsi+0x2c>
    1e74:	b9 2f       	mov	r27, r25
    1e76:	99 27       	eor	r25, r25
    1e78:	b7 51       	subi	r27, 0x17	; 23
    1e7a:	a0 f0       	brcs	.+40     	; 0x1ea4 <__fixunssfsi+0x38>
    1e7c:	d1 f0       	breq	.+52     	; 0x1eb2 <__fixunssfsi+0x46>
    1e7e:	66 0f       	add	r22, r22
    1e80:	77 1f       	adc	r23, r23
    1e82:	88 1f       	adc	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	1a f0       	brmi	.+6      	; 0x1e8e <__fixunssfsi+0x22>
    1e88:	ba 95       	dec	r27
    1e8a:	c9 f7       	brne	.-14     	; 0x1e7e <__fixunssfsi+0x12>
    1e8c:	12 c0       	rjmp	.+36     	; 0x1eb2 <__fixunssfsi+0x46>
    1e8e:	b1 30       	cpi	r27, 0x01	; 1
    1e90:	81 f0       	breq	.+32     	; 0x1eb2 <__fixunssfsi+0x46>
    1e92:	9f d0       	rcall	.+318    	; 0x1fd2 <__fp_zero>
    1e94:	b1 e0       	ldi	r27, 0x01	; 1
    1e96:	08 95       	ret
    1e98:	9c c0       	rjmp	.+312    	; 0x1fd2 <__fp_zero>
    1e9a:	67 2f       	mov	r22, r23
    1e9c:	78 2f       	mov	r23, r24
    1e9e:	88 27       	eor	r24, r24
    1ea0:	b8 5f       	subi	r27, 0xF8	; 248
    1ea2:	39 f0       	breq	.+14     	; 0x1eb2 <__fixunssfsi+0x46>
    1ea4:	b9 3f       	cpi	r27, 0xF9	; 249
    1ea6:	cc f3       	brlt	.-14     	; 0x1e9a <__fixunssfsi+0x2e>
    1ea8:	86 95       	lsr	r24
    1eaa:	77 95       	ror	r23
    1eac:	67 95       	ror	r22
    1eae:	b3 95       	inc	r27
    1eb0:	d9 f7       	brne	.-10     	; 0x1ea8 <__fixunssfsi+0x3c>
    1eb2:	3e f4       	brtc	.+14     	; 0x1ec2 <__fixunssfsi+0x56>
    1eb4:	90 95       	com	r25
    1eb6:	80 95       	com	r24
    1eb8:	70 95       	com	r23
    1eba:	61 95       	neg	r22
    1ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebe:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec2:	08 95       	ret

00001ec4 <__floatunsisf>:
    1ec4:	e8 94       	clt
    1ec6:	09 c0       	rjmp	.+18     	; 0x1eda <__floatsisf+0x12>

00001ec8 <__floatsisf>:
    1ec8:	97 fb       	bst	r25, 7
    1eca:	3e f4       	brtc	.+14     	; 0x1eda <__floatsisf+0x12>
    1ecc:	90 95       	com	r25
    1ece:	80 95       	com	r24
    1ed0:	70 95       	com	r23
    1ed2:	61 95       	neg	r22
    1ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eda:	99 23       	and	r25, r25
    1edc:	a9 f0       	breq	.+42     	; 0x1f08 <__floatsisf+0x40>
    1ede:	f9 2f       	mov	r31, r25
    1ee0:	96 e9       	ldi	r25, 0x96	; 150
    1ee2:	bb 27       	eor	r27, r27
    1ee4:	93 95       	inc	r25
    1ee6:	f6 95       	lsr	r31
    1ee8:	87 95       	ror	r24
    1eea:	77 95       	ror	r23
    1eec:	67 95       	ror	r22
    1eee:	b7 95       	ror	r27
    1ef0:	f1 11       	cpse	r31, r1
    1ef2:	f8 cf       	rjmp	.-16     	; 0x1ee4 <__floatsisf+0x1c>
    1ef4:	fa f4       	brpl	.+62     	; 0x1f34 <__floatsisf+0x6c>
    1ef6:	bb 0f       	add	r27, r27
    1ef8:	11 f4       	brne	.+4      	; 0x1efe <__floatsisf+0x36>
    1efa:	60 ff       	sbrs	r22, 0
    1efc:	1b c0       	rjmp	.+54     	; 0x1f34 <__floatsisf+0x6c>
    1efe:	6f 5f       	subi	r22, 0xFF	; 255
    1f00:	7f 4f       	sbci	r23, 0xFF	; 255
    1f02:	8f 4f       	sbci	r24, 0xFF	; 255
    1f04:	9f 4f       	sbci	r25, 0xFF	; 255
    1f06:	16 c0       	rjmp	.+44     	; 0x1f34 <__floatsisf+0x6c>
    1f08:	88 23       	and	r24, r24
    1f0a:	11 f0       	breq	.+4      	; 0x1f10 <__floatsisf+0x48>
    1f0c:	96 e9       	ldi	r25, 0x96	; 150
    1f0e:	11 c0       	rjmp	.+34     	; 0x1f32 <__floatsisf+0x6a>
    1f10:	77 23       	and	r23, r23
    1f12:	21 f0       	breq	.+8      	; 0x1f1c <__floatsisf+0x54>
    1f14:	9e e8       	ldi	r25, 0x8E	; 142
    1f16:	87 2f       	mov	r24, r23
    1f18:	76 2f       	mov	r23, r22
    1f1a:	05 c0       	rjmp	.+10     	; 0x1f26 <__floatsisf+0x5e>
    1f1c:	66 23       	and	r22, r22
    1f1e:	71 f0       	breq	.+28     	; 0x1f3c <__floatsisf+0x74>
    1f20:	96 e8       	ldi	r25, 0x86	; 134
    1f22:	86 2f       	mov	r24, r22
    1f24:	70 e0       	ldi	r23, 0x00	; 0
    1f26:	60 e0       	ldi	r22, 0x00	; 0
    1f28:	2a f0       	brmi	.+10     	; 0x1f34 <__floatsisf+0x6c>
    1f2a:	9a 95       	dec	r25
    1f2c:	66 0f       	add	r22, r22
    1f2e:	77 1f       	adc	r23, r23
    1f30:	88 1f       	adc	r24, r24
    1f32:	da f7       	brpl	.-10     	; 0x1f2a <__floatsisf+0x62>
    1f34:	88 0f       	add	r24, r24
    1f36:	96 95       	lsr	r25
    1f38:	87 95       	ror	r24
    1f3a:	97 f9       	bld	r25, 7
    1f3c:	08 95       	ret

00001f3e <__fp_inf>:
    1f3e:	97 f9       	bld	r25, 7
    1f40:	9f 67       	ori	r25, 0x7F	; 127
    1f42:	80 e8       	ldi	r24, 0x80	; 128
    1f44:	70 e0       	ldi	r23, 0x00	; 0
    1f46:	60 e0       	ldi	r22, 0x00	; 0
    1f48:	08 95       	ret

00001f4a <__fp_nan>:
    1f4a:	9f ef       	ldi	r25, 0xFF	; 255
    1f4c:	80 ec       	ldi	r24, 0xC0	; 192
    1f4e:	08 95       	ret

00001f50 <__fp_pscA>:
    1f50:	00 24       	eor	r0, r0
    1f52:	0a 94       	dec	r0
    1f54:	16 16       	cp	r1, r22
    1f56:	17 06       	cpc	r1, r23
    1f58:	18 06       	cpc	r1, r24
    1f5a:	09 06       	cpc	r0, r25
    1f5c:	08 95       	ret

00001f5e <__fp_pscB>:
    1f5e:	00 24       	eor	r0, r0
    1f60:	0a 94       	dec	r0
    1f62:	12 16       	cp	r1, r18
    1f64:	13 06       	cpc	r1, r19
    1f66:	14 06       	cpc	r1, r20
    1f68:	05 06       	cpc	r0, r21
    1f6a:	08 95       	ret

00001f6c <__fp_round>:
    1f6c:	09 2e       	mov	r0, r25
    1f6e:	03 94       	inc	r0
    1f70:	00 0c       	add	r0, r0
    1f72:	11 f4       	brne	.+4      	; 0x1f78 <__fp_round+0xc>
    1f74:	88 23       	and	r24, r24
    1f76:	52 f0       	brmi	.+20     	; 0x1f8c <__fp_round+0x20>
    1f78:	bb 0f       	add	r27, r27
    1f7a:	40 f4       	brcc	.+16     	; 0x1f8c <__fp_round+0x20>
    1f7c:	bf 2b       	or	r27, r31
    1f7e:	11 f4       	brne	.+4      	; 0x1f84 <__fp_round+0x18>
    1f80:	60 ff       	sbrs	r22, 0
    1f82:	04 c0       	rjmp	.+8      	; 0x1f8c <__fp_round+0x20>
    1f84:	6f 5f       	subi	r22, 0xFF	; 255
    1f86:	7f 4f       	sbci	r23, 0xFF	; 255
    1f88:	8f 4f       	sbci	r24, 0xFF	; 255
    1f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8c:	08 95       	ret

00001f8e <__fp_split3>:
    1f8e:	57 fd       	sbrc	r21, 7
    1f90:	90 58       	subi	r25, 0x80	; 128
    1f92:	44 0f       	add	r20, r20
    1f94:	55 1f       	adc	r21, r21
    1f96:	59 f0       	breq	.+22     	; 0x1fae <__fp_splitA+0x10>
    1f98:	5f 3f       	cpi	r21, 0xFF	; 255
    1f9a:	71 f0       	breq	.+28     	; 0x1fb8 <__fp_splitA+0x1a>
    1f9c:	47 95       	ror	r20

00001f9e <__fp_splitA>:
    1f9e:	88 0f       	add	r24, r24
    1fa0:	97 fb       	bst	r25, 7
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	61 f0       	breq	.+24     	; 0x1fbe <__fp_splitA+0x20>
    1fa6:	9f 3f       	cpi	r25, 0xFF	; 255
    1fa8:	79 f0       	breq	.+30     	; 0x1fc8 <__fp_splitA+0x2a>
    1faa:	87 95       	ror	r24
    1fac:	08 95       	ret
    1fae:	12 16       	cp	r1, r18
    1fb0:	13 06       	cpc	r1, r19
    1fb2:	14 06       	cpc	r1, r20
    1fb4:	55 1f       	adc	r21, r21
    1fb6:	f2 cf       	rjmp	.-28     	; 0x1f9c <__fp_split3+0xe>
    1fb8:	46 95       	lsr	r20
    1fba:	f1 df       	rcall	.-30     	; 0x1f9e <__fp_splitA>
    1fbc:	08 c0       	rjmp	.+16     	; 0x1fce <__fp_splitA+0x30>
    1fbe:	16 16       	cp	r1, r22
    1fc0:	17 06       	cpc	r1, r23
    1fc2:	18 06       	cpc	r1, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	f1 cf       	rjmp	.-30     	; 0x1faa <__fp_splitA+0xc>
    1fc8:	86 95       	lsr	r24
    1fca:	71 05       	cpc	r23, r1
    1fcc:	61 05       	cpc	r22, r1
    1fce:	08 94       	sec
    1fd0:	08 95       	ret

00001fd2 <__fp_zero>:
    1fd2:	e8 94       	clt

00001fd4 <__fp_szero>:
    1fd4:	bb 27       	eor	r27, r27
    1fd6:	66 27       	eor	r22, r22
    1fd8:	77 27       	eor	r23, r23
    1fda:	cb 01       	movw	r24, r22
    1fdc:	97 f9       	bld	r25, 7
    1fde:	08 95       	ret

00001fe0 <__mulsf3>:
    1fe0:	0b d0       	rcall	.+22     	; 0x1ff8 <__mulsf3x>
    1fe2:	c4 cf       	rjmp	.-120    	; 0x1f6c <__fp_round>
    1fe4:	b5 df       	rcall	.-150    	; 0x1f50 <__fp_pscA>
    1fe6:	28 f0       	brcs	.+10     	; 0x1ff2 <__mulsf3+0x12>
    1fe8:	ba df       	rcall	.-140    	; 0x1f5e <__fp_pscB>
    1fea:	18 f0       	brcs	.+6      	; 0x1ff2 <__mulsf3+0x12>
    1fec:	95 23       	and	r25, r21
    1fee:	09 f0       	breq	.+2      	; 0x1ff2 <__mulsf3+0x12>
    1ff0:	a6 cf       	rjmp	.-180    	; 0x1f3e <__fp_inf>
    1ff2:	ab cf       	rjmp	.-170    	; 0x1f4a <__fp_nan>
    1ff4:	11 24       	eor	r1, r1
    1ff6:	ee cf       	rjmp	.-36     	; 0x1fd4 <__fp_szero>

00001ff8 <__mulsf3x>:
    1ff8:	ca df       	rcall	.-108    	; 0x1f8e <__fp_split3>
    1ffa:	a0 f3       	brcs	.-24     	; 0x1fe4 <__mulsf3+0x4>

00001ffc <__mulsf3_pse>:
    1ffc:	95 9f       	mul	r25, r21
    1ffe:	d1 f3       	breq	.-12     	; 0x1ff4 <__mulsf3+0x14>
    2000:	95 0f       	add	r25, r21
    2002:	50 e0       	ldi	r21, 0x00	; 0
    2004:	55 1f       	adc	r21, r21
    2006:	62 9f       	mul	r22, r18
    2008:	f0 01       	movw	r30, r0
    200a:	72 9f       	mul	r23, r18
    200c:	bb 27       	eor	r27, r27
    200e:	f0 0d       	add	r31, r0
    2010:	b1 1d       	adc	r27, r1
    2012:	63 9f       	mul	r22, r19
    2014:	aa 27       	eor	r26, r26
    2016:	f0 0d       	add	r31, r0
    2018:	b1 1d       	adc	r27, r1
    201a:	aa 1f       	adc	r26, r26
    201c:	64 9f       	mul	r22, r20
    201e:	66 27       	eor	r22, r22
    2020:	b0 0d       	add	r27, r0
    2022:	a1 1d       	adc	r26, r1
    2024:	66 1f       	adc	r22, r22
    2026:	82 9f       	mul	r24, r18
    2028:	22 27       	eor	r18, r18
    202a:	b0 0d       	add	r27, r0
    202c:	a1 1d       	adc	r26, r1
    202e:	62 1f       	adc	r22, r18
    2030:	73 9f       	mul	r23, r19
    2032:	b0 0d       	add	r27, r0
    2034:	a1 1d       	adc	r26, r1
    2036:	62 1f       	adc	r22, r18
    2038:	83 9f       	mul	r24, r19
    203a:	a0 0d       	add	r26, r0
    203c:	61 1d       	adc	r22, r1
    203e:	22 1f       	adc	r18, r18
    2040:	74 9f       	mul	r23, r20
    2042:	33 27       	eor	r19, r19
    2044:	a0 0d       	add	r26, r0
    2046:	61 1d       	adc	r22, r1
    2048:	23 1f       	adc	r18, r19
    204a:	84 9f       	mul	r24, r20
    204c:	60 0d       	add	r22, r0
    204e:	21 1d       	adc	r18, r1
    2050:	82 2f       	mov	r24, r18
    2052:	76 2f       	mov	r23, r22
    2054:	6a 2f       	mov	r22, r26
    2056:	11 24       	eor	r1, r1
    2058:	9f 57       	subi	r25, 0x7F	; 127
    205a:	50 40       	sbci	r21, 0x00	; 0
    205c:	8a f0       	brmi	.+34     	; 0x2080 <__mulsf3_pse+0x84>
    205e:	e1 f0       	breq	.+56     	; 0x2098 <__mulsf3_pse+0x9c>
    2060:	88 23       	and	r24, r24
    2062:	4a f0       	brmi	.+18     	; 0x2076 <__mulsf3_pse+0x7a>
    2064:	ee 0f       	add	r30, r30
    2066:	ff 1f       	adc	r31, r31
    2068:	bb 1f       	adc	r27, r27
    206a:	66 1f       	adc	r22, r22
    206c:	77 1f       	adc	r23, r23
    206e:	88 1f       	adc	r24, r24
    2070:	91 50       	subi	r25, 0x01	; 1
    2072:	50 40       	sbci	r21, 0x00	; 0
    2074:	a9 f7       	brne	.-22     	; 0x2060 <__mulsf3_pse+0x64>
    2076:	9e 3f       	cpi	r25, 0xFE	; 254
    2078:	51 05       	cpc	r21, r1
    207a:	70 f0       	brcs	.+28     	; 0x2098 <__mulsf3_pse+0x9c>
    207c:	60 cf       	rjmp	.-320    	; 0x1f3e <__fp_inf>
    207e:	aa cf       	rjmp	.-172    	; 0x1fd4 <__fp_szero>
    2080:	5f 3f       	cpi	r21, 0xFF	; 255
    2082:	ec f3       	brlt	.-6      	; 0x207e <__mulsf3_pse+0x82>
    2084:	98 3e       	cpi	r25, 0xE8	; 232
    2086:	dc f3       	brlt	.-10     	; 0x207e <__mulsf3_pse+0x82>
    2088:	86 95       	lsr	r24
    208a:	77 95       	ror	r23
    208c:	67 95       	ror	r22
    208e:	b7 95       	ror	r27
    2090:	f7 95       	ror	r31
    2092:	e7 95       	ror	r30
    2094:	9f 5f       	subi	r25, 0xFF	; 255
    2096:	c1 f7       	brne	.-16     	; 0x2088 <__mulsf3_pse+0x8c>
    2098:	fe 2b       	or	r31, r30
    209a:	88 0f       	add	r24, r24
    209c:	91 1d       	adc	r25, r1
    209e:	96 95       	lsr	r25
    20a0:	87 95       	ror	r24
    20a2:	97 f9       	bld	r25, 7
    20a4:	08 95       	ret

000020a6 <pow>:
    20a6:	fa 01       	movw	r30, r20
    20a8:	ee 0f       	add	r30, r30
    20aa:	ff 1f       	adc	r31, r31
    20ac:	30 96       	adiw	r30, 0x00	; 0
    20ae:	21 05       	cpc	r18, r1
    20b0:	31 05       	cpc	r19, r1
    20b2:	99 f1       	breq	.+102    	; 0x211a <pow+0x74>
    20b4:	61 15       	cp	r22, r1
    20b6:	71 05       	cpc	r23, r1
    20b8:	61 f4       	brne	.+24     	; 0x20d2 <pow+0x2c>
    20ba:	80 38       	cpi	r24, 0x80	; 128
    20bc:	bf e3       	ldi	r27, 0x3F	; 63
    20be:	9b 07       	cpc	r25, r27
    20c0:	49 f1       	breq	.+82     	; 0x2114 <pow+0x6e>
    20c2:	68 94       	set
    20c4:	90 38       	cpi	r25, 0x80	; 128
    20c6:	81 05       	cpc	r24, r1
    20c8:	61 f0       	breq	.+24     	; 0x20e2 <pow+0x3c>
    20ca:	80 38       	cpi	r24, 0x80	; 128
    20cc:	bf ef       	ldi	r27, 0xFF	; 255
    20ce:	9b 07       	cpc	r25, r27
    20d0:	41 f0       	breq	.+16     	; 0x20e2 <pow+0x3c>
    20d2:	99 23       	and	r25, r25
    20d4:	42 f5       	brpl	.+80     	; 0x2126 <pow+0x80>
    20d6:	ff 3f       	cpi	r31, 0xFF	; 255
    20d8:	e1 05       	cpc	r30, r1
    20da:	31 05       	cpc	r19, r1
    20dc:	21 05       	cpc	r18, r1
    20de:	11 f1       	breq	.+68     	; 0x2124 <pow+0x7e>
    20e0:	e8 94       	clt
    20e2:	08 94       	sec
    20e4:	e7 95       	ror	r30
    20e6:	d9 01       	movw	r26, r18
    20e8:	aa 23       	and	r26, r26
    20ea:	29 f4       	brne	.+10     	; 0x20f6 <pow+0x50>
    20ec:	ab 2f       	mov	r26, r27
    20ee:	be 2f       	mov	r27, r30
    20f0:	f8 5f       	subi	r31, 0xF8	; 248
    20f2:	d0 f3       	brcs	.-12     	; 0x20e8 <pow+0x42>
    20f4:	10 c0       	rjmp	.+32     	; 0x2116 <pow+0x70>
    20f6:	ff 5f       	subi	r31, 0xFF	; 255
    20f8:	70 f4       	brcc	.+28     	; 0x2116 <pow+0x70>
    20fa:	a6 95       	lsr	r26
    20fc:	e0 f7       	brcc	.-8      	; 0x20f6 <pow+0x50>
    20fe:	f7 39       	cpi	r31, 0x97	; 151
    2100:	50 f0       	brcs	.+20     	; 0x2116 <pow+0x70>
    2102:	19 f0       	breq	.+6      	; 0x210a <pow+0x64>
    2104:	ff 3a       	cpi	r31, 0xAF	; 175
    2106:	38 f4       	brcc	.+14     	; 0x2116 <pow+0x70>
    2108:	9f 77       	andi	r25, 0x7F	; 127
    210a:	9f 93       	push	r25
    210c:	0c d0       	rcall	.+24     	; 0x2126 <pow+0x80>
    210e:	0f 90       	pop	r0
    2110:	07 fc       	sbrc	r0, 7
    2112:	90 58       	subi	r25, 0x80	; 128
    2114:	08 95       	ret
    2116:	3e f0       	brts	.+14     	; 0x2126 <pow+0x80>
    2118:	18 cf       	rjmp	.-464    	; 0x1f4a <__fp_nan>
    211a:	60 e0       	ldi	r22, 0x00	; 0
    211c:	70 e0       	ldi	r23, 0x00	; 0
    211e:	80 e8       	ldi	r24, 0x80	; 128
    2120:	9f e3       	ldi	r25, 0x3F	; 63
    2122:	08 95       	ret
    2124:	4f e7       	ldi	r20, 0x7F	; 127
    2126:	9f 77       	andi	r25, 0x7F	; 127
    2128:	5f 93       	push	r21
    212a:	4f 93       	push	r20
    212c:	3f 93       	push	r19
    212e:	2f 93       	push	r18
    2130:	9e d0       	rcall	.+316    	; 0x226e <log>
    2132:	2f 91       	pop	r18
    2134:	3f 91       	pop	r19
    2136:	4f 91       	pop	r20
    2138:	5f 91       	pop	r21
    213a:	52 df       	rcall	.-348    	; 0x1fe0 <__mulsf3>
    213c:	05 c0       	rjmp	.+10     	; 0x2148 <exp>
    213e:	19 f4       	brne	.+6      	; 0x2146 <pow+0xa0>
    2140:	0e f0       	brts	.+2      	; 0x2144 <pow+0x9e>
    2142:	fd ce       	rjmp	.-518    	; 0x1f3e <__fp_inf>
    2144:	46 cf       	rjmp	.-372    	; 0x1fd2 <__fp_zero>
    2146:	01 cf       	rjmp	.-510    	; 0x1f4a <__fp_nan>

00002148 <exp>:
    2148:	2a df       	rcall	.-428    	; 0x1f9e <__fp_splitA>
    214a:	c8 f3       	brcs	.-14     	; 0x213e <pow+0x98>
    214c:	96 38       	cpi	r25, 0x86	; 134
    214e:	c0 f7       	brcc	.-16     	; 0x2140 <pow+0x9a>
    2150:	07 f8       	bld	r0, 7
    2152:	0f 92       	push	r0
    2154:	e8 94       	clt
    2156:	2b e3       	ldi	r18, 0x3B	; 59
    2158:	3a ea       	ldi	r19, 0xAA	; 170
    215a:	48 eb       	ldi	r20, 0xB8	; 184
    215c:	5f e7       	ldi	r21, 0x7F	; 127
    215e:	4e df       	rcall	.-356    	; 0x1ffc <__mulsf3_pse>
    2160:	0f 92       	push	r0
    2162:	0f 92       	push	r0
    2164:	0f 92       	push	r0
    2166:	4d b7       	in	r20, 0x3d	; 61
    2168:	5e b7       	in	r21, 0x3e	; 62
    216a:	0f 92       	push	r0
    216c:	c0 d0       	rcall	.+384    	; 0x22ee <modf>
    216e:	e6 ef       	ldi	r30, 0xF6	; 246
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	16 d0       	rcall	.+44     	; 0x21a0 <__fp_powser>
    2174:	4f 91       	pop	r20
    2176:	5f 91       	pop	r21
    2178:	ef 91       	pop	r30
    217a:	ff 91       	pop	r31
    217c:	e5 95       	asr	r30
    217e:	ee 1f       	adc	r30, r30
    2180:	ff 1f       	adc	r31, r31
    2182:	49 f0       	breq	.+18     	; 0x2196 <exp+0x4e>
    2184:	fe 57       	subi	r31, 0x7E	; 126
    2186:	e0 68       	ori	r30, 0x80	; 128
    2188:	44 27       	eor	r20, r20
    218a:	ee 0f       	add	r30, r30
    218c:	44 1f       	adc	r20, r20
    218e:	fa 95       	dec	r31
    2190:	e1 f7       	brne	.-8      	; 0x218a <exp+0x42>
    2192:	41 95       	neg	r20
    2194:	55 0b       	sbc	r21, r21
    2196:	32 d0       	rcall	.+100    	; 0x21fc <ldexp>
    2198:	0f 90       	pop	r0
    219a:	07 fe       	sbrs	r0, 7
    219c:	26 c0       	rjmp	.+76     	; 0x21ea <inverse>
    219e:	08 95       	ret

000021a0 <__fp_powser>:
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	1f 93       	push	r17
    21a6:	0f 93       	push	r16
    21a8:	ff 92       	push	r15
    21aa:	ef 92       	push	r14
    21ac:	df 92       	push	r13
    21ae:	7b 01       	movw	r14, r22
    21b0:	8c 01       	movw	r16, r24
    21b2:	68 94       	set
    21b4:	05 c0       	rjmp	.+10     	; 0x21c0 <__fp_powser+0x20>
    21b6:	da 2e       	mov	r13, r26
    21b8:	ef 01       	movw	r28, r30
    21ba:	1e df       	rcall	.-452    	; 0x1ff8 <__mulsf3x>
    21bc:	fe 01       	movw	r30, r28
    21be:	e8 94       	clt
    21c0:	a5 91       	lpm	r26, Z+
    21c2:	25 91       	lpm	r18, Z+
    21c4:	35 91       	lpm	r19, Z+
    21c6:	45 91       	lpm	r20, Z+
    21c8:	55 91       	lpm	r21, Z+
    21ca:	ae f3       	brts	.-22     	; 0x21b6 <__fp_powser+0x16>
    21cc:	ef 01       	movw	r28, r30
    21ce:	8e dd       	rcall	.-1252   	; 0x1cec <__addsf3x>
    21d0:	fe 01       	movw	r30, r28
    21d2:	97 01       	movw	r18, r14
    21d4:	a8 01       	movw	r20, r16
    21d6:	da 94       	dec	r13
    21d8:	79 f7       	brne	.-34     	; 0x21b8 <__fp_powser+0x18>
    21da:	df 90       	pop	r13
    21dc:	ef 90       	pop	r14
    21de:	ff 90       	pop	r15
    21e0:	0f 91       	pop	r16
    21e2:	1f 91       	pop	r17
    21e4:	cf 91       	pop	r28
    21e6:	df 91       	pop	r29
    21e8:	08 95       	ret

000021ea <inverse>:
    21ea:	9b 01       	movw	r18, r22
    21ec:	ac 01       	movw	r20, r24
    21ee:	60 e0       	ldi	r22, 0x00	; 0
    21f0:	70 e0       	ldi	r23, 0x00	; 0
    21f2:	80 e8       	ldi	r24, 0x80	; 128
    21f4:	9f e3       	ldi	r25, 0x3F	; 63
    21f6:	cd cd       	rjmp	.-1126   	; 0x1d92 <__divsf3>
    21f8:	a2 ce       	rjmp	.-700    	; 0x1f3e <__fp_inf>
    21fa:	ac c0       	rjmp	.+344    	; 0x2354 <__fp_mpack>

000021fc <ldexp>:
    21fc:	d0 de       	rcall	.-608    	; 0x1f9e <__fp_splitA>
    21fe:	e8 f3       	brcs	.-6      	; 0x21fa <inverse+0x10>
    2200:	99 23       	and	r25, r25
    2202:	d9 f3       	breq	.-10     	; 0x21fa <inverse+0x10>
    2204:	94 0f       	add	r25, r20
    2206:	51 1d       	adc	r21, r1
    2208:	bb f3       	brvs	.-18     	; 0x21f8 <inverse+0xe>
    220a:	91 50       	subi	r25, 0x01	; 1
    220c:	50 40       	sbci	r21, 0x00	; 0
    220e:	94 f0       	brlt	.+36     	; 0x2234 <__stack+0x35>
    2210:	59 f0       	breq	.+22     	; 0x2228 <__stack+0x29>
    2212:	88 23       	and	r24, r24
    2214:	32 f0       	brmi	.+12     	; 0x2222 <__stack+0x23>
    2216:	66 0f       	add	r22, r22
    2218:	77 1f       	adc	r23, r23
    221a:	88 1f       	adc	r24, r24
    221c:	91 50       	subi	r25, 0x01	; 1
    221e:	50 40       	sbci	r21, 0x00	; 0
    2220:	c1 f7       	brne	.-16     	; 0x2212 <__stack+0x13>
    2222:	9e 3f       	cpi	r25, 0xFE	; 254
    2224:	51 05       	cpc	r21, r1
    2226:	44 f7       	brge	.-48     	; 0x21f8 <inverse+0xe>
    2228:	88 0f       	add	r24, r24
    222a:	91 1d       	adc	r25, r1
    222c:	96 95       	lsr	r25
    222e:	87 95       	ror	r24
    2230:	97 f9       	bld	r25, 7
    2232:	08 95       	ret
    2234:	5f 3f       	cpi	r21, 0xFF	; 255
    2236:	ac f0       	brlt	.+42     	; 0x2262 <__stack+0x63>
    2238:	98 3e       	cpi	r25, 0xE8	; 232
    223a:	9c f0       	brlt	.+38     	; 0x2262 <__stack+0x63>
    223c:	bb 27       	eor	r27, r27
    223e:	86 95       	lsr	r24
    2240:	77 95       	ror	r23
    2242:	67 95       	ror	r22
    2244:	b7 95       	ror	r27
    2246:	08 f4       	brcc	.+2      	; 0x224a <__stack+0x4b>
    2248:	b1 60       	ori	r27, 0x01	; 1
    224a:	93 95       	inc	r25
    224c:	c1 f7       	brne	.-16     	; 0x223e <__stack+0x3f>
    224e:	bb 0f       	add	r27, r27
    2250:	58 f7       	brcc	.-42     	; 0x2228 <__stack+0x29>
    2252:	11 f4       	brne	.+4      	; 0x2258 <__stack+0x59>
    2254:	60 ff       	sbrs	r22, 0
    2256:	e8 cf       	rjmp	.-48     	; 0x2228 <__stack+0x29>
    2258:	6f 5f       	subi	r22, 0xFF	; 255
    225a:	7f 4f       	sbci	r23, 0xFF	; 255
    225c:	8f 4f       	sbci	r24, 0xFF	; 255
    225e:	9f 4f       	sbci	r25, 0xFF	; 255
    2260:	e3 cf       	rjmp	.-58     	; 0x2228 <__stack+0x29>
    2262:	b8 ce       	rjmp	.-656    	; 0x1fd4 <__fp_szero>
    2264:	0e f0       	brts	.+2      	; 0x2268 <__stack+0x69>
    2266:	76 c0       	rjmp	.+236    	; 0x2354 <__fp_mpack>
    2268:	70 ce       	rjmp	.-800    	; 0x1f4a <__fp_nan>
    226a:	68 94       	set
    226c:	68 ce       	rjmp	.-816    	; 0x1f3e <__fp_inf>

0000226e <log>:
    226e:	97 de       	rcall	.-722    	; 0x1f9e <__fp_splitA>
    2270:	c8 f3       	brcs	.-14     	; 0x2264 <__stack+0x65>
    2272:	99 23       	and	r25, r25
    2274:	d1 f3       	breq	.-12     	; 0x226a <__stack+0x6b>
    2276:	c6 f3       	brts	.-16     	; 0x2268 <__stack+0x69>
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	1f 93       	push	r17
    227e:	0f 93       	push	r16
    2280:	ff 92       	push	r15
    2282:	c9 2f       	mov	r28, r25
    2284:	dd 27       	eor	r29, r29
    2286:	88 23       	and	r24, r24
    2288:	2a f0       	brmi	.+10     	; 0x2294 <log+0x26>
    228a:	21 97       	sbiw	r28, 0x01	; 1
    228c:	66 0f       	add	r22, r22
    228e:	77 1f       	adc	r23, r23
    2290:	88 1f       	adc	r24, r24
    2292:	da f7       	brpl	.-10     	; 0x228a <log+0x1c>
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e8       	ldi	r20, 0x80	; 128
    229a:	5f eb       	ldi	r21, 0xBF	; 191
    229c:	9f e3       	ldi	r25, 0x3F	; 63
    229e:	88 39       	cpi	r24, 0x98	; 152
    22a0:	20 f0       	brcs	.+8      	; 0x22aa <log+0x3c>
    22a2:	80 3e       	cpi	r24, 0xE0	; 224
    22a4:	30 f0       	brcs	.+12     	; 0x22b2 <log+0x44>
    22a6:	21 96       	adiw	r28, 0x01	; 1
    22a8:	8f 77       	andi	r24, 0x7F	; 127
    22aa:	0f dd       	rcall	.-1506   	; 0x1cca <__addsf3>
    22ac:	ee e1       	ldi	r30, 0x1E	; 30
    22ae:	f1 e0       	ldi	r31, 0x01	; 1
    22b0:	03 c0       	rjmp	.+6      	; 0x22b8 <log+0x4a>
    22b2:	0b dd       	rcall	.-1514   	; 0x1cca <__addsf3>
    22b4:	eb e4       	ldi	r30, 0x4B	; 75
    22b6:	f1 e0       	ldi	r31, 0x01	; 1
    22b8:	73 df       	rcall	.-282    	; 0x21a0 <__fp_powser>
    22ba:	8b 01       	movw	r16, r22
    22bc:	be 01       	movw	r22, r28
    22be:	ec 01       	movw	r28, r24
    22c0:	fb 2e       	mov	r15, r27
    22c2:	6f 57       	subi	r22, 0x7F	; 127
    22c4:	71 09       	sbc	r23, r1
    22c6:	75 95       	asr	r23
    22c8:	77 1f       	adc	r23, r23
    22ca:	88 0b       	sbc	r24, r24
    22cc:	99 0b       	sbc	r25, r25
    22ce:	fc dd       	rcall	.-1032   	; 0x1ec8 <__floatsisf>
    22d0:	28 e1       	ldi	r18, 0x18	; 24
    22d2:	32 e7       	ldi	r19, 0x72	; 114
    22d4:	41 e3       	ldi	r20, 0x31	; 49
    22d6:	5f e3       	ldi	r21, 0x3F	; 63
    22d8:	8f de       	rcall	.-738    	; 0x1ff8 <__mulsf3x>
    22da:	af 2d       	mov	r26, r15
    22dc:	98 01       	movw	r18, r16
    22de:	ae 01       	movw	r20, r28
    22e0:	ff 90       	pop	r15
    22e2:	0f 91       	pop	r16
    22e4:	1f 91       	pop	r17
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	00 dd       	rcall	.-1536   	; 0x1cec <__addsf3x>
    22ec:	3f ce       	rjmp	.-898    	; 0x1f6c <__fp_round>

000022ee <modf>:
    22ee:	fa 01       	movw	r30, r20
    22f0:	dc 01       	movw	r26, r24
    22f2:	aa 0f       	add	r26, r26
    22f4:	bb 1f       	adc	r27, r27
    22f6:	9b 01       	movw	r18, r22
    22f8:	ac 01       	movw	r20, r24
    22fa:	bf 57       	subi	r27, 0x7F	; 127
    22fc:	28 f4       	brcc	.+10     	; 0x2308 <modf+0x1a>
    22fe:	22 27       	eor	r18, r18
    2300:	33 27       	eor	r19, r19
    2302:	44 27       	eor	r20, r20
    2304:	50 78       	andi	r21, 0x80	; 128
    2306:	1f c0       	rjmp	.+62     	; 0x2346 <modf+0x58>
    2308:	b7 51       	subi	r27, 0x17	; 23
    230a:	88 f4       	brcc	.+34     	; 0x232e <modf+0x40>
    230c:	ab 2f       	mov	r26, r27
    230e:	00 24       	eor	r0, r0
    2310:	46 95       	lsr	r20
    2312:	37 95       	ror	r19
    2314:	27 95       	ror	r18
    2316:	01 1c       	adc	r0, r1
    2318:	a3 95       	inc	r26
    231a:	d2 f3       	brmi	.-12     	; 0x2310 <modf+0x22>
    231c:	00 20       	and	r0, r0
    231e:	69 f0       	breq	.+26     	; 0x233a <modf+0x4c>
    2320:	22 0f       	add	r18, r18
    2322:	33 1f       	adc	r19, r19
    2324:	44 1f       	adc	r20, r20
    2326:	b3 95       	inc	r27
    2328:	da f3       	brmi	.-10     	; 0x2320 <modf+0x32>
    232a:	0d d0       	rcall	.+26     	; 0x2346 <modf+0x58>
    232c:	cd cc       	rjmp	.-1638   	; 0x1cc8 <__subsf3>
    232e:	61 30       	cpi	r22, 0x01	; 1
    2330:	71 05       	cpc	r23, r1
    2332:	a0 e8       	ldi	r26, 0x80	; 128
    2334:	8a 07       	cpc	r24, r26
    2336:	b9 46       	sbci	r27, 0x69	; 105
    2338:	30 f4       	brcc	.+12     	; 0x2346 <modf+0x58>
    233a:	9b 01       	movw	r18, r22
    233c:	ac 01       	movw	r20, r24
    233e:	66 27       	eor	r22, r22
    2340:	77 27       	eor	r23, r23
    2342:	88 27       	eor	r24, r24
    2344:	90 78       	andi	r25, 0x80	; 128
    2346:	30 96       	adiw	r30, 0x00	; 0
    2348:	21 f0       	breq	.+8      	; 0x2352 <modf+0x64>
    234a:	20 83       	st	Z, r18
    234c:	31 83       	std	Z+1, r19	; 0x01
    234e:	42 83       	std	Z+2, r20	; 0x02
    2350:	53 83       	std	Z+3, r21	; 0x03
    2352:	08 95       	ret

00002354 <__fp_mpack>:
    2354:	9f 3f       	cpi	r25, 0xFF	; 255
    2356:	31 f0       	breq	.+12     	; 0x2364 <__fp_mpack_finite+0xc>

00002358 <__fp_mpack_finite>:
    2358:	91 50       	subi	r25, 0x01	; 1
    235a:	20 f4       	brcc	.+8      	; 0x2364 <__fp_mpack_finite+0xc>
    235c:	87 95       	ror	r24
    235e:	77 95       	ror	r23
    2360:	67 95       	ror	r22
    2362:	b7 95       	ror	r27
    2364:	88 0f       	add	r24, r24
    2366:	91 1d       	adc	r25, r1
    2368:	96 95       	lsr	r25
    236a:	87 95       	ror	r24
    236c:	97 f9       	bld	r25, 7
    236e:	08 95       	ret

00002370 <__udivmodhi4>:
    2370:	aa 1b       	sub	r26, r26
    2372:	bb 1b       	sub	r27, r27
    2374:	51 e1       	ldi	r21, 0x11	; 17
    2376:	07 c0       	rjmp	.+14     	; 0x2386 <__udivmodhi4_ep>

00002378 <__udivmodhi4_loop>:
    2378:	aa 1f       	adc	r26, r26
    237a:	bb 1f       	adc	r27, r27
    237c:	a6 17       	cp	r26, r22
    237e:	b7 07       	cpc	r27, r23
    2380:	10 f0       	brcs	.+4      	; 0x2386 <__udivmodhi4_ep>
    2382:	a6 1b       	sub	r26, r22
    2384:	b7 0b       	sbc	r27, r23

00002386 <__udivmodhi4_ep>:
    2386:	88 1f       	adc	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	5a 95       	dec	r21
    238c:	a9 f7       	brne	.-22     	; 0x2378 <__udivmodhi4_loop>
    238e:	80 95       	com	r24
    2390:	90 95       	com	r25
    2392:	bc 01       	movw	r22, r24
    2394:	cd 01       	movw	r24, r26
    2396:	08 95       	ret

00002398 <__tablejump2__>:
    2398:	ee 0f       	add	r30, r30
    239a:	ff 1f       	adc	r31, r31
    239c:	88 1f       	adc	r24, r24
    239e:	8b bf       	out	0x3b, r24	; 59
    23a0:	07 90       	elpm	r0, Z+
    23a2:	f6 91       	elpm	r31, Z
    23a4:	e0 2d       	mov	r30, r0
    23a6:	19 94       	eijmp

000023a8 <__umulhisi3>:
    23a8:	a2 9f       	mul	r26, r18
    23aa:	b0 01       	movw	r22, r0
    23ac:	b3 9f       	mul	r27, r19
    23ae:	c0 01       	movw	r24, r0
    23b0:	a3 9f       	mul	r26, r19
    23b2:	70 0d       	add	r23, r0
    23b4:	81 1d       	adc	r24, r1
    23b6:	11 24       	eor	r1, r1
    23b8:	91 1d       	adc	r25, r1
    23ba:	b2 9f       	mul	r27, r18
    23bc:	70 0d       	add	r23, r0
    23be:	81 1d       	adc	r24, r1
    23c0:	11 24       	eor	r1, r1
    23c2:	91 1d       	adc	r25, r1
    23c4:	08 95       	ret

000023c6 <_exit>:
    23c6:	f8 94       	cli

000023c8 <__stop_program>:
    23c8:	ff cf       	rjmp	.-2      	; 0x23c8 <__stop_program>
